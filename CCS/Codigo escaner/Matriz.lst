CCS PCM C Compiler, Version 5.015, 5967               18-feb.-19 15:15

               Filename:   D:\Users\ESTEBAN\Desktop\Codigo PIC\Matriz.lst

               ROM used:   2891 words (35%)
                           Largest free fragment is 2048
               RAM used:   74 (20%) at main() level
                           117 (32%) worst case
               Stack used: 9 locations (4 in main + 5 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   1C5
.................... #include <16f877a.h>  
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
01E4:  BCF    03.6
01E5:  MOVF   0B,W
01E6:  BSF    03.5
01E7:  MOVWF  26
01E8:  BCF    03.5
01E9:  BCF    0B.7
01EA:  BSF    03.5
01EB:  BSF    03.6
01EC:  BSF    0C.7
01ED:  BSF    0C.0
01EE:  NOP
01EF:  NOP
01F0:  BCF    03.6
01F1:  BTFSS  26.7
01F2:  GOTO   1F6
01F3:  BCF    03.5
01F4:  BSF    0B.7
01F5:  BSF    03.5
01F6:  BCF    03.5
01F7:  BSF    03.6
01F8:  MOVF   0C,W
01F9:  ANDLW  7F
01FA:  BTFSC  03.2
01FB:  GOTO   255
01FC:  BSF    03.5
01FD:  BCF    03.6
01FE:  MOVWF  26
01FF:  BCF    03.5
0200:  BSF    03.6
0201:  MOVF   0D,W
0202:  BSF    03.5
0203:  BCF    03.6
0204:  MOVWF  27
0205:  BCF    03.5
0206:  BSF    03.6
0207:  MOVF   0F,W
0208:  BSF    03.5
0209:  BCF    03.6
020A:  MOVWF  28
020B:  MOVF   26,W
020C:  MOVWF  2A
020D:  BCF    03.5
020E:  CALL   18B
020F:  BSF    03.5
0210:  MOVF   27,W
0211:  BCF    03.5
0212:  BSF    03.6
0213:  MOVWF  0D
0214:  BSF    03.5
0215:  BCF    03.6
0216:  MOVF   28,W
0217:  BCF    03.5
0218:  BSF    03.6
0219:  MOVWF  0F
021A:  BCF    03.6
021B:  MOVF   0B,W
021C:  BSF    03.5
021D:  MOVWF  29
021E:  BCF    03.5
021F:  BCF    0B.7
0220:  BSF    03.5
0221:  BSF    03.6
0222:  BSF    0C.7
0223:  BSF    0C.0
0224:  NOP
0225:  NOP
0226:  BCF    03.6
0227:  BTFSS  29.7
0228:  GOTO   22C
0229:  BCF    03.5
022A:  BSF    0B.7
022B:  BSF    03.5
022C:  BCF    03.5
022D:  BSF    03.6
022E:  RLF    0C,W
022F:  RLF    0E,W
0230:  ANDLW  7F
0231:  BTFSC  03.2
0232:  GOTO   255
0233:  BSF    03.5
0234:  BCF    03.6
0235:  MOVWF  26
0236:  BCF    03.5
0237:  BSF    03.6
0238:  MOVF   0D,W
0239:  BSF    03.5
023A:  BCF    03.6
023B:  MOVWF  27
023C:  BCF    03.5
023D:  BSF    03.6
023E:  MOVF   0F,W
023F:  BSF    03.5
0240:  BCF    03.6
0241:  MOVWF  28
0242:  MOVF   26,W
0243:  MOVWF  2A
0244:  BCF    03.5
0245:  CALL   18B
0246:  BSF    03.5
0247:  MOVF   27,W
0248:  BCF    03.5
0249:  BSF    03.6
024A:  MOVWF  0D
024B:  BSF    03.5
024C:  BCF    03.6
024D:  MOVF   28,W
024E:  BCF    03.5
024F:  BSF    03.6
0250:  MOVWF  0F
0251:  INCF   0D,F
0252:  BTFSC  03.2
0253:  INCF   0F,F
0254:  GOTO   1E4
*
0267:  BCF    03.5
0268:  MOVF   0B,W
0269:  BSF    03.5
026A:  MOVWF  27
026B:  BCF    03.5
026C:  BCF    0B.7
026D:  BSF    03.5
026E:  BSF    03.6
026F:  BSF    0C.7
0270:  BSF    0C.0
0271:  NOP
0272:  NOP
0273:  BCF    03.6
0274:  BTFSS  27.7
0275:  GOTO   279
0276:  BCF    03.5
0277:  BSF    0B.7
0278:  BSF    03.5
0279:  BTFSC  03.0
027A:  GOTO   2B2
027B:  BCF    03.5
027C:  BSF    03.6
027D:  MOVF   0C,W
027E:  ANDLW  7F
027F:  BSF    03.5
0280:  BCF    03.6
0281:  MOVWF  27
0282:  BCF    03.5
0283:  BSF    03.6
0284:  MOVF   0D,W
0285:  BSF    03.5
0286:  BCF    03.6
0287:  MOVWF  28
0288:  BCF    03.5
0289:  BSF    03.6
028A:  MOVF   0F,W
028B:  BSF    03.5
028C:  BCF    03.6
028D:  MOVWF  29
028E:  MOVF   27,W
028F:  MOVWF  2A
0290:  BCF    03.5
0291:  CALL   18B
0292:  BSF    03.5
0293:  MOVF   28,W
0294:  BCF    03.5
0295:  BSF    03.6
0296:  MOVWF  0D
0297:  BSF    03.5
0298:  BCF    03.6
0299:  MOVF   29,W
029A:  BCF    03.5
029B:  BSF    03.6
029C:  MOVWF  0F
029D:  BCF    03.6
029E:  MOVF   0B,W
029F:  BSF    03.5
02A0:  MOVWF  2A
02A1:  BCF    03.5
02A2:  BCF    0B.7
02A3:  BSF    03.5
02A4:  BSF    03.6
02A5:  BSF    0C.7
02A6:  BSF    0C.0
02A7:  NOP
02A8:  NOP
02A9:  BCF    03.6
02AA:  BTFSS  2A.7
02AB:  GOTO   2AF
02AC:  BCF    03.5
02AD:  BSF    0B.7
02AE:  BSF    03.5
02AF:  DECFSZ 26,F
02B0:  GOTO   2B2
02B1:  GOTO   2DD
02B2:  BCF    03.5
02B3:  BSF    03.6
02B4:  RLF    0C,W
02B5:  RLF    0E,W
02B6:  ANDLW  7F
02B7:  BSF    03.5
02B8:  BCF    03.6
02B9:  MOVWF  27
02BA:  BCF    03.5
02BB:  BSF    03.6
02BC:  MOVF   0D,W
02BD:  BSF    03.5
02BE:  BCF    03.6
02BF:  MOVWF  28
02C0:  BCF    03.5
02C1:  BSF    03.6
02C2:  MOVF   0F,W
02C3:  BSF    03.5
02C4:  BCF    03.6
02C5:  MOVWF  29
02C6:  MOVF   27,W
02C7:  MOVWF  2A
02C8:  BCF    03.5
02C9:  CALL   18B
02CA:  BSF    03.5
02CB:  MOVF   28,W
02CC:  BCF    03.5
02CD:  BSF    03.6
02CE:  MOVWF  0D
02CF:  BSF    03.5
02D0:  BCF    03.6
02D1:  MOVF   29,W
02D2:  BCF    03.5
02D3:  BSF    03.6
02D4:  MOVWF  0F
02D5:  INCF   0D,F
02D6:  BTFSC  03.2
02D7:  INCF   0F,F
02D8:  BCF    03.0
02D9:  BSF    03.5
02DA:  BCF    03.6
02DB:  DECFSZ 26,F
02DC:  GOTO   267
*
0305:  BCF    03.6
0306:  MOVF   0B,W
0307:  BSF    03.5
0308:  MOVWF  26
0309:  BCF    03.5
030A:  BCF    0B.7
030B:  BSF    03.5
030C:  BSF    03.6
030D:  BSF    0C.7
030E:  BSF    0C.0
030F:  NOP
0310:  NOP
0311:  BCF    03.6
0312:  BTFSS  26.7
0313:  GOTO   317
0314:  BCF    03.5
0315:  BSF    0B.7
0316:  BSF    03.5
0317:  BCF    03.5
0318:  BSF    03.6
0319:  MOVF   0C,W
031A:  ANDLW  7F
031B:  BTFSC  03.2
031C:  GOTO   376
031D:  BSF    03.5
031E:  BCF    03.6
031F:  MOVWF  26
0320:  BCF    03.5
0321:  BSF    03.6
0322:  MOVF   0D,W
0323:  BSF    03.5
0324:  BCF    03.6
0325:  MOVWF  27
0326:  BCF    03.5
0327:  BSF    03.6
0328:  MOVF   0F,W
0329:  BSF    03.5
032A:  BCF    03.6
032B:  MOVWF  28
032C:  MOVF   26,W
032D:  MOVWF  2A
032E:  BCF    03.5
032F:  CALL   18B
0330:  BSF    03.5
0331:  MOVF   27,W
0332:  BCF    03.5
0333:  BSF    03.6
0334:  MOVWF  0D
0335:  BSF    03.5
0336:  BCF    03.6
0337:  MOVF   28,W
0338:  BCF    03.5
0339:  BSF    03.6
033A:  MOVWF  0F
033B:  BCF    03.6
033C:  MOVF   0B,W
033D:  BSF    03.5
033E:  MOVWF  29
033F:  BCF    03.5
0340:  BCF    0B.7
0341:  BSF    03.5
0342:  BSF    03.6
0343:  BSF    0C.7
0344:  BSF    0C.0
0345:  NOP
0346:  NOP
0347:  BCF    03.6
0348:  BTFSS  29.7
0349:  GOTO   34D
034A:  BCF    03.5
034B:  BSF    0B.7
034C:  BSF    03.5
034D:  BCF    03.5
034E:  BSF    03.6
034F:  RLF    0C,W
0350:  RLF    0E,W
0351:  ANDLW  7F
0352:  BTFSC  03.2
0353:  GOTO   376
0354:  BSF    03.5
0355:  BCF    03.6
0356:  MOVWF  26
0357:  BCF    03.5
0358:  BSF    03.6
0359:  MOVF   0D,W
035A:  BSF    03.5
035B:  BCF    03.6
035C:  MOVWF  27
035D:  BCF    03.5
035E:  BSF    03.6
035F:  MOVF   0F,W
0360:  BSF    03.5
0361:  BCF    03.6
0362:  MOVWF  28
0363:  MOVF   26,W
0364:  MOVWF  2A
0365:  BCF    03.5
0366:  CALL   18B
0367:  BSF    03.5
0368:  MOVF   27,W
0369:  BCF    03.5
036A:  BSF    03.6
036B:  MOVWF  0D
036C:  BSF    03.5
036D:  BCF    03.6
036E:  MOVF   28,W
036F:  BCF    03.5
0370:  BSF    03.6
0371:  MOVWF  0F
0372:  INCF   0D,F
0373:  BTFSC  03.2
0374:  INCF   0F,F
0375:  GOTO   305
*
0383:  BCF    03.6
0384:  MOVF   0B,W
0385:  BSF    03.5
0386:  MOVWF  26
0387:  BCF    03.5
0388:  BCF    0B.7
0389:  BSF    03.5
038A:  BSF    03.6
038B:  BSF    0C.7
038C:  BSF    0C.0
038D:  NOP
038E:  NOP
038F:  BCF    03.6
0390:  BTFSS  26.7
0391:  GOTO   395
0392:  BCF    03.5
0393:  BSF    0B.7
0394:  BSF    03.5
0395:  BCF    03.5
0396:  BSF    03.6
0397:  MOVF   0C,W
0398:  ANDLW  7F
0399:  BTFSC  03.2
039A:  GOTO   3F4
039B:  BSF    03.5
039C:  BCF    03.6
039D:  MOVWF  26
039E:  BCF    03.5
039F:  BSF    03.6
03A0:  MOVF   0D,W
03A1:  BSF    03.5
03A2:  BCF    03.6
03A3:  MOVWF  27
03A4:  BCF    03.5
03A5:  BSF    03.6
03A6:  MOVF   0F,W
03A7:  BSF    03.5
03A8:  BCF    03.6
03A9:  MOVWF  28
03AA:  MOVF   26,W
03AB:  MOVWF  2A
03AC:  BCF    03.5
03AD:  CALL   18B
03AE:  BSF    03.5
03AF:  MOVF   27,W
03B0:  BCF    03.5
03B1:  BSF    03.6
03B2:  MOVWF  0D
03B3:  BSF    03.5
03B4:  BCF    03.6
03B5:  MOVF   28,W
03B6:  BCF    03.5
03B7:  BSF    03.6
03B8:  MOVWF  0F
03B9:  BCF    03.6
03BA:  MOVF   0B,W
03BB:  BSF    03.5
03BC:  MOVWF  29
03BD:  BCF    03.5
03BE:  BCF    0B.7
03BF:  BSF    03.5
03C0:  BSF    03.6
03C1:  BSF    0C.7
03C2:  BSF    0C.0
03C3:  NOP
03C4:  NOP
03C5:  BCF    03.6
03C6:  BTFSS  29.7
03C7:  GOTO   3CB
03C8:  BCF    03.5
03C9:  BSF    0B.7
03CA:  BSF    03.5
03CB:  BCF    03.5
03CC:  BSF    03.6
03CD:  RLF    0C,W
03CE:  RLF    0E,W
03CF:  ANDLW  7F
03D0:  BTFSC  03.2
03D1:  GOTO   3F4
03D2:  BSF    03.5
03D3:  BCF    03.6
03D4:  MOVWF  26
03D5:  BCF    03.5
03D6:  BSF    03.6
03D7:  MOVF   0D,W
03D8:  BSF    03.5
03D9:  BCF    03.6
03DA:  MOVWF  27
03DB:  BCF    03.5
03DC:  BSF    03.6
03DD:  MOVF   0F,W
03DE:  BSF    03.5
03DF:  BCF    03.6
03E0:  MOVWF  28
03E1:  MOVF   26,W
03E2:  MOVWF  2A
03E3:  BCF    03.5
03E4:  CALL   18B
03E5:  BSF    03.5
03E6:  MOVF   27,W
03E7:  BCF    03.5
03E8:  BSF    03.6
03E9:  MOVWF  0D
03EA:  BSF    03.5
03EB:  BCF    03.6
03EC:  MOVF   28,W
03ED:  BCF    03.5
03EE:  BSF    03.6
03EF:  MOVWF  0F
03F0:  INCF   0D,F
03F1:  BTFSC  03.2
03F2:  INCF   0F,F
03F3:  GOTO   383
*
0590:  BSF    0A.0
0591:  BCF    0A.1
0592:  BSF    0A.2
0593:  ADDWF  02,F
0594:  GOTO   4C7
0595:  GOTO   50E
0596:  GOTO   50E
0597:  GOTO   4E2
0598:  GOTO   4CA
0599:  GOTO   4E5
059A:  GOTO   50E
059B:  GOTO   4DC
059C:  GOTO   4D9
059D:  GOTO   4F1
059E:  GOTO   4EB
059F:  GOTO   4FA
05A0:  GOTO   4EE
05A1:  GOTO   503
05A2:  GOTO   4DF
05A3:  GOTO   509
05A4:  GOTO   401
05A5:  GOTO   40A
05A6:  GOTO   40D
05A7:  GOTO   410
05A8:  GOTO   413
05A9:  GOTO   416
05AA:  GOTO   419
05AB:  GOTO   41C
05AC:  GOTO   41F
05AD:  GOTO   500
05AE:  GOTO   4FD
05AF:  GOTO   4CD
05B0:  GOTO   4E8
05B1:  GOTO   4D0
05B2:  GOTO   4BE
05B3:  GOTO   506
05B4:  GOTO   470
05B5:  GOTO   473
05B6:  GOTO   476
05B7:  GOTO   479
05B8:  GOTO   47C
05B9:  GOTO   47F
05BA:  GOTO   482
05BB:  GOTO   485
05BC:  GOTO   488
05BD:  GOTO   48B
05BE:  GOTO   48E
05BF:  GOTO   491
05C0:  GOTO   494
05C1:  GOTO   497
05C2:  GOTO   49A
05C3:  GOTO   49D
05C4:  GOTO   4A0
05C5:  GOTO   4A3
05C6:  GOTO   4A6
05C7:  GOTO   4A9
05C8:  GOTO   4AC
05C9:  GOTO   4AF
05CA:  GOTO   4B2
05CB:  GOTO   4B5
05CC:  GOTO   4B8
05CD:  GOTO   4BB
05CE:  GOTO   4C4
05CF:  GOTO   50E
05D0:  GOTO   4C1
05D1:  GOTO   4F4
05D2:  GOTO   50E
05D3:  GOTO   50E
05D4:  GOTO   422
05D5:  GOTO   425
05D6:  GOTO   428
05D7:  GOTO   42B
05D8:  GOTO   42E
05D9:  GOTO   431
05DA:  GOTO   434
05DB:  GOTO   437
05DC:  GOTO   43A
05DD:  GOTO   43D
05DE:  GOTO   440
05DF:  GOTO   443
05E0:  GOTO   446
05E1:  GOTO   449
05E2:  GOTO   44C
05E3:  GOTO   44F
05E4:  GOTO   452
05E5:  GOTO   455
05E6:  GOTO   458
05E7:  GOTO   45B
05E8:  GOTO   45E
05E9:  GOTO   461
05EA:  GOTO   464
05EB:  GOTO   467
05EC:  GOTO   46A
05ED:  GOTO   46D
05EE:  GOTO   4D6
05EF:  GOTO   4F7
05F0:  GOTO   4D3
05F1:  GOTO   50C
05F2:  BSF    0A.0
05F3:  BCF    0A.1
05F4:  BSF    0A.2
05F5:  ADDLW  F9
05F6:  BTFSC  03.0
05F7:  INCF   0A,F
05F8:  MOVWF  02
05F9:  GOTO   515
05FA:  GOTO   518
05FB:  GOTO   51B
05FC:  GOTO   51E
05FD:  GOTO   521
05FE:  GOTO   524
05FF:  GOTO   527
0600:  GOTO   52A
0601:  GOTO   52D
0602:  GOTO   530
0603:  GOTO   533
0604:  GOTO   536
0605:  GOTO   539
0606:  GOTO   53C
0607:  GOTO   53F
0608:  GOTO   542
0609:  GOTO   545
060A:  GOTO   548
060B:  GOTO   54B
060C:  GOTO   54E
060D:  GOTO   551
060E:  GOTO   554
060F:  GOTO   557
0610:  GOTO   55A
0611:  GOTO   55D
0612:  GOTO   560
0613:  GOTO   563
0614:  GOTO   566
0615:  GOTO   569
0616:  GOTO   56C
0617:  GOTO   56F
0618:  GOTO   572
0619:  GOTO   575
061A:  GOTO   578
061B:  GOTO   57B
061C:  GOTO   57E
061D:  GOTO   581
061E:  GOTO   584
061F:  GOTO   587
0620:  GOTO   58A
0621:  DATA C3,37
0622:  DATA ED,3A
0623:  DATA EE,34
0624:  DATA E3,30
0625:  DATA E3,34
0626:  DATA 6F,37
0627:  DATA A0,37
0628:  DATA 6E,10
0629:  DATA 00,00
062A:  DATA 20,22
062B:  DATA 69,31
062C:  DATA 75,35
062D:  DATA 61,37
062E:  DATA E4,37
062F:  DATA A0,12
0630:  DATA 63,10
0631:  DATA 00,00
0632:  DATA C3,37
0633:  DATA ED,3A
0634:  DATA EE,34
0635:  DATA E3,30
0636:  DATA E3,34
0637:  DATA 6F,37
0638:  DATA A0,37
0639:  DATA 66,33
063A:  DATA 20,00
063B:  DATA A0,22
063C:  DATA F3,31
063D:  DATA 61,37
063E:  DATA E5,30
063F:  DATA 6E,32
0640:  DATA 6F,10
0641:  DATA 00,01
0642:  DATA 45,37
0643:  DATA E3,32
0644:  DATA 6E,32
0645:  DATA E9,32
0646:  DATA 6E,32
0647:  DATA 6F,00
0648:  DATA A0,26
0649:  DATA 61,3A
064A:  DATA F2,34
064B:  DATA 78,10
064C:  DATA 20,00
064D:  DATA 20,28
064E:  DATA F2,37
064F:  DATA F9,32
0650:  DATA 63,3A
0651:  DATA E9,37
0652:  DATA 6E,10
0653:  DATA 00,00
*
089D:  BCF    03.6
089E:  MOVF   0B,W
089F:  BSF    03.5
08A0:  MOVWF  26
08A1:  BCF    03.5
08A2:  BCF    0B.7
08A3:  BSF    03.5
08A4:  BSF    03.6
08A5:  BSF    0C.7
08A6:  BSF    0C.0
08A7:  NOP
08A8:  NOP
08A9:  BCF    03.6
08AA:  BTFSS  26.7
08AB:  GOTO   0AF
08AC:  BCF    03.5
08AD:  BSF    0B.7
08AE:  BSF    03.5
08AF:  BCF    03.5
08B0:  BSF    03.6
08B1:  MOVF   0C,W
08B2:  ANDLW  7F
08B3:  BTFSC  03.2
08B4:  GOTO   112
08B5:  BSF    03.5
08B6:  BCF    03.6
08B7:  MOVWF  26
08B8:  BCF    03.5
08B9:  BSF    03.6
08BA:  MOVF   0D,W
08BB:  BSF    03.5
08BC:  BCF    03.6
08BD:  MOVWF  27
08BE:  BCF    03.5
08BF:  BSF    03.6
08C0:  MOVF   0F,W
08C1:  BSF    03.5
08C2:  BCF    03.6
08C3:  MOVWF  28
08C4:  MOVF   26,W
08C5:  MOVWF  2A
08C6:  BCF    0A.3
08C7:  BCF    03.5
08C8:  CALL   18B
08C9:  BSF    0A.3
08CA:  BSF    03.5
08CB:  MOVF   27,W
08CC:  BCF    03.5
08CD:  BSF    03.6
08CE:  MOVWF  0D
08CF:  BSF    03.5
08D0:  BCF    03.6
08D1:  MOVF   28,W
08D2:  BCF    03.5
08D3:  BSF    03.6
08D4:  MOVWF  0F
08D5:  BCF    03.6
08D6:  MOVF   0B,W
08D7:  BSF    03.5
08D8:  MOVWF  29
08D9:  BCF    03.5
08DA:  BCF    0B.7
08DB:  BSF    03.5
08DC:  BSF    03.6
08DD:  BSF    0C.7
08DE:  BSF    0C.0
08DF:  NOP
08E0:  NOP
08E1:  BCF    03.6
08E2:  BTFSS  29.7
08E3:  GOTO   0E7
08E4:  BCF    03.5
08E5:  BSF    0B.7
08E6:  BSF    03.5
08E7:  BCF    03.5
08E8:  BSF    03.6
08E9:  RLF    0C,W
08EA:  RLF    0E,W
08EB:  ANDLW  7F
08EC:  BTFSC  03.2
08ED:  GOTO   112
08EE:  BSF    03.5
08EF:  BCF    03.6
08F0:  MOVWF  26
08F1:  BCF    03.5
08F2:  BSF    03.6
08F3:  MOVF   0D,W
08F4:  BSF    03.5
08F5:  BCF    03.6
08F6:  MOVWF  27
08F7:  BCF    03.5
08F8:  BSF    03.6
08F9:  MOVF   0F,W
08FA:  BSF    03.5
08FB:  BCF    03.6
08FC:  MOVWF  28
08FD:  MOVF   26,W
08FE:  MOVWF  2A
08FF:  BCF    0A.3
0900:  BCF    03.5
0901:  CALL   18B
0902:  BSF    0A.3
0903:  BSF    03.5
0904:  MOVF   27,W
0905:  BCF    03.5
0906:  BSF    03.6
0907:  MOVWF  0D
0908:  BSF    03.5
0909:  BCF    03.6
090A:  MOVF   28,W
090B:  BCF    03.5
090C:  BSF    03.6
090D:  MOVWF  0F
090E:  INCF   0D,F
090F:  BTFSC  03.2
0910:  INCF   0F,F
0911:  GOTO   09D
0912:  BCF    03.6
0913:  CLRF   2B
0914:  BTFSC  0B.7
0915:  BSF    2B.7
0916:  BCF    0B.7
*
0A28:  BCF    03.6
0A29:  MOVF   0B,W
0A2A:  BSF    03.5
0A2B:  MOVWF  26
0A2C:  BCF    03.5
0A2D:  BCF    0B.7
0A2E:  BSF    03.5
0A2F:  BSF    03.6
0A30:  BSF    0C.7
0A31:  BSF    0C.0
0A32:  NOP
0A33:  NOP
0A34:  BCF    03.6
0A35:  BTFSS  26.7
0A36:  GOTO   23A
0A37:  BCF    03.5
0A38:  BSF    0B.7
0A39:  BSF    03.5
0A3A:  BCF    03.5
0A3B:  BSF    03.6
0A3C:  MOVF   0C,W
0A3D:  ANDLW  7F
0A3E:  BTFSC  03.2
0A3F:  GOTO   29D
0A40:  BSF    03.5
0A41:  BCF    03.6
0A42:  MOVWF  26
0A43:  BCF    03.5
0A44:  BSF    03.6
0A45:  MOVF   0D,W
0A46:  BSF    03.5
0A47:  BCF    03.6
0A48:  MOVWF  27
0A49:  BCF    03.5
0A4A:  BSF    03.6
0A4B:  MOVF   0F,W
0A4C:  BSF    03.5
0A4D:  BCF    03.6
0A4E:  MOVWF  28
0A4F:  MOVF   26,W
0A50:  MOVWF  2A
0A51:  BCF    0A.3
0A52:  BCF    03.5
0A53:  CALL   18B
0A54:  BSF    0A.3
0A55:  BSF    03.5
0A56:  MOVF   27,W
0A57:  BCF    03.5
0A58:  BSF    03.6
0A59:  MOVWF  0D
0A5A:  BSF    03.5
0A5B:  BCF    03.6
0A5C:  MOVF   28,W
0A5D:  BCF    03.5
0A5E:  BSF    03.6
0A5F:  MOVWF  0F
0A60:  BCF    03.6
0A61:  MOVF   0B,W
0A62:  BSF    03.5
0A63:  MOVWF  29
0A64:  BCF    03.5
0A65:  BCF    0B.7
0A66:  BSF    03.5
0A67:  BSF    03.6
0A68:  BSF    0C.7
0A69:  BSF    0C.0
0A6A:  NOP
0A6B:  NOP
0A6C:  BCF    03.6
0A6D:  BTFSS  29.7
0A6E:  GOTO   272
0A6F:  BCF    03.5
0A70:  BSF    0B.7
0A71:  BSF    03.5
0A72:  BCF    03.5
0A73:  BSF    03.6
0A74:  RLF    0C,W
0A75:  RLF    0E,W
0A76:  ANDLW  7F
0A77:  BTFSC  03.2
0A78:  GOTO   29D
0A79:  BSF    03.5
0A7A:  BCF    03.6
0A7B:  MOVWF  26
0A7C:  BCF    03.5
0A7D:  BSF    03.6
0A7E:  MOVF   0D,W
0A7F:  BSF    03.5
0A80:  BCF    03.6
0A81:  MOVWF  27
0A82:  BCF    03.5
0A83:  BSF    03.6
0A84:  MOVF   0F,W
0A85:  BSF    03.5
0A86:  BCF    03.6
0A87:  MOVWF  28
0A88:  MOVF   26,W
0A89:  MOVWF  2A
0A8A:  BCF    0A.3
0A8B:  BCF    03.5
0A8C:  CALL   18B
0A8D:  BSF    0A.3
0A8E:  BSF    03.5
0A8F:  MOVF   27,W
0A90:  BCF    03.5
0A91:  BSF    03.6
0A92:  MOVWF  0D
0A93:  BSF    03.5
0A94:  BCF    03.6
0A95:  MOVF   28,W
0A96:  BCF    03.5
0A97:  BSF    03.6
0A98:  MOVWF  0F
0A99:  INCF   0D,F
0A9A:  BTFSC  03.2
0A9B:  INCF   0F,F
0A9C:  GOTO   228
0A9D:  BCF    03.6
0A9E:  CLRF   2B
0A9F:  BTFSC  0B.7
0AA0:  BSF    2B.7
0AA1:  BCF    0B.7
*
0AC7:  BCF    03.6
0AC8:  MOVF   0B,W
0AC9:  BSF    03.5
0ACA:  MOVWF  26
0ACB:  BCF    03.5
0ACC:  BCF    0B.7
0ACD:  BSF    03.5
0ACE:  BSF    03.6
0ACF:  BSF    0C.7
0AD0:  BSF    0C.0
0AD1:  NOP
0AD2:  NOP
0AD3:  BCF    03.6
0AD4:  BTFSS  26.7
0AD5:  GOTO   2D9
0AD6:  BCF    03.5
0AD7:  BSF    0B.7
0AD8:  BSF    03.5
0AD9:  BCF    03.5
0ADA:  BSF    03.6
0ADB:  MOVF   0C,W
0ADC:  ANDLW  7F
0ADD:  BTFSC  03.2
0ADE:  GOTO   33C
0ADF:  BSF    03.5
0AE0:  BCF    03.6
0AE1:  MOVWF  26
0AE2:  BCF    03.5
0AE3:  BSF    03.6
0AE4:  MOVF   0D,W
0AE5:  BSF    03.5
0AE6:  BCF    03.6
0AE7:  MOVWF  27
0AE8:  BCF    03.5
0AE9:  BSF    03.6
0AEA:  MOVF   0F,W
0AEB:  BSF    03.5
0AEC:  BCF    03.6
0AED:  MOVWF  28
0AEE:  MOVF   26,W
0AEF:  MOVWF  2A
0AF0:  BCF    0A.3
0AF1:  BCF    03.5
0AF2:  CALL   18B
0AF3:  BSF    0A.3
0AF4:  BSF    03.5
0AF5:  MOVF   27,W
0AF6:  BCF    03.5
0AF7:  BSF    03.6
0AF8:  MOVWF  0D
0AF9:  BSF    03.5
0AFA:  BCF    03.6
0AFB:  MOVF   28,W
0AFC:  BCF    03.5
0AFD:  BSF    03.6
0AFE:  MOVWF  0F
0AFF:  BCF    03.6
0B00:  MOVF   0B,W
0B01:  BSF    03.5
0B02:  MOVWF  29
0B03:  BCF    03.5
0B04:  BCF    0B.7
0B05:  BSF    03.5
0B06:  BSF    03.6
0B07:  BSF    0C.7
0B08:  BSF    0C.0
0B09:  NOP
0B0A:  NOP
0B0B:  BCF    03.6
0B0C:  BTFSS  29.7
0B0D:  GOTO   311
0B0E:  BCF    03.5
0B0F:  BSF    0B.7
0B10:  BSF    03.5
0B11:  BCF    03.5
0B12:  BSF    03.6
0B13:  RLF    0C,W
0B14:  RLF    0E,W
0B15:  ANDLW  7F
0B16:  BTFSC  03.2
0B17:  GOTO   33C
0B18:  BSF    03.5
0B19:  BCF    03.6
0B1A:  MOVWF  26
0B1B:  BCF    03.5
0B1C:  BSF    03.6
0B1D:  MOVF   0D,W
0B1E:  BSF    03.5
0B1F:  BCF    03.6
0B20:  MOVWF  27
0B21:  BCF    03.5
0B22:  BSF    03.6
0B23:  MOVF   0F,W
0B24:  BSF    03.5
0B25:  BCF    03.6
0B26:  MOVWF  28
0B27:  MOVF   26,W
0B28:  MOVWF  2A
0B29:  BCF    0A.3
0B2A:  BCF    03.5
0B2B:  CALL   18B
0B2C:  BSF    0A.3
0B2D:  BSF    03.5
0B2E:  MOVF   27,W
0B2F:  BCF    03.5
0B30:  BSF    03.6
0B31:  MOVWF  0D
0B32:  BSF    03.5
0B33:  BCF    03.6
0B34:  MOVF   28,W
0B35:  BCF    03.5
0B36:  BSF    03.6
0B37:  MOVWF  0F
0B38:  INCF   0D,F
0B39:  BTFSC  03.2
0B3A:  INCF   0F,F
0B3B:  GOTO   2C7
0B3C:  BCF    03.6
0B3D:  CLRF   2B
0B3E:  BTFSC  0B.7
0B3F:  BSF    2B.7
0B40:  BCF    0B.7
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... //#include <stdio.h> 
.................... #fuses XT,NOWDT,NOLVP,PUT,BROWNOUT 
.................... #use delay (clock=4M) 
*
0176:  MOVLW  AB
0177:  MOVWF  04
0178:  BCF    03.7
0179:  MOVF   00,W
017A:  BTFSC  03.2
017B:  GOTO   18A
017C:  MOVLW  01
017D:  MOVWF  78
017E:  CLRF   77
017F:  DECFSZ 77,F
0180:  GOTO   17F
0181:  DECFSZ 78,F
0182:  GOTO   17E
0183:  MOVLW  4A
0184:  MOVWF  77
0185:  DECFSZ 77,F
0186:  GOTO   185
0187:  GOTO   188
0188:  DECFSZ 00,F
0189:  GOTO   17C
018A:  RETURN
.................... #use rs232 (baud=9600, parity=N, xmit=pin_c6, rcv=pin_c7, bits=8) 
....................  
.................... // LCD 
.................... #define lcd_rs_pin pin_C0 
.................... #define lcd_rw_pin pin_C1 
.................... #define lcd_enable_pin pin_C2 
.................... #define lcd_data4 pin_A0 
.................... #define lcd_data5 pin_A1 
.................... #define lcd_data6 pin_A2 
.................... #define lcd_data7 pin_A3 
....................  
.................... // columnas  
.................... # define col1 pin_B0 
.................... # define col2 pin_b1 
.................... # define col3 pin_b2 
.................... # define col4 pin_b3 
.................... # define col5 pin_b4 
.................... # define col6 pin_b5 
.................... # define col7 pin_b6 
.................... # define col8 pin_b7 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
....................  
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
009E:  BSF    05.0
....................    output_float(LCD_DATA5); 
009F:  BSF    05.1
....................    output_float(LCD_DATA6); 
00A0:  BSF    05.2
....................    output_float(LCD_DATA7); 
00A1:  BSF    05.3
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A2:  BCF    03.5
00A3:  BSF    07.1
00A4:  BCF    2C.1
00A5:  MOVF   2C,W
00A6:  BSF    03.5
00A7:  MOVWF  07
....................    delay_cycles(1); 
00A8:  NOP
....................    lcd_output_enable(1); 
00A9:  BCF    03.5
00AA:  BSF    07.2
00AB:  BCF    2C.2
00AC:  MOVF   2C,W
00AD:  BSF    03.5
00AE:  MOVWF  07
....................    delay_cycles(1); 
00AF:  NOP
....................    high = lcd_read_nibble(); 
*
00E0:  MOVF   78,W
00E1:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
00E2:  BCF    03.5
00E3:  BCF    07.2
00E4:  BCF    2C.2
00E5:  MOVF   2C,W
00E6:  BSF    03.5
00E7:  MOVWF  07
....................    delay_cycles(1); 
00E8:  NOP
....................    lcd_output_enable(1); 
00E9:  BCF    03.5
00EA:  BSF    07.2
00EB:  BCF    2C.2
00EC:  MOVF   2C,W
00ED:  BSF    03.5
00EE:  MOVWF  07
....................    delay_us(1); 
00EF:  NOP
....................    low = lcd_read_nibble(); 
*
0120:  MOVF   78,W
0121:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
0122:  BCF    03.5
0123:  BCF    07.2
0124:  BCF    2C.2
0125:  MOVF   2C,W
0126:  BSF    03.5
0127:  MOVWF  07
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0128:  BCF    05.0
....................    output_drive(LCD_DATA5); 
0129:  BCF    05.1
....................    output_drive(LCD_DATA6); 
012A:  BCF    05.2
....................    output_drive(LCD_DATA7); 
012B:  BCF    05.3
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
012C:  SWAPF  32,W
012D:  MOVWF  77
012E:  MOVLW  F0
012F:  ANDWF  77,F
0130:  MOVF   77,W
0131:  IORWF  31,W
0132:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00B0:  CLRF   33
*
00F0:  CLRF   33
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
*
00B1:  BSF    05.0
00B2:  MOVLW  00
00B3:  BCF    03.5
00B4:  BTFSC  05.0
00B5:  MOVLW  01
00B6:  BSF    03.5
00B7:  IORWF  33,F
*
00F1:  BSF    05.0
00F2:  MOVLW  00
00F3:  BCF    03.5
00F4:  BTFSC  05.0
00F5:  MOVLW  01
00F6:  BSF    03.5
00F7:  IORWF  33,F
....................    n |= input(LCD_DATA5) << 1; 
*
00B8:  BSF    05.1
00B9:  MOVLW  00
00BA:  BCF    03.5
00BB:  BTFSC  05.1
00BC:  MOVLW  01
00BD:  MOVWF  77
00BE:  BCF    03.0
00BF:  RLF    77,F
00C0:  MOVF   77,W
00C1:  BSF    03.5
00C2:  IORWF  33,F
*
00F8:  BSF    05.1
00F9:  MOVLW  00
00FA:  BCF    03.5
00FB:  BTFSC  05.1
00FC:  MOVLW  01
00FD:  MOVWF  77
00FE:  BCF    03.0
00FF:  RLF    77,F
0100:  MOVF   77,W
0101:  BSF    03.5
0102:  IORWF  33,F
....................    n |= input(LCD_DATA6) << 2; 
*
00C3:  BSF    05.2
00C4:  MOVLW  00
00C5:  BCF    03.5
00C6:  BTFSC  05.2
00C7:  MOVLW  01
00C8:  MOVWF  77
00C9:  RLF    77,F
00CA:  RLF    77,F
00CB:  MOVLW  FC
00CC:  ANDWF  77,F
00CD:  MOVF   77,W
00CE:  BSF    03.5
00CF:  IORWF  33,F
*
0103:  BSF    05.2
0104:  MOVLW  00
0105:  BCF    03.5
0106:  BTFSC  05.2
0107:  MOVLW  01
0108:  MOVWF  77
0109:  RLF    77,F
010A:  RLF    77,F
010B:  MOVLW  FC
010C:  ANDWF  77,F
010D:  MOVF   77,W
010E:  BSF    03.5
010F:  IORWF  33,F
....................    n |= input(LCD_DATA7) << 3; 
*
00D0:  BSF    05.3
00D1:  MOVLW  00
00D2:  BCF    03.5
00D3:  BTFSC  05.3
00D4:  MOVLW  01
00D5:  MOVWF  77
00D6:  RLF    77,F
00D7:  RLF    77,F
00D8:  RLF    77,F
00D9:  MOVLW  F8
00DA:  ANDWF  77,F
00DB:  MOVF   77,W
00DC:  BSF    03.5
00DD:  IORWF  33,F
*
0110:  BSF    05.3
0111:  MOVLW  00
0112:  BCF    03.5
0113:  BTFSC  05.3
0114:  MOVLW  01
0115:  MOVWF  77
0116:  RLF    77,F
0117:  RLF    77,F
0118:  RLF    77,F
0119:  MOVLW  F8
011A:  ANDWF  77,F
011B:  MOVF   77,W
011C:  BSF    03.5
011D:  IORWF  33,F
....................     
....................    return(n); 
*
00DE:  MOVF   33,W
00DF:  MOVWF  78
*
011E:  MOVF   33,W
011F:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0051:  BSF    03.5
0052:  BTFSC  32.0
0053:  GOTO   058
0054:  BCF    03.5
0055:  BCF    05.0
0056:  GOTO   05A
0057:  BSF    03.5
0058:  BCF    03.5
0059:  BSF    05.0
005A:  BSF    03.5
005B:  BCF    05.0
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
005C:  BTFSC  32.1
005D:  GOTO   062
005E:  BCF    03.5
005F:  BCF    05.1
0060:  GOTO   064
0061:  BSF    03.5
0062:  BCF    03.5
0063:  BSF    05.1
0064:  BSF    03.5
0065:  BCF    05.1
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0066:  BTFSC  32.2
0067:  GOTO   06C
0068:  BCF    03.5
0069:  BCF    05.2
006A:  GOTO   06E
006B:  BSF    03.5
006C:  BCF    03.5
006D:  BSF    05.2
006E:  BSF    03.5
006F:  BCF    05.2
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0070:  BTFSC  32.3
0071:  GOTO   076
0072:  BCF    03.5
0073:  BCF    05.3
0074:  GOTO   078
0075:  BSF    03.5
0076:  BCF    03.5
0077:  BSF    05.3
0078:  BSF    03.5
0079:  BCF    05.3
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
007A:  NOP
....................    lcd_output_enable(1); 
007B:  BCF    03.5
007C:  BSF    07.2
007D:  BCF    2C.2
007E:  MOVF   2C,W
007F:  BSF    03.5
0080:  MOVWF  07
....................    delay_us(2); 
0081:  GOTO   082
....................    lcd_output_enable(0); 
0082:  BCF    03.5
0083:  BCF    07.2
0084:  BCF    2C.2
0085:  MOVF   2C,W
0086:  BSF    03.5
0087:  MOVWF  07
0088:  BCF    03.5
0089:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
008A:  BCF    2C.2
008B:  MOVF   2C,W
008C:  BSF    03.5
008D:  MOVWF  07
....................    lcd_rs_tris(); 
008E:  BCF    03.5
008F:  BCF    2C.0
0090:  MOVF   2C,W
0091:  BSF    03.5
0092:  MOVWF  07
....................    lcd_rw_tris(); 
0093:  BCF    03.5
0094:  BCF    2C.1
0095:  MOVF   2C,W
0096:  BSF    03.5
0097:  MOVWF  07
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0098:  BCF    03.5
0099:  BCF    07.0
009A:  BCF    2C.0
009B:  MOVF   2C,W
009C:  BSF    03.5
009D:  MOVWF  07
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0133:  MOVF   78,W
0134:  MOVWF  31
0135:  BTFSC  31.7
0136:  GOTO   09E
....................    lcd_output_rs(address); 
0137:  MOVF   2F,F
0138:  BTFSS  03.2
0139:  GOTO   13E
013A:  BCF    03.5
013B:  BCF    07.0
013C:  GOTO   140
013D:  BSF    03.5
013E:  BCF    03.5
013F:  BSF    07.0
0140:  BCF    2C.0
0141:  MOVF   2C,W
0142:  BSF    03.5
0143:  MOVWF  07
....................    delay_cycles(1); 
0144:  NOP
....................    lcd_output_rw(0); 
0145:  BCF    03.5
0146:  BCF    07.1
0147:  BCF    2C.1
0148:  MOVF   2C,W
0149:  BSF    03.5
014A:  MOVWF  07
....................    delay_cycles(1); 
014B:  NOP
....................    lcd_output_enable(0); 
014C:  BCF    03.5
014D:  BCF    07.2
014E:  BCF    2C.2
014F:  MOVF   2C,W
0150:  BSF    03.5
0151:  MOVWF  07
....................    lcd_send_nibble(n >> 4); 
0152:  SWAPF  30,W
0153:  MOVWF  31
0154:  MOVLW  0F
0155:  ANDWF  31,F
0156:  MOVF   31,W
0157:  MOVWF  32
0158:  BCF    03.5
0159:  CALL   051
....................    lcd_send_nibble(n & 0xf); 
015A:  BSF    03.5
015B:  MOVF   30,W
015C:  ANDLW  0F
015D:  MOVWF  31
015E:  MOVWF  32
015F:  BCF    03.5
0160:  CALL   051
0161:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
0654:  MOVLW  28
0655:  MOVWF  6B
0656:  MOVLW  0C
0657:  MOVWF  6C
0658:  MOVLW  01
0659:  MOVWF  6D
065A:  MOVLW  06
065B:  MOVWF  6E
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
065C:  BCF    07.2
065D:  BCF    2C.2
065E:  MOVF   2C,W
065F:  BSF    03.5
0660:  MOVWF  07
....................    lcd_output_rs(0); 
0661:  BCF    03.5
0662:  BCF    07.0
0663:  BCF    2C.0
0664:  MOVF   2C,W
0665:  BSF    03.5
0666:  MOVWF  07
....................    lcd_output_rw(0); 
0667:  BCF    03.5
0668:  BCF    07.1
0669:  BCF    2C.1
066A:  MOVF   2C,W
066B:  BSF    03.5
066C:  MOVWF  07
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
066D:  BCF    05.0
....................    output_drive(LCD_DATA5); 
066E:  BCF    05.1
....................    output_drive(LCD_DATA6); 
066F:  BCF    05.2
....................    output_drive(LCD_DATA7); 
0670:  BCF    05.3
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0671:  BCF    03.5
0672:  BCF    2C.2
0673:  MOVF   2C,W
0674:  BSF    03.5
0675:  MOVWF  07
....................    lcd_rs_tris(); 
0676:  BCF    03.5
0677:  BCF    2C.0
0678:  MOVF   2C,W
0679:  BSF    03.5
067A:  MOVWF  07
....................    lcd_rw_tris(); 
067B:  BCF    03.5
067C:  BCF    2C.1
067D:  MOVF   2C,W
067E:  BSF    03.5
067F:  MOVWF  07
0680:  BCF    03.5
0681:  CLRF   2B
0682:  BTFSC  0B.7
0683:  BSF    2B.7
0684:  BCF    0B.7
....................  #endif 
....................      
....................    delay_ms(15); 
0685:  MOVLW  0F
0686:  BSF    03.5
0687:  MOVWF  2B
0688:  BCF    03.5
0689:  CALL   176
068A:  BTFSC  2B.7
068B:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
068C:  MOVLW  01
068D:  MOVWF  6A
068E:  MOVF   6A,W
068F:  SUBLW  03
0690:  BTFSS  03.0
0691:  GOTO   6AA
0692:  CLRF   2B
0693:  BTFSC  0B.7
0694:  BSF    2B.7
0695:  BCF    0B.7
....................    { 
....................        lcd_send_nibble(3); 
0696:  MOVLW  03
0697:  BSF    03.5
0698:  MOVWF  32
0699:  BCF    03.5
069A:  CALL   051
069B:  BTFSC  2B.7
069C:  BSF    0B.7
069D:  CLRF   2B
069E:  BTFSC  0B.7
069F:  BSF    2B.7
06A0:  BCF    0B.7
....................        delay_ms(5); 
06A1:  MOVLW  05
06A2:  BSF    03.5
06A3:  MOVWF  2B
06A4:  BCF    03.5
06A5:  CALL   176
06A6:  BTFSC  2B.7
06A7:  BSF    0B.7
06A8:  INCF   6A,F
06A9:  GOTO   68E
06AA:  CLRF   2B
06AB:  BTFSC  0B.7
06AC:  BSF    2B.7
06AD:  BCF    0B.7
....................    } 
....................     
....................    lcd_send_nibble(2); 
06AE:  MOVLW  02
06AF:  BSF    03.5
06B0:  MOVWF  32
06B1:  BCF    03.5
06B2:  CALL   051
06B3:  BTFSC  2B.7
06B4:  BSF    0B.7
06B5:  CLRF   2B
06B6:  BTFSC  0B.7
06B7:  BSF    2B.7
06B8:  BCF    0B.7
....................    delay_ms(5); 
06B9:  MOVLW  05
06BA:  BSF    03.5
06BB:  MOVWF  2B
06BC:  BCF    03.5
06BD:  CALL   176
06BE:  BTFSC  2B.7
06BF:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
06C0:  CLRF   6A
06C1:  MOVF   6A,W
06C2:  SUBLW  03
06C3:  BTFSS  03.0
06C4:  GOTO   6DB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
06C5:  MOVLW  6B
06C6:  ADDWF  6A,W
06C7:  MOVWF  04
06C8:  BCF    03.7
06C9:  MOVF   00,W
06CA:  MOVWF  6F
06CB:  CLRF   2B
06CC:  BTFSC  0B.7
06CD:  BSF    2B.7
06CE:  BCF    0B.7
06CF:  BSF    03.5
06D0:  CLRF   2F
06D1:  BCF    03.5
06D2:  MOVF   6F,W
06D3:  BSF    03.5
06D4:  MOVWF  30
06D5:  BCF    03.5
06D6:  CALL   08A
06D7:  BTFSC  2B.7
06D8:  BSF    0B.7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
06D9:  INCF   6A,F
06DA:  GOTO   6C1
06DB:  BSF    0A.3
06DC:  BCF    0A.4
06DD:  GOTO   060 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0162:  BSF    03.5
0163:  DECFSZ 2C,W
0164:  GOTO   166
0165:  GOTO   169
....................       address=LCD_LINE_TWO; 
0166:  MOVLW  40
0167:  MOVWF  2D
0168:  GOTO   16A
....................    else 
....................       address=0; 
0169:  CLRF   2D
....................       
....................    address+=x-1; 
016A:  MOVLW  01
016B:  SUBWF  2B,W
016C:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address); 
016D:  MOVF   2D,W
016E:  IORLW  80
016F:  MOVWF  2E
0170:  CLRF   2F
0171:  MOVF   2E,W
0172:  MOVWF  30
0173:  BCF    03.5
0174:  CALL   08A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0175:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
018B:  BSF    03.5
018C:  MOVF   2A,W
018D:  XORLW  07
018E:  BCF    03.5
018F:  BTFSC  03.2
0190:  GOTO   19B
0191:  XORLW  0B
0192:  BTFSC  03.2
0193:  GOTO   1A2
0194:  XORLW  06
0195:  BTFSC  03.2
0196:  GOTO   1AE
0197:  XORLW  02
0198:  BTFSC  03.2
0199:  GOTO   1B6
019A:  GOTO   1BD
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
019B:  MOVLW  01
019C:  BSF    03.5
019D:  MOVWF  2B
019E:  MOVWF  2C
019F:  BCF    03.5
01A0:  CALL   162
01A1:  GOTO   1C4
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01A2:  BSF    03.5
01A3:  CLRF   2F
01A4:  MOVLW  01
01A5:  MOVWF  30
01A6:  BCF    03.5
01A7:  CALL   08A
....................                      delay_ms(2); 
01A8:  MOVLW  02
01A9:  BSF    03.5
01AA:  MOVWF  2B
01AB:  BCF    03.5
01AC:  CALL   176
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01AD:  GOTO   1C4
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01AE:  MOVLW  01
01AF:  BSF    03.5
01B0:  MOVWF  2B
01B1:  MOVLW  02
01B2:  MOVWF  2C
01B3:  BCF    03.5
01B4:  CALL   162
01B5:  GOTO   1C4
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01B6:  BSF    03.5
01B7:  CLRF   2F
01B8:  MOVLW  10
01B9:  MOVWF  30
01BA:  BCF    03.5
01BB:  CALL   08A
01BC:  GOTO   1C4
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01BD:  MOVLW  01
01BE:  BSF    03.5
01BF:  MOVWF  2F
01C0:  MOVF   2A,W
01C1:  MOVWF  30
01C2:  BCF    03.5
01C3:  CALL   08A
....................      #endif 
....................    } 
01C4:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
*
06EE:  RLF    6A,F
06EF:  RLF    6A,F
06F0:  RLF    6A,F
06F1:  MOVLW  F8
06F2:  ANDWF  6A,F
....................    which &= 0x38; 
06F3:  MOVLW  38
06F4:  ANDWF  6A,F
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
06F5:  MOVF   6A,W
06F6:  IORLW  40
06F7:  MOVWF  6E
06F8:  CLRF   2B
06F9:  BTFSC  0B.7
06FA:  BSF    2B.7
06FB:  BCF    0B.7
06FC:  BSF    03.5
06FD:  CLRF   2F
06FE:  BCF    03.5
06FF:  MOVF   6E,W
0700:  BSF    03.5
0701:  MOVWF  30
0702:  BCF    03.5
0703:  CALL   08A
0704:  BTFSC  2B.7
0705:  BSF    0B.7
....................  
....................    for(i=0; i<8; i++) 
0706:  CLRF   6D
0707:  MOVF   6D,W
0708:  SUBLW  07
0709:  BTFSS  03.0
070A:  GOTO   728
....................    { 
....................       lcd_send_byte(1, *ptr++); 
070B:  MOVF   6C,W
070C:  MOVWF  7A
070D:  MOVF   6B,W
070E:  INCF   6B,F
070F:  BTFSC  03.2
0710:  INCF   6C,F
0711:  MOVWF  04
0712:  BCF    03.7
0713:  BTFSC  7A.0
0714:  BSF    03.7
0715:  MOVF   00,W
0716:  MOVWF  6E
0717:  CLRF   2B
0718:  BTFSC  0B.7
0719:  BSF    2B.7
071A:  BCF    0B.7
071B:  MOVLW  01
071C:  BSF    03.5
071D:  MOVWF  2F
071E:  BCF    03.5
071F:  MOVF   6E,W
0720:  BSF    03.5
0721:  MOVWF  30
0722:  BCF    03.5
0723:  CALL   08A
0724:  BTFSC  2B.7
0725:  BSF    0B.7
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
0726:  INCF   6D,F
0727:  GOTO   707
0728:  RETURN
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... void lcd_display_shift_left(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x18);           //turn LCD cursor ON 
....................    } 
.................... } 
....................  
.................... void lcd_display_shift_right(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x1C);           //turn LCD cursor ON 
....................    } 
.................... } 
....................  
.................... void lcd_clear(int1 on) 
.................... { 
....................    if (on) 
*
06DE:  MOVF   6A,F
06DF:  BTFSC  03.2
06E0:  GOTO   6ED
06E1:  CLRF   2B
06E2:  BTFSC  0B.7
06E3:  BSF    2B.7
06E4:  BCF    0B.7
....................    { 
....................       lcd_send_byte(0,0x01);           //turn LCD cursor ON 
06E5:  BSF    03.5
06E6:  CLRF   2F
06E7:  MOVLW  01
06E8:  MOVWF  30
06E9:  BCF    03.5
06EA:  CALL   08A
06EB:  BTFSC  2B.7
06EC:  BSF    0B.7
....................    } 
06ED:  RETURN
.................... } 
....................  
.................... void lcd_home(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x02);           //turn LCD cursor ON 
....................    } 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... //#use standard_io (C) 
....................  
.................... // pacman LCD y MUN  
....................  
.................... char mun [8] ={ 
....................    0b01110, 
....................    0b10101, 
....................    0b10101, 
....................    0b11111, 
....................    0b11111, 
....................    0b10101, 
....................    0b10101, 
....................    0b00000, 
.................... };  
*
081F:  MOVLW  0E
0820:  BCF    03.5
0821:  MOVWF  2D
0822:  MOVLW  15
0823:  MOVWF  2E
0824:  MOVWF  2F
0825:  MOVLW  1F
0826:  MOVWF  30
0827:  MOVWF  31
0828:  MOVLW  15
0829:  MOVWF  32
082A:  MOVWF  33
082B:  CLRF   34
.................... char  pacman1 [8] ={ 
....................    0b01110, 
....................    0b11011, 
....................    0b11111, 
....................    0b11000, 
....................    0b11000, 
....................    0b11111,  
....................    0b01111, 
....................    0b00000, 
.................... }; 
082C:  MOVLW  0E
082D:  MOVWF  35
082E:  MOVLW  1B
082F:  MOVWF  36
0830:  MOVLW  1F
0831:  MOVWF  37
0832:  MOVLW  18
0833:  MOVWF  38
0834:  MOVWF  39
0835:  MOVLW  1F
0836:  MOVWF  3A
0837:  MOVLW  0F
0838:  MOVWF  3B
0839:  CLRF   3C
.................... char pacman [8]={ 
....................    0b01110, 
....................    0b11011, 
....................    0b11111, 
....................    0b11111, 
....................    0b11111, 
....................    0b11111, 
....................    0b01111, 
....................    0b00000, 
.................... }; 
083A:  MOVLW  0E
083B:  MOVWF  3D
083C:  MOVLW  1B
083D:  MOVWF  3E
083E:  MOVLW  1F
083F:  MOVWF  3F
0840:  MOVWF  40
0841:  MOVWF  41
0842:  MOVWF  42
0843:  MOVLW  0F
0844:  MOVWF  43
0845:  CLRF   44
....................  
....................  
.................... char dato , dato2 , Fila1 = 0x00 , Fila2 = 0x00 , Fila3 = 0x00 , Fila4 = 0x00 ; 
.................... char Fila5 = 0x00 , Fila6 = 0x00 , Fila7 = 0x00 , Fila8 = 0x00 ; 
.................... int barrido[]={0b00000001,0b00000010,0b00000100,0b00001000,0b00010000,0b00100000,0b01000000,0b10000000}; 
0846:  MOVLW  01
0847:  MOVWF  4F
0848:  MOVLW  02
0849:  MOVWF  50
084A:  MOVLW  04
084B:  MOVWF  51
084C:  MOVLW  08
084D:  MOVWF  52
084E:  MOVLW  10
084F:  MOVWF  53
0850:  MOVLW  20
0851:  MOVWF  54
0852:  MOVLW  40
0853:  MOVWF  55
0854:  MOVLW  80
0855:  MOVWF  56
....................  
.................... int vector0[8]; 
.................... int mov[]; 
.................... int modo = 0 , contador = 0 , e , l;  
....................  
....................  
.................... #int_rda 
.................... void serial_isr(){ 
....................  
.................... dato=getc(); 
*
01C5:  BTFSS  0C.5
01C6:  GOTO   1C5
01C7:  MOVF   1A,W
01C8:  MOVWF  45
....................  
.................... if (dato == 0xA8) { 
01C9:  MOVF   45,W
01CA:  SUBLW  A8
01CB:  BTFSS  03.2
01CC:  GOTO   2EA
....................   output_E(0b00000001); 
01CD:  BSF    03.5
01CE:  BCF    09.0
01CF:  BCF    09.1
01D0:  BCF    09.2
01D1:  MOVLW  01
01D2:  BCF    03.5
01D3:  MOVWF  09
....................   modo = 1 ; 
01D4:  MOVWF  60
....................  for(e = 0 ; e < 1 ; e++){ 
01D5:  CLRF   62
01D6:  MOVF   62,F
01D7:  BTFSS  03.2
01D8:  GOTO   2E8
....................      
....................     Lcd_gotoxy(1,1); 
01D9:  MOVLW  01
01DA:  BSF    03.5
01DB:  MOVWF  2B
01DC:  MOVWF  2C
01DD:  BCF    03.5
01DE:  CALL   162
....................     printf(lcd_putc,"Comunicacion on "); 
01DF:  MOVLW  21
01E0:  BSF    03.6
01E1:  MOVWF  0D
01E2:  MOVLW  06
01E3:  MOVWF  0F
....................     Lcd_gotoxy(3,2); 
*
0255:  MOVLW  03
0256:  BSF    03.5
0257:  BCF    03.6
0258:  MOVWF  2B
0259:  MOVLW  02
025A:  MOVWF  2C
025B:  BCF    03.5
025C:  CALL   162
....................     printf(lcd_putc," Dibujando %c ",17); 
025D:  MOVLW  2A
025E:  BSF    03.6
025F:  MOVWF  0D
0260:  MOVLW  06
0261:  MOVWF  0F
0262:  BCF    03.0
0263:  MOVLW  0B
0264:  BSF    03.5
0265:  BCF    03.6
0266:  MOVWF  26
*
02DD:  MOVLW  11
02DE:  MOVWF  2A
02DF:  BCF    03.5
02E0:  CALL   18B
02E1:  MOVLW  20
02E2:  BSF    03.5
02E3:  MOVWF  2A
02E4:  BCF    03.5
02E5:  CALL   18B
02E6:  INCF   62,F
02E7:  GOTO   1D6
....................   } 
....................    l = 0 ;  
02E8:  CLRF   63
.................... } 
02E9:  GOTO   3F8
.................... else if (dato == 0xA9) { 
02EA:  MOVF   45,W
02EB:  SUBLW  A9
02EC:  BTFSS  03.2
02ED:  GOTO   3F8
....................   output_E(0b00000010); 
02EE:  BSF    03.5
02EF:  BCF    09.0
02F0:  BCF    09.1
02F1:  BCF    09.2
02F2:  MOVLW  02
02F3:  BCF    03.5
02F4:  MOVWF  09
....................   modo = 0 ;      
02F5:  CLRF   60
....................  for(l = 0 ; l < 1 ; l++){  
02F6:  CLRF   63
02F7:  MOVF   63,F
02F8:  BTFSS  03.2
02F9:  GOTO   3F7
....................     Lcd_gotoxy(1,1); 
02FA:  MOVLW  01
02FB:  BSF    03.5
02FC:  MOVWF  2B
02FD:  MOVWF  2C
02FE:  BCF    03.5
02FF:  CALL   162
....................     printf(lcd_putc,"Comunicacion off "); 
0300:  MOVLW  32
0301:  BSF    03.6
0302:  MOVWF  0D
0303:  MOVLW  06
0304:  MOVWF  0F
....................     Lcd_gotoxy(4,2); 
*
0376:  MOVLW  04
0377:  BSF    03.5
0378:  BCF    03.6
0379:  MOVWF  2B
037A:  MOVLW  02
037B:  MOVWF  2C
037C:  BCF    03.5
037D:  CALL   162
....................     printf(lcd_putc," Escaneando "); 
037E:  MOVLW  3B
037F:  BSF    03.6
0380:  MOVWF  0D
0381:  MOVLW  06
0382:  MOVWF  0F
*
03F4:  BCF    03.6
03F5:  INCF   63,F
03F6:  GOTO   2F7
....................  } 
....................  e = 0 ;  
03F7:  CLRF   62
.................... } 
.................... if(modo == 1) { 
03F8:  DECFSZ 60,W
03F9:  GOTO   58C
....................  switch(dato){ 
03FA:  MOVLW  21
03FB:  SUBWF  45,W
03FC:  ADDLW  A2
03FD:  BTFSC  03.0
03FE:  GOTO   50E
03FF:  ADDLW  5E
0400:  GOTO   590
....................       case 0x31 :  
....................         output_E(0b00000001); 
0401:  BSF    03.5
0402:  BCF    09.0
0403:  BCF    09.1
0404:  BCF    09.2
0405:  MOVLW  01
0406:  BCF    03.5
0407:  MOVWF  09
....................         Fila1 = Fila1 + 0x01;  
0408:  ADDWF  47,F
....................          break; 
0409:  GOTO   50E
....................       case 0x32 :  
....................         Fila1 = Fila1 - 0x01; 
040A:  MOVLW  01
040B:  SUBWF  47,F
....................          break; 
040C:  GOTO   50E
....................       case 0x33 :  
....................         Fila1 = Fila1 + 0x02; 
040D:  MOVLW  02
040E:  ADDWF  47,F
....................          break; 
040F:  GOTO   50E
....................       case 0x34 :  
....................         Fila1 = Fila1 - 0x02; 
0410:  MOVLW  02
0411:  SUBWF  47,F
....................          break; 
0412:  GOTO   50E
....................       case 0x35 : 
....................         Fila1 = Fila1 + 0x04; 
0413:  MOVLW  04
0414:  ADDWF  47,F
....................          break; 
0415:  GOTO   50E
....................       case 0x36 : 
....................         Fila1 = Fila1 - 0x04; 
0416:  MOVLW  04
0417:  SUBWF  47,F
....................          break; 
0418:  GOTO   50E
....................       case 0x37 : 
....................         Fila1 = Fila1 + 0x08; 
0419:  MOVLW  08
041A:  ADDWF  47,F
....................          break; 
041B:  GOTO   50E
....................       case '8': 
....................         Fila1 = Fila1 - 0x08; 
041C:  MOVLW  08
041D:  SUBWF  47,F
....................          break; 
041E:  GOTO   50E
....................       case '9': 
....................         Fila1 = Fila1 + 0x10; 
041F:  MOVLW  10
0420:  ADDWF  47,F
....................          break; 
0421:  GOTO   50E
....................       case 'a': 
....................         Fila1 = Fila1 - 0x10; 
0422:  MOVLW  10
0423:  SUBWF  47,F
....................          break; 
0424:  GOTO   50E
....................       case 'b': 
....................         Fila1 = Fila1 + 0x20; 
0425:  MOVLW  20
0426:  ADDWF  47,F
....................          break; 
0427:  GOTO   50E
....................       case 'c': 
....................         Fila1 = Fila1 - 0x20; 
0428:  MOVLW  20
0429:  SUBWF  47,F
....................          break; 
042A:  GOTO   50E
....................       case 'd': 
....................         Fila1 = Fila1 + 0x40; 
042B:  MOVLW  40
042C:  ADDWF  47,F
....................          break; 
042D:  GOTO   50E
....................       case 'e': 
....................         Fila1 = Fila1 - 0x40; 
042E:  MOVLW  40
042F:  SUBWF  47,F
....................          break; 
0430:  GOTO   50E
....................       case 'f': 
....................         Fila1 = Fila1 + 0x80; 
0431:  MOVLW  80
0432:  ADDWF  47,F
....................          break; 
0433:  GOTO   50E
....................       case 'g': 
....................         Fila1 = Fila1 - 0x80; 
0434:  MOVLW  80
0435:  SUBWF  47,F
....................          break; 
0436:  GOTO   50E
....................       case 'h':  
....................         Fila2 = Fila2 + 0x01;  
0437:  MOVLW  01
0438:  ADDWF  48,F
....................          break; 
0439:  GOTO   50E
....................       case 'i':  
....................         Fila2 = Fila2 - 0x01;  
043A:  MOVLW  01
043B:  SUBWF  48,F
....................          break; 
043C:  GOTO   50E
....................       case 'j':  
....................         Fila2 = Fila2 + 0x02;  
043D:  MOVLW  02
043E:  ADDWF  48,F
....................          break; 
043F:  GOTO   50E
....................       case 'k': 
....................         Fila2 = Fila2 - 0x02;  
0440:  MOVLW  02
0441:  SUBWF  48,F
....................          break; 
0442:  GOTO   50E
....................       case 'l':  
....................         Fila2 = Fila2 + 0x04;  
0443:  MOVLW  04
0444:  ADDWF  48,F
....................          break; 
0445:  GOTO   50E
....................       case 'm': 
....................          Fila2 = Fila2 - 0x04;  
0446:  MOVLW  04
0447:  SUBWF  48,F
....................          break; 
0448:  GOTO   50E
....................       case 'n':  
....................          Fila2 = Fila2 + 0x08;  
0449:  MOVLW  08
044A:  ADDWF  48,F
....................          break; 
044B:  GOTO   50E
....................       case 'o':  
....................          Fila2 = Fila2 - 0x08; 
044C:  MOVLW  08
044D:  SUBWF  48,F
....................          break; 
044E:  GOTO   50E
....................       case 'p': 
....................          Fila2 = Fila2 + 0x10; 
044F:  MOVLW  10
0450:  ADDWF  48,F
....................          break; 
0451:  GOTO   50E
....................       case 'q':  
....................          Fila2 = Fila2 - 0x10; 
0452:  MOVLW  10
0453:  SUBWF  48,F
....................          break; 
0454:  GOTO   50E
....................        case 'r':  
....................          Fila2 = Fila2 + 0x20; 
0455:  MOVLW  20
0456:  ADDWF  48,F
....................          break; 
0457:  GOTO   50E
....................       case 's':  
....................          Fila2 = Fila2 - 0x20; 
0458:  MOVLW  20
0459:  SUBWF  48,F
....................          break; 
045A:  GOTO   50E
....................        case 't':  
....................          Fila2 = Fila2 + 0x40; 
045B:  MOVLW  40
045C:  ADDWF  48,F
....................          break; 
045D:  GOTO   50E
....................        case 'u':  
....................          Fila2 = Fila2 - 0x40; 
045E:  MOVLW  40
045F:  SUBWF  48,F
....................          break; 
0460:  GOTO   50E
....................       case 'v':  
....................          Fila2 = Fila2 + 0x80; 
0461:  MOVLW  80
0462:  ADDWF  48,F
....................          break; 
0463:  GOTO   50E
....................       case 'w':  
....................          Fila2 = Fila2 - 0x80;   
0464:  MOVLW  80
0465:  SUBWF  48,F
....................          break; 
0466:  GOTO   50E
....................        case 'x': 
....................          Fila3 = Fila3 + 0x01;   
0467:  MOVLW  01
0468:  ADDWF  49,F
....................          break; 
0469:  GOTO   50E
....................       case 'y':  
....................          Fila3 = Fila3 - 0x01;   
046A:  MOVLW  01
046B:  SUBWF  49,F
....................          break;  
046C:  GOTO   50E
....................        case 'z':  
....................          Fila3 = Fila3 + 0x02;   
046D:  MOVLW  02
046E:  ADDWF  49,F
....................          break; 
046F:  GOTO   50E
....................       case 'A':  
....................          Fila3 = Fila3 - 0x02;   
0470:  MOVLW  02
0471:  SUBWF  49,F
....................          break;   
0472:  GOTO   50E
....................        case 'B':  
....................          Fila3 = Fila3 + 0x04;   
0473:  MOVLW  04
0474:  ADDWF  49,F
....................          break; 
0475:  GOTO   50E
....................       case 'C':  
....................          Fila3 = Fila3 - 0x04;   
0476:  MOVLW  04
0477:  SUBWF  49,F
....................          break;     
0478:  GOTO   50E
....................        case 'D':  
....................          Fila3 = Fila3 + 0x08;   
0479:  MOVLW  08
047A:  ADDWF  49,F
....................          break; 
047B:  GOTO   50E
....................       case 'E':  
....................          Fila3 = Fila3 - 0x08;     
047C:  MOVLW  08
047D:  SUBWF  49,F
....................          break; 
047E:  GOTO   50E
....................        case 'F':  
....................          Fila3 = Fila3 + 0x10; 
047F:  MOVLW  10
0480:  ADDWF  49,F
....................          break; 
0481:  GOTO   50E
....................       case 'G':  
....................          Fila3 = Fila3 - 0x10; 
0482:  MOVLW  10
0483:  SUBWF  49,F
....................          break;   
0484:  GOTO   50E
....................        case 'H':  
....................          Fila3 = Fila3 + 0x20; 
0485:  MOVLW  20
0486:  ADDWF  49,F
....................          break; 
0487:  GOTO   50E
....................       case 'I':  
....................          Fila3 = Fila3 - 0x20; 
0488:  MOVLW  20
0489:  SUBWF  49,F
....................          break;    
048A:  GOTO   50E
....................        case 'J':  
....................          Fila3 = Fila3 + 0x40; 
048B:  MOVLW  40
048C:  ADDWF  49,F
....................          break; 
048D:  GOTO   50E
....................       case 'K':  
....................          Fila3 = Fila3 - 0x40; 
048E:  MOVLW  40
048F:  SUBWF  49,F
....................          break; 
0490:  GOTO   50E
....................        case 'L':  
....................          Fila3 = Fila3 + 0x80; 
0491:  MOVLW  80
0492:  ADDWF  49,F
....................          break; 
0493:  GOTO   50E
....................       case 'M':  
....................          Fila3 = Fila3 - 0x80; 
0494:  MOVLW  80
0495:  SUBWF  49,F
....................          break;   
0496:  GOTO   50E
....................        case 'N':  
....................          Fila4 = Fila4 + 0x01; 
0497:  MOVLW  01
0498:  ADDWF  4A,F
....................          break; 
0499:  GOTO   50E
....................       case 'O':  
....................          Fila4 = Fila4 - 0x01; 
049A:  MOVLW  01
049B:  SUBWF  4A,F
....................          break; 
049C:  GOTO   50E
....................        case 'P':  
....................          Fila4 = Fila4 + 0x02; 
049D:  MOVLW  02
049E:  ADDWF  4A,F
....................          break; 
049F:  GOTO   50E
....................       case 'Q':  
....................          Fila4 = Fila4 - 0x02; 
04A0:  MOVLW  02
04A1:  SUBWF  4A,F
....................          break; 
04A2:  GOTO   50E
....................       case 'R':  
....................          Fila4 = Fila4 + 0x04; 
04A3:  MOVLW  04
04A4:  ADDWF  4A,F
....................          break; 
04A5:  GOTO   50E
....................       case 'S':  
....................          Fila4 = Fila4 - 0x04; 
04A6:  MOVLW  04
04A7:  SUBWF  4A,F
....................          break; 
04A8:  GOTO   50E
....................       case 'T':  
....................          Fila4 = Fila4 + 0x08; 
04A9:  MOVLW  08
04AA:  ADDWF  4A,F
....................          break; 
04AB:  GOTO   50E
....................       case 'U':  
....................          Fila4 = Fila4 - 0x08; 
04AC:  MOVLW  08
04AD:  SUBWF  4A,F
....................          break; 
04AE:  GOTO   50E
....................       case 'V':  
....................          Fila4 = Fila4 + 0x10; 
04AF:  MOVLW  10
04B0:  ADDWF  4A,F
....................          break; 
04B1:  GOTO   50E
....................       case 'W':  
....................          Fila4 = Fila4 - 0x10; 
04B2:  MOVLW  10
04B3:  SUBWF  4A,F
....................          break; 
04B4:  GOTO   50E
....................        case 'X':  
....................          Fila4 = Fila4 + 0x20; 
04B5:  MOVLW  20
04B6:  ADDWF  4A,F
....................          break; 
04B7:  GOTO   50E
....................       case 'Y':  
....................          Fila4 = Fila4 - 0x20; 
04B8:  MOVLW  20
04B9:  SUBWF  4A,F
....................          break; 
04BA:  GOTO   50E
....................       case 'Z':  
....................          Fila4 = Fila4 + 0x40; 
04BB:  MOVLW  40
04BC:  ADDWF  4A,F
....................          break; 
04BD:  GOTO   50E
....................       case '?':  
....................          Fila4 = Fila4 - 0x40; 
04BE:  MOVLW  40
04BF:  SUBWF  4A,F
....................          break;  
04C0:  GOTO   50E
....................       case ']':  
....................          Fila4 = Fila4 + 0x80; 
04C1:  MOVLW  80
04C2:  ADDWF  4A,F
....................          break; 
04C3:  GOTO   50E
....................       case '[':  
....................          Fila4 = Fila4 - 0x80; 
04C4:  MOVLW  80
04C5:  SUBWF  4A,F
....................          break; 
04C6:  GOTO   50E
....................       case '!':  
....................          Fila5 = Fila5 + 0x01; 
04C7:  MOVLW  01
04C8:  ADDWF  4B,F
....................          break; 
04C9:  GOTO   50E
....................       case '%':  
....................          Fila5 = Fila5 - 0x01; 
04CA:  MOVLW  01
04CB:  SUBWF  4B,F
....................          break; 
04CC:  GOTO   50E
....................       case '<':  
....................          Fila5 = Fila5 + 0x02; 
04CD:  MOVLW  02
04CE:  ADDWF  4B,F
....................          break; 
04CF:  GOTO   50E
....................       case '>':  
....................          Fila5 = Fila5 - 0x02; 
04D0:  MOVLW  02
04D1:  SUBWF  4B,F
....................          break;  
04D2:  GOTO   50E
....................        case '}':  
....................          Fila5 = Fila5 + 0x04; 
04D3:  MOVLW  04
04D4:  ADDWF  4B,F
....................          break; 
04D5:  GOTO   50E
....................       case '{':  
....................          Fila5 = Fila5 - 0x04; 
04D6:  MOVLW  04
04D7:  SUBWF  4B,F
....................          break; 
04D8:  GOTO   50E
....................       case ')':  
....................          Fila5 = Fila5 + 0x08; 
04D9:  MOVLW  08
04DA:  ADDWF  4B,F
....................          break; 
04DB:  GOTO   50E
....................       case '(':  
....................          Fila5 = Fila5 - 0x08; 
04DC:  MOVLW  08
04DD:  SUBWF  4B,F
....................          break; 
04DE:  GOTO   50E
....................      case '/':  
....................          Fila5 = Fila5 + 0x10;    
04DF:  MOVLW  10
04E0:  ADDWF  4B,F
....................          break; 
04E1:  GOTO   50E
....................      case '$':  
....................          Fila5 = Fila5 - 0x10;    
04E2:  MOVLW  10
04E3:  SUBWF  4B,F
....................          break; 
04E4:  GOTO   50E
....................      case '&':  
....................          Fila5 = Fila5 + 0x20;    
04E5:  MOVLW  20
04E6:  ADDWF  4B,F
....................          break; 
04E7:  GOTO   50E
....................      case '=':  
....................          Fila5 = Fila5 - 0x20;    
04E8:  MOVLW  20
04E9:  SUBWF  4B,F
....................          break; 
04EA:  GOTO   50E
....................      case '+':  
....................          Fila5 = Fila5 + 0x40; 
04EB:  MOVLW  40
04EC:  ADDWF  4B,F
....................          break; 
04ED:  GOTO   50E
....................      case '-':  
....................          Fila5 = Fila5 - 0x40; 
04EE:  MOVLW  40
04EF:  SUBWF  4B,F
....................          break; 
04F0:  GOTO   50E
....................      case '*':  
....................          Fila5 = Fila5 + 0x80; 
04F1:  MOVLW  80
04F2:  ADDWF  4B,F
....................          break; 
04F3:  GOTO   50E
....................      case '^':  
....................          Fila5 = Fila5 - 0x80; 
04F4:  MOVLW  80
04F5:  SUBWF  4B,F
....................          break; 
04F6:  GOTO   50E
....................      case '|':  
....................          Fila6 = Fila6 + 0x01; 
04F7:  MOVLW  01
04F8:  ADDWF  4C,F
....................          break; 
04F9:  GOTO   50E
....................      case ',':  
....................         Fila6 = Fila6 - 0x01; 
04FA:  MOVLW  01
04FB:  SUBWF  4C,F
....................         break; 
04FC:  GOTO   50E
....................      case ';':  
....................         Fila6 = Fila6 + 0x02; 
04FD:  MOVLW  02
04FE:  ADDWF  4C,F
....................         break; 
04FF:  GOTO   50E
....................      case ':':  
....................         Fila6 = Fila6 - 0x02;  
0500:  MOVLW  02
0501:  SUBWF  4C,F
....................         break; 
0502:  GOTO   50E
....................      case '.':  
....................         Fila6 = Fila6 + 0x04; 
0503:  MOVLW  04
0504:  ADDWF  4C,F
....................         break; 
0505:  GOTO   50E
....................      case '@':  
....................         Fila6 = Fila6 - 0x04; 
0506:  MOVLW  04
0507:  SUBWF  4C,F
....................         break; 
0508:  GOTO   50E
....................      case '0':  
....................         Fila6 = Fila6 + 0x08; 
0509:  MOVLW  08
050A:  ADDWF  4C,F
....................         break; 
050B:  GOTO   50E
....................      case '~':  
....................         Fila6 = Fila6 - 0x08; 
050C:  MOVLW  08
050D:  SUBWF  4C,F
....................         break; 
....................     } 
....................     switch(dato){ 
050E:  MOVLW  80
050F:  SUBWF  45,W
0510:  ADDLW  D8
0511:  BTFSC  03.0
0512:  GOTO   58C
0513:  ADDLW  28
0514:  GOTO   5F2
....................       case 0x80 :  
....................          Fila6 = Fila6 + 0x10; 
0515:  MOVLW  10
0516:  ADDWF  4C,F
....................          break; 
0517:  GOTO   58C
....................       case 0x81 :  
....................          Fila6 = Fila6 - 0x10; 
0518:  MOVLW  10
0519:  SUBWF  4C,F
....................          break; 
051A:  GOTO   58C
....................       case 0x82 :  
....................          Fila6 = Fila6 + 0x20; 
051B:  MOVLW  20
051C:  ADDWF  4C,F
....................          break; 
051D:  GOTO   58C
....................       case 0x83 :  
....................          Fila6 = Fila6 - 0x20; 
051E:  MOVLW  20
051F:  SUBWF  4C,F
....................          break; 
0520:  GOTO   58C
....................       case 0x84 :  
....................          Fila6 = Fila6 + 0x40; 
0521:  MOVLW  40
0522:  ADDWF  4C,F
....................          break; 
0523:  GOTO   58C
....................       case 0x85 :  
....................          Fila6 = Fila6 - 0x40; 
0524:  MOVLW  40
0525:  SUBWF  4C,F
....................          break; 
0526:  GOTO   58C
....................       case 0x86 :  
....................          Fila6 = Fila6 + 0x80; 
0527:  MOVLW  80
0528:  ADDWF  4C,F
....................          break; 
0529:  GOTO   58C
....................       case 0x87 :  
....................          Fila6 = Fila6 - 0x80; 
052A:  MOVLW  80
052B:  SUBWF  4C,F
....................          break; 
052C:  GOTO   58C
....................       case 0x88 :  
....................          Fila7 = Fila7 + 0x01; 
052D:  MOVLW  01
052E:  ADDWF  4D,F
....................          break; 
052F:  GOTO   58C
....................       case 0x89 :  
....................          Fila7 = Fila7 - 0x01; 
0530:  MOVLW  01
0531:  SUBWF  4D,F
....................          break; 
0532:  GOTO   58C
....................       case 0x8A :  
....................          Fila7 = Fila7 + 0x02; 
0533:  MOVLW  02
0534:  ADDWF  4D,F
....................          break; 
0535:  GOTO   58C
....................       case 0x8B :  
....................          Fila7 = Fila7 - 0x02; 
0536:  MOVLW  02
0537:  SUBWF  4D,F
....................          break; 
0538:  GOTO   58C
....................       case 0x8C :  
....................          Fila7 = Fila7 + 0x04; 
0539:  MOVLW  04
053A:  ADDWF  4D,F
....................          break; 
053B:  GOTO   58C
....................       case 0x8D :  
....................          Fila7 = Fila7 - 0x04; 
053C:  MOVLW  04
053D:  SUBWF  4D,F
....................          break; 
053E:  GOTO   58C
....................       case 0x8E :  
....................          Fila7 = Fila7 + 0x08; 
053F:  MOVLW  08
0540:  ADDWF  4D,F
....................          break; 
0541:  GOTO   58C
....................       case 0x8F :  
....................          Fila7 = Fila7 - 0x08; 
0542:  MOVLW  08
0543:  SUBWF  4D,F
....................          break; 
0544:  GOTO   58C
....................       case 0x90 :  
....................          Fila7 = Fila7 + 0x10; 
0545:  MOVLW  10
0546:  ADDWF  4D,F
....................          break; 
0547:  GOTO   58C
....................       case 0x91 :  
....................          Fila7 = Fila7 - 0x10; 
0548:  MOVLW  10
0549:  SUBWF  4D,F
....................          break; 
054A:  GOTO   58C
....................       case 0x92 :  
....................          Fila7 = Fila7 + 0x20; 
054B:  MOVLW  20
054C:  ADDWF  4D,F
....................          break; 
054D:  GOTO   58C
....................       case 0x93 :  
....................          Fila7 = Fila7 - 0x20; 
054E:  MOVLW  20
054F:  SUBWF  4D,F
....................          break; 
0550:  GOTO   58C
....................       case 0x94 :  
....................          Fila7 = Fila7 + 0x40; 
0551:  MOVLW  40
0552:  ADDWF  4D,F
....................          break; 
0553:  GOTO   58C
....................       case 0x95 :  
....................          Fila7 = Fila7 - 0x40; 
0554:  MOVLW  40
0555:  SUBWF  4D,F
....................          break; 
0556:  GOTO   58C
....................       case 0x96 :  
....................          Fila7 = Fila7 + 0x80; 
0557:  MOVLW  80
0558:  ADDWF  4D,F
....................          break; 
0559:  GOTO   58C
....................       case 0x97 :  
....................          Fila7 = Fila7 - 0x80; 
055A:  MOVLW  80
055B:  SUBWF  4D,F
....................          break;  
055C:  GOTO   58C
....................       case 0x98 :  
....................          Fila7 = Fila7 + 0x01; 
055D:  MOVLW  01
055E:  ADDWF  4D,F
....................          break; 
055F:  GOTO   58C
....................       case 0x99 :  
....................          Fila8 = Fila8 - 0x01; 
0560:  MOVLW  01
0561:  SUBWF  4E,F
....................          break; 
0562:  GOTO   58C
....................       case 0x9A :  
....................          Fila8 = Fila8 + 0x02; 
0563:  MOVLW  02
0564:  ADDWF  4E,F
....................          break; 
0565:  GOTO   58C
....................       case 0x9B :  
....................          Fila8 = Fila8 - 0x02; 
0566:  MOVLW  02
0567:  SUBWF  4E,F
....................          break; 
0568:  GOTO   58C
....................       case 0x9C :  
....................          Fila8 = Fila8 + 0x04; 
0569:  MOVLW  04
056A:  ADDWF  4E,F
....................          break; 
056B:  GOTO   58C
....................       case 0x9D :  
....................          Fila8 = Fila8 - 0x04; 
056C:  MOVLW  04
056D:  SUBWF  4E,F
....................          break; 
056E:  GOTO   58C
....................       case 0x9E :  
....................          Fila8 = Fila8 + 0x08; 
056F:  MOVLW  08
0570:  ADDWF  4E,F
....................          break; 
0571:  GOTO   58C
....................       case 0x9F :  
....................          Fila8 = Fila8 - 0x08; 
0572:  MOVLW  08
0573:  SUBWF  4E,F
....................          break; 
0574:  GOTO   58C
....................       case 0xA0 :  
....................          Fila8 = Fila8 + 0x10; 
0575:  MOVLW  10
0576:  ADDWF  4E,F
....................          break; 
0577:  GOTO   58C
....................       case 0xA1 :  
....................          Fila8 = Fila8 - 0x10; 
0578:  MOVLW  10
0579:  SUBWF  4E,F
....................          break; 
057A:  GOTO   58C
....................       case 0xA2 :  
....................          Fila8 = Fila8 + 0x20; 
057B:  MOVLW  20
057C:  ADDWF  4E,F
....................          break;  
057D:  GOTO   58C
....................       case 0xA3 :  
....................          Fila8 = Fila8 - 0x20; 
057E:  MOVLW  20
057F:  SUBWF  4E,F
....................          break;  
0580:  GOTO   58C
....................       case 0xA4 :  
....................          Fila8 = Fila8 + 0x40; 
0581:  MOVLW  40
0582:  ADDWF  4E,F
....................          break;  
0583:  GOTO   58C
....................       case 0xA5 :  
....................          Fila8 = Fila8 - 0x40; 
0584:  MOVLW  40
0585:  SUBWF  4E,F
....................          break;  
0586:  GOTO   58C
....................       case 0xA6 :  
....................          Fila8 = Fila8 + 0x80; 
0587:  MOVLW  80
0588:  ADDWF  4E,F
....................          break;  
0589:  GOTO   58C
....................       case 0xA7 :  
....................          Fila8 = Fila8 - 0x80; 
058A:  MOVLW  80
058B:  SUBWF  4E,F
....................          break;  
....................     } 
....................   } 
058C:  BCF    0C.5
058D:  BCF    0A.3
058E:  BCF    0A.4
058F:  GOTO   02D
.................... } 
.................... void main(){ 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  19
0804:  BSF    03.5
0805:  MOVWF  19
0806:  MOVLW  A6
0807:  MOVWF  18
0808:  MOVLW  90
0809:  BCF    03.5
080A:  MOVWF  18
080B:  MOVLW  FF
080C:  MOVWF  2C
080D:  CLRF   47
080E:  CLRF   48
080F:  CLRF   49
0810:  CLRF   4A
0811:  CLRF   4B
0812:  CLRF   4C
0813:  CLRF   4D
0814:  CLRF   4E
0815:  CLRF   60
0816:  CLRF   61
0817:  BSF    03.5
0818:  BSF    1F.0
0819:  BSF    1F.1
081A:  BSF    1F.2
081B:  BCF    1F.3
081C:  MOVLW  07
081D:  MOVWF  1C
081E:  BCF    03.7
....................  
....................  
....................    set_tris_b(0x00);// columnas como salida  
*
0856:  MOVLW  00
0857:  BSF    03.5
0858:  MOVWF  06
....................    set_tris_d(0x00);// filas como salidas 
0859:  MOVWF  08
....................  
.................... enable_interrupts(int_rda); 
085A:  BSF    0C.5
.................... enable_interrupts(global); 
085B:  MOVLW  C0
085C:  BCF    03.5
085D:  IORWF  0B,F
....................  
.................... //output_E(0b00000011); 
.................... int  pac , i , posc , move , move2 ; 
.................... //item=0; 
.................... //port_b_pullups(true); 
.................... lcd_init(); 
085E:  BCF    0A.3
085F:  GOTO   654
0860:  BSF    0A.3
.................... //kbd_init(); 
.................... lcd_clear(1); 
0861:  MOVLW  01
0862:  MOVWF  6A
0863:  BCF    0A.3
0864:  CALL   6DE
0865:  BSF    0A.3
....................  
.................... lcd_set_Cgram_char(0 , mun); 
0866:  CLRF   6A
0867:  CLRF   6C
0868:  MOVLW  2D
0869:  MOVWF  6B
086A:  BCF    0A.3
086B:  CALL   6EE
086C:  BSF    0A.3
.................... lcd_set_Cgram_char(1 , pacman1); 
086D:  MOVLW  01
086E:  MOVWF  6A
086F:  CLRF   6C
0870:  MOVLW  35
0871:  MOVWF  6B
0872:  BCF    0A.3
0873:  CALL   6EE
0874:  BSF    0A.3
.................... lcd_set_Cgram_char(2 , pacman); 
0875:  MOVLW  02
0876:  MOVWF  6A
0877:  CLRF   6C
0878:  MOVLW  3D
0879:  MOVWF  6B
087A:  BCF    0A.3
087B:  CALL   6EE
087C:  BSF    0A.3
....................  
.................... for (int intro = 0 ; intro < 1 ; intro++) { 
087D:  CLRF   69
087E:  MOVF   69,F
087F:  BTFSS  03.2
0880:  GOTO   34E
....................  
.................... output_b(0b00000000); 
0881:  BSF    03.5
0882:  CLRF   06
0883:  BCF    03.5
0884:  CLRF   06
.................... output_d(0b00000000); 
0885:  BSF    03.5
0886:  CLRF   08
0887:  BCF    03.5
0888:  CLRF   08
0889:  CLRF   2B
088A:  BTFSC  0B.7
088B:  BSF    2B.7
088C:  BCF    0B.7
....................  
....................     Lcd_gotoxy(4,1); 
088D:  MOVLW  04
088E:  BSF    03.5
088F:  MOVWF  2B
0890:  MOVLW  01
0891:  MOVWF  2C
0892:  BCF    0A.3
0893:  BCF    03.5
0894:  CALL   162
0895:  BSF    0A.3
0896:  BTFSC  2B.7
0897:  BSF    0B.7
....................     printf(lcd_putc,"Encendiendo"); 
0898:  MOVLW  42
0899:  BSF    03.6
089A:  MOVWF  0D
089B:  MOVLW  06
089C:  MOVWF  0F
....................     Lcd_gotoxy(8,2); 
*
0917:  MOVLW  08
0918:  BSF    03.5
0919:  MOVWF  2B
091A:  MOVLW  02
091B:  MOVWF  2C
091C:  BCF    0A.3
091D:  BCF    03.5
091E:  CALL   162
091F:  BSF    0A.3
0920:  BTFSC  2B.7
0921:  BSF    0B.7
0922:  CLRF   2B
0923:  BTFSC  0B.7
0924:  BSF    2B.7
0925:  BCF    0B.7
....................     printf(lcd_putc," %c ",0); 
0926:  MOVLW  20
0927:  BSF    03.5
0928:  MOVWF  2A
0929:  BCF    0A.3
092A:  BCF    03.5
092B:  CALL   18B
092C:  BSF    0A.3
092D:  BTFSC  2B.7
092E:  BSF    0B.7
092F:  CLRF   2B
0930:  BTFSC  0B.7
0931:  BSF    2B.7
0932:  BCF    0B.7
0933:  BSF    03.5
0934:  CLRF   2A
0935:  BCF    0A.3
0936:  BCF    03.5
0937:  CALL   18B
0938:  BSF    0A.3
0939:  BTFSC  2B.7
093A:  BSF    0B.7
093B:  CLRF   2B
093C:  BTFSC  0B.7
093D:  BSF    2B.7
093E:  BCF    0B.7
093F:  MOVLW  20
0940:  BSF    03.5
0941:  MOVWF  2A
0942:  BCF    0A.3
0943:  BCF    03.5
0944:  CALL   18B
0945:  BSF    0A.3
0946:  BTFSC  2B.7
0947:  BSF    0B.7
....................     delay_ms(5000);    
0948:  MOVLW  14
0949:  MOVWF  6A
094A:  CLRF   2B
094B:  BTFSC  0B.7
094C:  BSF    2B.7
094D:  BCF    0B.7
094E:  MOVLW  FA
094F:  BSF    03.5
0950:  MOVWF  2B
0951:  BCF    0A.3
0952:  BCF    03.5
0953:  CALL   176
0954:  BSF    0A.3
0955:  BTFSC  2B.7
0956:  BSF    0B.7
0957:  DECFSZ 6A,F
0958:  GOTO   14A
0959:  CLRF   2B
095A:  BTFSC  0B.7
095B:  BSF    2B.7
095C:  BCF    0B.7
....................     Lcd_gotoxy(33,33); 
095D:  MOVLW  21
095E:  BSF    03.5
095F:  MOVWF  2B
0960:  MOVWF  2C
0961:  BCF    0A.3
0962:  BCF    03.5
0963:  CALL   162
0964:  BSF    0A.3
0965:  BTFSC  2B.7
0966:  BSF    0B.7
....................     
.................... for ( pac = 1 , posc = 1 , i = 17 ; i > 1 ; --i ){  
0967:  MOVLW  01
0968:  MOVWF  64
0969:  MOVWF  66
096A:  MOVLW  11
096B:  MOVWF  65
096C:  MOVF   65,W
096D:  SUBLW  01
096E:  BTFSC  03.0
096F:  GOTO   209
0970:  CLRF   2B
0971:  BTFSC  0B.7
0972:  BSF    2B.7
0973:  BCF    0B.7
....................     printf(lcd_putc," %c " , 2 ); 
0974:  MOVLW  20
0975:  BSF    03.5
0976:  MOVWF  2A
0977:  BCF    0A.3
0978:  BCF    03.5
0979:  CALL   18B
097A:  BSF    0A.3
097B:  BTFSC  2B.7
097C:  BSF    0B.7
097D:  CLRF   2B
097E:  BTFSC  0B.7
097F:  BSF    2B.7
0980:  BCF    0B.7
0981:  MOVLW  02
0982:  BSF    03.5
0983:  MOVWF  2A
0984:  BCF    0A.3
0985:  BCF    03.5
0986:  CALL   18B
0987:  BSF    0A.3
0988:  BTFSC  2B.7
0989:  BSF    0B.7
098A:  CLRF   2B
098B:  BTFSC  0B.7
098C:  BSF    2B.7
098D:  BCF    0B.7
098E:  MOVLW  20
098F:  BSF    03.5
0990:  MOVWF  2A
0991:  BCF    0A.3
0992:  BCF    03.5
0993:  CALL   18B
0994:  BSF    0A.3
0995:  BTFSC  2B.7
0996:  BSF    0B.7
0997:  CLRF   2B
0998:  BTFSC  0B.7
0999:  BSF    2B.7
099A:  BCF    0B.7
....................     lcd_gotoxy(pac , posc ); 
099B:  MOVF   64,W
099C:  BSF    03.5
099D:  MOVWF  2B
099E:  BCF    03.5
099F:  MOVF   66,W
09A0:  BSF    03.5
09A1:  MOVWF  2C
09A2:  BCF    0A.3
09A3:  BCF    03.5
09A4:  CALL   162
09A5:  BSF    0A.3
09A6:  BTFSC  2B.7
09A7:  BSF    0B.7
09A8:  CLRF   2B
09A9:  BTFSC  0B.7
09AA:  BSF    2B.7
09AB:  BCF    0B.7
....................     delay_ms(150); 
09AC:  MOVLW  96
09AD:  BSF    03.5
09AE:  MOVWF  2B
09AF:  BCF    0A.3
09B0:  BCF    03.5
09B1:  CALL   176
09B2:  BSF    0A.3
09B3:  BTFSC  2B.7
09B4:  BSF    0B.7
09B5:  CLRF   2B
09B6:  BTFSC  0B.7
09B7:  BSF    2B.7
09B8:  BCF    0B.7
....................     printf(lcd_putc," %c " , 1 ); 
09B9:  MOVLW  20
09BA:  BSF    03.5
09BB:  MOVWF  2A
09BC:  BCF    0A.3
09BD:  BCF    03.5
09BE:  CALL   18B
09BF:  BSF    0A.3
09C0:  BTFSC  2B.7
09C1:  BSF    0B.7
09C2:  CLRF   2B
09C3:  BTFSC  0B.7
09C4:  BSF    2B.7
09C5:  BCF    0B.7
09C6:  MOVLW  01
09C7:  BSF    03.5
09C8:  MOVWF  2A
09C9:  BCF    0A.3
09CA:  BCF    03.5
09CB:  CALL   18B
09CC:  BSF    0A.3
09CD:  BTFSC  2B.7
09CE:  BSF    0B.7
09CF:  CLRF   2B
09D0:  BTFSC  0B.7
09D1:  BSF    2B.7
09D2:  BCF    0B.7
09D3:  MOVLW  20
09D4:  BSF    03.5
09D5:  MOVWF  2A
09D6:  BCF    0A.3
09D7:  BCF    03.5
09D8:  CALL   18B
09D9:  BSF    0A.3
09DA:  BTFSC  2B.7
09DB:  BSF    0B.7
09DC:  CLRF   2B
09DD:  BTFSC  0B.7
09DE:  BSF    2B.7
09DF:  BCF    0B.7
....................     lcd_gotoxy(pac , posc ); 
09E0:  MOVF   64,W
09E1:  BSF    03.5
09E2:  MOVWF  2B
09E3:  BCF    03.5
09E4:  MOVF   66,W
09E5:  BSF    03.5
09E6:  MOVWF  2C
09E7:  BCF    0A.3
09E8:  BCF    03.5
09E9:  CALL   162
09EA:  BSF    0A.3
09EB:  BTFSC  2B.7
09EC:  BSF    0B.7
09ED:  CLRF   2B
09EE:  BTFSC  0B.7
09EF:  BSF    2B.7
09F0:  BCF    0B.7
....................     delay_ms(200); 
09F1:  MOVLW  C8
09F2:  BSF    03.5
09F3:  MOVWF  2B
09F4:  BCF    0A.3
09F5:  BCF    03.5
09F6:  CALL   176
09F7:  BSF    0A.3
09F8:  BTFSC  2B.7
09F9:  BSF    0B.7
....................       ++pac; 
09FA:  INCF   64,F
....................         if( (i < 3)  &&  (posc == 1) ){ 
09FB:  MOVF   65,W
09FC:  SUBLW  02
09FD:  BTFSS  03.0
09FE:  GOTO   207
09FF:  DECFSZ 66,W
0A00:  GOTO   207
....................             i = 17 ; 
0A01:  MOVLW  11
0A02:  MOVWF  65
....................             posc = 2; 
0A03:  MOVLW  02
0A04:  MOVWF  66
....................             pac = 1 ; 
0A05:  MOVLW  01
0A06:  MOVWF  64
....................         } 
0A07:  DECF   65,F
0A08:  GOTO   16C
....................   } 
....................     lcd_clear(1); 
0A09:  MOVLW  01
0A0A:  MOVWF  6A
0A0B:  BCF    0A.3
0A0C:  CALL   6DE
0A0D:  BSF    0A.3
.................... for( move = 17 ;move > 1 ; --move ){ 
0A0E:  MOVLW  11
0A0F:  MOVWF  67
0A10:  MOVF   67,W
0A11:  SUBLW  01
0A12:  BTFSC  03.0
0A13:  GOTO   2AD
0A14:  CLRF   2B
0A15:  BTFSC  0B.7
0A16:  BSF    2B.7
0A17:  BCF    0B.7
....................   lcd_gotoxy(move,1); 
0A18:  MOVF   67,W
0A19:  BSF    03.5
0A1A:  MOVWF  2B
0A1B:  MOVLW  01
0A1C:  MOVWF  2C
0A1D:  BCF    0A.3
0A1E:  BCF    03.5
0A1F:  CALL   162
0A20:  BSF    0A.3
0A21:  BTFSC  2B.7
0A22:  BSF    0B.7
....................   printf(lcd_putc," Matrix  "); 
0A23:  MOVLW  48
0A24:  BSF    03.6
0A25:  MOVWF  0D
0A26:  MOVLW  06
0A27:  MOVWF  0F
....................   delay_ms(250); 
*
0AA2:  MOVLW  FA
0AA3:  BSF    03.5
0AA4:  MOVWF  2B
0AA5:  BCF    0A.3
0AA6:  BCF    03.5
0AA7:  CALL   176
0AA8:  BSF    0A.3
0AA9:  BTFSC  2B.7
0AAA:  BSF    0B.7
0AAB:  DECF   67,F
0AAC:  GOTO   210
.................... } 
.................... for( move2 = 1 ; move2 < 5 ; ++move2 ){ 
0AAD:  MOVLW  01
0AAE:  MOVWF  68
0AAF:  MOVF   68,W
0AB0:  SUBLW  04
0AB1:  BTFSS  03.0
0AB2:  GOTO   34C
0AB3:  CLRF   2B
0AB4:  BTFSC  0B.7
0AB5:  BSF    2B.7
0AB6:  BCF    0B.7
....................   lcd_gotoxy(move2 ,2); 
0AB7:  MOVF   68,W
0AB8:  BSF    03.5
0AB9:  MOVWF  2B
0ABA:  MOVLW  02
0ABB:  MOVWF  2C
0ABC:  BCF    0A.3
0ABD:  BCF    03.5
0ABE:  CALL   162
0ABF:  BSF    0A.3
0AC0:  BTFSC  2B.7
0AC1:  BSF    0B.7
....................   printf(lcd_putc," Proyection "); 
0AC2:  MOVLW  4D
0AC3:  BSF    03.6
0AC4:  MOVWF  0D
0AC5:  MOVLW  06
0AC6:  MOVWF  0F
....................   delay_ms(250); 
*
0B41:  MOVLW  FA
0B42:  BSF    03.5
0B43:  MOVWF  2B
0B44:  BCF    0A.3
0B45:  BCF    03.5
0B46:  CALL   176
0B47:  BSF    0A.3
0B48:  BTFSC  2B.7
0B49:  BSF    0B.7
0B4A:  INCF   68,F
0B4B:  GOTO   2AF
....................  } 
0B4C:  INCF   69,F
0B4D:  GOTO   07E
.................... } 
....................  
....................  
.................... for(contador=0;contador<500;contador++){ 
0B4E:  CLRF   61
....................    
.................... output_d(Fila1); 
0B4F:  BSF    03.5
0B50:  CLRF   08
0B51:  BCF    03.5
0B52:  MOVF   47,W
0B53:  MOVWF  08
.................... output_high(col1); 
0B54:  BSF    03.5
0B55:  BCF    06.0
0B56:  BCF    03.5
0B57:  BSF    06.0
0B58:  CLRF   2B
0B59:  BTFSC  0B.7
0B5A:  BSF    2B.7
0B5B:  BCF    0B.7
.................... delay_ms(1); 
0B5C:  MOVLW  01
0B5D:  BSF    03.5
0B5E:  MOVWF  2B
0B5F:  BCF    0A.3
0B60:  BCF    03.5
0B61:  CALL   176
0B62:  BSF    0A.3
0B63:  BTFSC  2B.7
0B64:  BSF    0B.7
.................... output_low(col1); 
0B65:  BSF    03.5
0B66:  BCF    06.0
0B67:  BCF    03.5
0B68:  BCF    06.0
....................  
.................... output_d(Fila2); 
0B69:  BSF    03.5
0B6A:  CLRF   08
0B6B:  BCF    03.5
0B6C:  MOVF   48,W
0B6D:  MOVWF  08
.................... output_high(col2); 
0B6E:  BSF    03.5
0B6F:  BCF    06.1
0B70:  BCF    03.5
0B71:  BSF    06.1
0B72:  CLRF   2B
0B73:  BTFSC  0B.7
0B74:  BSF    2B.7
0B75:  BCF    0B.7
.................... delay_ms(1); 
0B76:  MOVLW  01
0B77:  BSF    03.5
0B78:  MOVWF  2B
0B79:  BCF    0A.3
0B7A:  BCF    03.5
0B7B:  CALL   176
0B7C:  BSF    0A.3
0B7D:  BTFSC  2B.7
0B7E:  BSF    0B.7
.................... output_low(col2); 
0B7F:  BSF    03.5
0B80:  BCF    06.1
0B81:  BCF    03.5
0B82:  BCF    06.1
....................  
.................... output_d(Fila3); 
0B83:  BSF    03.5
0B84:  CLRF   08
0B85:  BCF    03.5
0B86:  MOVF   49,W
0B87:  MOVWF  08
.................... output_high(col3); 
0B88:  BSF    03.5
0B89:  BCF    06.2
0B8A:  BCF    03.5
0B8B:  BSF    06.2
0B8C:  CLRF   2B
0B8D:  BTFSC  0B.7
0B8E:  BSF    2B.7
0B8F:  BCF    0B.7
.................... delay_ms(1); 
0B90:  MOVLW  01
0B91:  BSF    03.5
0B92:  MOVWF  2B
0B93:  BCF    0A.3
0B94:  BCF    03.5
0B95:  CALL   176
0B96:  BSF    0A.3
0B97:  BTFSC  2B.7
0B98:  BSF    0B.7
.................... output_low(col3); 
0B99:  BSF    03.5
0B9A:  BCF    06.2
0B9B:  BCF    03.5
0B9C:  BCF    06.2
....................  
.................... output_d(Fila4); 
0B9D:  BSF    03.5
0B9E:  CLRF   08
0B9F:  BCF    03.5
0BA0:  MOVF   4A,W
0BA1:  MOVWF  08
.................... output_high(col4); 
0BA2:  BSF    03.5
0BA3:  BCF    06.3
0BA4:  BCF    03.5
0BA5:  BSF    06.3
0BA6:  CLRF   2B
0BA7:  BTFSC  0B.7
0BA8:  BSF    2B.7
0BA9:  BCF    0B.7
.................... delay_ms(1); 
0BAA:  MOVLW  01
0BAB:  BSF    03.5
0BAC:  MOVWF  2B
0BAD:  BCF    0A.3
0BAE:  BCF    03.5
0BAF:  CALL   176
0BB0:  BSF    0A.3
0BB1:  BTFSC  2B.7
0BB2:  BSF    0B.7
.................... output_low(col4); 
0BB3:  BSF    03.5
0BB4:  BCF    06.3
0BB5:  BCF    03.5
0BB6:  BCF    06.3
....................  
.................... output_d(Fila5); 
0BB7:  BSF    03.5
0BB8:  CLRF   08
0BB9:  BCF    03.5
0BBA:  MOVF   4B,W
0BBB:  MOVWF  08
.................... output_high(col5); 
0BBC:  BSF    03.5
0BBD:  BCF    06.4
0BBE:  BCF    03.5
0BBF:  BSF    06.4
0BC0:  CLRF   2B
0BC1:  BTFSC  0B.7
0BC2:  BSF    2B.7
0BC3:  BCF    0B.7
.................... delay_ms(1); 
0BC4:  MOVLW  01
0BC5:  BSF    03.5
0BC6:  MOVWF  2B
0BC7:  BCF    0A.3
0BC8:  BCF    03.5
0BC9:  CALL   176
0BCA:  BSF    0A.3
0BCB:  BTFSC  2B.7
0BCC:  BSF    0B.7
.................... output_low(col5); 
0BCD:  BSF    03.5
0BCE:  BCF    06.4
0BCF:  BCF    03.5
0BD0:  BCF    06.4
....................  
.................... output_d(Fila6); 
0BD1:  BSF    03.5
0BD2:  CLRF   08
0BD3:  BCF    03.5
0BD4:  MOVF   4C,W
0BD5:  MOVWF  08
.................... output_high(col6); 
0BD6:  BSF    03.5
0BD7:  BCF    06.5
0BD8:  BCF    03.5
0BD9:  BSF    06.5
0BDA:  CLRF   2B
0BDB:  BTFSC  0B.7
0BDC:  BSF    2B.7
0BDD:  BCF    0B.7
.................... delay_ms(1); 
0BDE:  MOVLW  01
0BDF:  BSF    03.5
0BE0:  MOVWF  2B
0BE1:  BCF    0A.3
0BE2:  BCF    03.5
0BE3:  CALL   176
0BE4:  BSF    0A.3
0BE5:  BTFSC  2B.7
0BE6:  BSF    0B.7
.................... output_low(col6); 
0BE7:  BSF    03.5
0BE8:  BCF    06.5
0BE9:  BCF    03.5
0BEA:  BCF    06.5
....................  
.................... output_d(Fila7); 
0BEB:  BSF    03.5
0BEC:  CLRF   08
0BED:  BCF    03.5
0BEE:  MOVF   4D,W
0BEF:  MOVWF  08
.................... output_high(col7); 
0BF0:  BSF    03.5
0BF1:  BCF    06.6
0BF2:  BCF    03.5
0BF3:  BSF    06.6
0BF4:  CLRF   2B
0BF5:  BTFSC  0B.7
0BF6:  BSF    2B.7
0BF7:  BCF    0B.7
.................... delay_ms(1); 
0BF8:  MOVLW  01
0BF9:  BSF    03.5
0BFA:  MOVWF  2B
0BFB:  BCF    0A.3
0BFC:  BCF    03.5
0BFD:  CALL   176
0BFE:  BSF    0A.3
0BFF:  BTFSC  2B.7
0C00:  BSF    0B.7
.................... output_low(col7); 
0C01:  BSF    03.5
0C02:  BCF    06.6
0C03:  BCF    03.5
0C04:  BCF    06.6
....................  
.................... output_d(Fila8); 
0C05:  BSF    03.5
0C06:  CLRF   08
0C07:  BCF    03.5
0C08:  MOVF   4E,W
0C09:  MOVWF  08
.................... output_high(col8); 
0C0A:  BSF    03.5
0C0B:  BCF    06.7
0C0C:  BCF    03.5
0C0D:  BSF    06.7
0C0E:  CLRF   2B
0C0F:  BTFSC  0B.7
0C10:  BSF    2B.7
0C11:  BCF    0B.7
.................... delay_ms(1); 
0C12:  MOVLW  01
0C13:  BSF    03.5
0C14:  MOVWF  2B
0C15:  BCF    0A.3
0C16:  BCF    03.5
0C17:  CALL   176
0C18:  BSF    0A.3
0C19:  BTFSC  2B.7
0C1A:  BSF    0B.7
.................... output_low(col8); 
0C1B:  BSF    03.5
0C1C:  BCF    06.7
0C1D:  BCF    03.5
0C1E:  BCF    06.7
0C1F:  INCF   61,F
0C20:  GOTO   34F
....................   
....................   } 
.................... } 
....................  
0C21:  SLEEP
....................  
....................    

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
