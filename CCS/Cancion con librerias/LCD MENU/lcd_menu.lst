CCS PCM C Compiler, Version 5.070, 56587               07-sept.-18 10:35

               Filename:   C:\Users\user\Documents\proyectos digitales pic c\LCD MENU\lcd_menu.lst

               ROM used:   400 words (5%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           21 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   157
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0C,00
0005:  DATA C2,34
0006:  DATA 65,37
0007:  DATA F6,32
0008:  DATA EE,34
0009:  DATA E4,37
000A:  DATA 73,00
000B:  DATA 20,28
000C:  DATA 75,36
000D:  DATA F3,32
000E:  DATA A0,33
000F:  DATA 69,39
0010:  DATA 6F,10
0011:  DATA 0A,10
0012:  DATA A0,20
0013:  DATA BD,34
0014:  DATA FA,38
0015:  DATA 20,10
0016:  DATA C2,1E
0017:  DATA E4,32
0018:  DATA 72,10
0019:  DATA 00,00
*
0101:  MOVF   0B,W
0102:  MOVWF  23
0103:  BCF    0B.7
0104:  BSF    03.5
0105:  BSF    03.6
0106:  BSF    0C.7
0107:  BSF    0C.0
0108:  NOP
0109:  NOP
010A:  BCF    03.5
010B:  BCF    03.6
010C:  BTFSC  23.7
010D:  BSF    0B.7
010E:  BSF    03.6
010F:  MOVF   0C,W
0110:  ANDLW  7F
0111:  BTFSC  03.2
0112:  GOTO   155
0113:  BCF    03.6
0114:  MOVWF  23
0115:  BSF    03.6
0116:  MOVF   0D,W
0117:  BCF    03.6
0118:  MOVWF  24
0119:  BSF    03.6
011A:  MOVF   0F,W
011B:  BCF    03.6
011C:  MOVWF  25
011D:  MOVF   23,W
011E:  MOVWF  26
011F:  CALL   0D5
0120:  MOVF   24,W
0121:  BSF    03.6
0122:  MOVWF  0D
0123:  BCF    03.6
0124:  MOVF   25,W
0125:  BSF    03.6
0126:  MOVWF  0F
0127:  BCF    03.6
0128:  MOVF   0B,W
0129:  MOVWF  26
012A:  BCF    0B.7
012B:  BSF    03.5
012C:  BSF    03.6
012D:  BSF    0C.7
012E:  BSF    0C.0
012F:  NOP
0130:  NOP
0131:  BCF    03.5
0132:  BCF    03.6
0133:  BTFSC  26.7
0134:  BSF    0B.7
0135:  BSF    03.6
0136:  RLF    0C,W
0137:  RLF    0E,W
0138:  ANDLW  7F
0139:  BTFSC  03.2
013A:  GOTO   155
013B:  BCF    03.6
013C:  MOVWF  23
013D:  BSF    03.6
013E:  MOVF   0D,W
013F:  BCF    03.6
0140:  MOVWF  24
0141:  BSF    03.6
0142:  MOVF   0F,W
0143:  BCF    03.6
0144:  MOVWF  25
0145:  MOVF   23,W
0146:  MOVWF  26
0147:  CALL   0D5
0148:  MOVF   24,W
0149:  BSF    03.6
014A:  MOVWF  0D
014B:  BCF    03.6
014C:  MOVF   25,W
014D:  BSF    03.6
014E:  MOVWF  0F
014F:  INCF   0D,F
0150:  BTFSC  03.2
0151:  INCF   0F,F
0152:  BCF    03.6
0153:  GOTO   101
0154:  BSF    03.6
0155:  BCF    03.6
0156:  RETURN
....................  
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPUT 
.................... #use delay(clock=20M) 
*
001A:  MOVLW  28
001B:  MOVWF  04
001C:  BCF    03.7
001D:  MOVF   00,W
001E:  BTFSC  03.2
001F:  GOTO   02D
0020:  MOVLW  06
0021:  MOVWF  78
0022:  CLRF   77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 78,F
0026:  GOTO   022
0027:  MOVLW  7B
0028:  MOVWF  77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 00,F
002C:  GOTO   020
002D:  RETURN
.................... #use standard_io(E)  
.................... #use standard_io(A)  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0049:  MOVLW  0F
004A:  BSF    03.5
004B:  ANDWF  08,W
004C:  IORLW  F0
004D:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004E:  BCF    03.5
004F:  BSF    08.2
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BSF    08.0
....................    delay_cycles(1); 
0052:  NOP
....................    high = lcd_read_nibble(); 
0053:  CALL   03D
0054:  MOVF   78,W
0055:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
0056:  BCF    08.0
....................    delay_cycles(1); 
0057:  NOP
....................    lcd_output_enable(1); 
0058:  BSF    08.0
....................    delay_us(1); 
0059:  GOTO   05A
005A:  GOTO   05B
005B:  NOP
....................    low = lcd_read_nibble(); 
005C:  CALL   03D
005D:  MOVF   78,W
005E:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
005F:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0060:  MOVLW  0F
0061:  BSF    03.5
0062:  ANDWF  08,W
0063:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0064:  BCF    03.5
0065:  SWAPF  2E,W
0066:  MOVWF  77
0067:  MOVLW  F0
0068:  ANDWF  77,F
0069:  MOVF   77,W
006A:  IORWF  2D,W
006B:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003D:  MOVF   08,W
003E:  MOVWF  77
003F:  SWAPF  08,W
0040:  ANDLW  0F
0041:  MOVWF  78
....................   #endif 
0042:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002E:  SWAPF  2E,W
002F:  ANDLW  F0
0030:  MOVWF  77
0031:  MOVLW  0F
0032:  ANDWF  08,W
0033:  IORWF  77,W
0034:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0035:  NOP
....................    lcd_output_enable(1); 
0036:  BSF    08.0
....................    delay_us(2); 
0037:  MOVLW  03
0038:  MOVWF  77
0039:  DECFSZ 77,F
003A:  GOTO   039
....................    lcd_output_enable(0); 
003B:  BCF    08.0
003C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0043:  BSF    03.5
0044:  BCF    08.0
....................    lcd_rs_tris(); 
0045:  BCF    08.1
....................    lcd_rw_tris(); 
0046:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0047:  BCF    03.5
0048:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
006C:  MOVF   78,W
006D:  MOVWF  2D
006E:  BTFSC  2D.7
006F:  GOTO   049
....................    lcd_output_rs(address); 
0070:  BTFSS  2B.0
0071:  BCF    08.1
0072:  BTFSC  2B.0
0073:  BSF    08.1
....................    delay_cycles(1); 
0074:  NOP
....................    lcd_output_rw(0); 
0075:  BCF    08.2
....................    delay_cycles(1); 
0076:  NOP
....................    lcd_output_enable(0); 
0077:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0078:  SWAPF  2C,W
0079:  MOVWF  2D
007A:  MOVLW  0F
007B:  ANDWF  2D,F
007C:  MOVF   2D,W
007D:  MOVWF  2E
007E:  CALL   02E
....................    lcd_send_nibble(n & 0xf); 
007F:  MOVF   2C,W
0080:  ANDLW  0F
0081:  MOVWF  2D
0082:  MOVWF  2E
0083:  CALL   02E
0084:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0085:  MOVLW  28
0086:  MOVWF  24
0087:  MOVLW  0C
0088:  MOVWF  25
0089:  MOVLW  01
008A:  MOVWF  26
008B:  MOVLW  06
008C:  MOVWF  27
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
008D:  BCF    08.0
....................    lcd_output_rs(0); 
008E:  BCF    08.1
....................    lcd_output_rw(0); 
008F:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0090:  MOVLW  0F
0091:  BSF    03.5
0092:  ANDWF  08,W
0093:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0094:  BCF    08.0
....................    lcd_rs_tris(); 
0095:  BCF    08.1
....................    lcd_rw_tris(); 
0096:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0097:  MOVLW  0F
0098:  BCF    03.5
0099:  MOVWF  28
009A:  CALL   01A
....................    for(i=1;i<=3;++i) 
009B:  MOVLW  01
009C:  MOVWF  23
009D:  MOVF   23,W
009E:  SUBLW  03
009F:  BTFSS  03.0
00A0:  GOTO   0A9
....................    { 
....................        lcd_send_nibble(3); 
00A1:  MOVLW  03
00A2:  MOVWF  2E
00A3:  CALL   02E
....................        delay_ms(5); 
00A4:  MOVLW  05
00A5:  MOVWF  28
00A6:  CALL   01A
00A7:  INCF   23,F
00A8:  GOTO   09D
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A9:  MOVLW  02
00AA:  MOVWF  2E
00AB:  CALL   02E
....................    delay_ms(5); 
00AC:  MOVLW  05
00AD:  MOVWF  28
00AE:  CALL   01A
....................    for(i=0;i<=3;++i) 
00AF:  CLRF   23
00B0:  MOVF   23,W
00B1:  SUBLW  03
00B2:  BTFSS  03.0
00B3:  GOTO   0C0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B4:  MOVLW  24
00B5:  ADDWF  23,W
00B6:  MOVWF  04
00B7:  BCF    03.7
00B8:  MOVF   00,W
00B9:  MOVWF  28
00BA:  CLRF   2B
00BB:  MOVF   28,W
00BC:  MOVWF  2C
00BD:  CALL   043
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00BE:  INCF   23,F
00BF:  GOTO   0B0
00C0:  BCF    0A.3
00C1:  BCF    0A.4
00C2:  GOTO   166 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00C3:  DECFSZ 28,W
00C4:  GOTO   0C6
00C5:  GOTO   0C9
....................       address=LCD_LINE_TWO; 
00C6:  MOVLW  40
00C7:  MOVWF  29
00C8:  GOTO   0CA
....................    else 
....................       address=0; 
00C9:  CLRF   29
....................       
....................    address+=x-1; 
00CA:  MOVLW  01
00CB:  SUBWF  27,W
00CC:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
00CD:  MOVF   29,W
00CE:  IORLW  80
00CF:  MOVWF  2A
00D0:  CLRF   2B
00D1:  MOVF   2A,W
00D2:  MOVWF  2C
00D3:  CALL   043
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D4:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00D5:  MOVF   26,W
00D6:  XORLW  07
00D7:  BTFSC  03.2
00D8:  GOTO   0E3
00D9:  XORLW  0B
00DA:  BTFSC  03.2
00DB:  GOTO   0E8
00DC:  XORLW  06
00DD:  BTFSC  03.2
00DE:  GOTO   0F0
00DF:  XORLW  02
00E0:  BTFSC  03.2
00E1:  GOTO   0F6
00E2:  GOTO   0FB
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E3:  MOVLW  01
00E4:  MOVWF  27
00E5:  MOVWF  28
00E6:  CALL   0C3
00E7:  GOTO   100
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E8:  CLRF   2B
00E9:  MOVLW  01
00EA:  MOVWF  2C
00EB:  CALL   043
....................                      delay_ms(2); 
00EC:  MOVLW  02
00ED:  MOVWF  28
00EE:  CALL   01A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00EF:  GOTO   100
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00F0:  MOVLW  01
00F1:  MOVWF  27
00F2:  MOVLW  02
00F3:  MOVWF  28
00F4:  CALL   0C3
00F5:  GOTO   100
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F6:  CLRF   2B
00F7:  MOVLW  10
00F8:  MOVWF  2C
00F9:  CALL   043
00FA:  GOTO   100
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00FB:  MOVLW  01
00FC:  MOVWF  2B
00FD:  MOVF   26,W
00FE:  MOVWF  2C
00FF:  CALL   043
....................      #endif 
....................    } 
0100:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
0157:  MOVF   03,W
0158:  ANDLW  1F
0159:  MOVWF  03
015A:  CLRF   21
015B:  CLRF   20
015C:  BSF    03.5
015D:  BSF    1F.0
015E:  BSF    1F.1
015F:  BSF    1F.2
0160:  BCF    1F.3
0161:  MOVLW  07
0162:  MOVWF  1C
0163:  BCF    03.7
....................  { 
....................     lcd_init();  
0164:  BCF    03.5
0165:  GOTO   085
....................         for(int i=20;i>0;i--){ 
0166:  MOVLW  14
0167:  MOVWF  22
0168:  MOVF   22,F
0169:  BTFSC  03.2
016A:  GOTO   183
....................         LCD_PUTC("\f"); 
016B:  MOVLW  04
016C:  BSF    03.6
016D:  MOVWF  0D
016E:  MOVLW  00
016F:  MOVWF  0F
0170:  BCF    03.6
0171:  CALL   101
....................         lcd_gotoxy(i,1);//columnas,filas 
0172:  MOVF   22,W
0173:  MOVWF  27
0174:  MOVLW  01
0175:  MOVWF  28
0176:  CALL   0C3
....................         printf(lcd_putc,"Bienvenidos"); 
0177:  MOVLW  05
0178:  BSF    03.6
0179:  MOVWF  0D
017A:  MOVLW  00
017B:  MOVWF  0F
017C:  BCF    03.6
017D:  CALL   101
....................         delay_ms(150);} 
017E:  MOVLW  96
017F:  MOVWF  28
0180:  CALL   01A
0181:  DECF   22,F
0182:  GOTO   168
....................      
.................... while(1){ 
....................         lcd_gotoxy(0,1);//columnas,filas 
0183:  CLRF   27
0184:  MOVLW  01
0185:  MOVWF  28
0186:  CALL   0C3
....................         printf(lcd_putc," Pulse giro \n  A=izq  B=der "); 
0187:  MOVLW  0B
0188:  BSF    03.6
0189:  MOVWF  0D
018A:  MOVLW  00
018B:  MOVWF  0F
018C:  BCF    03.6
018D:  CALL   101
018E:  GOTO   183
.................... }  
.................... } 
018F:  SLEEP

Configuration Fuses:
   Word  1: 3F79   XT NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
