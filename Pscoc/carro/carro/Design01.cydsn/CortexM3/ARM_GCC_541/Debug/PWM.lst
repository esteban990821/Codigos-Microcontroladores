ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PWM.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWM_Enable,"ax",%progbits
  20              		.align	2
  21              		.global	PWM_Enable
  22              		.thumb
  23              		.thumb_func
  24              		.type	PWM_Enable, %function
  25              	PWM_Enable:
  26              	.LFB2:
  27              		.file 1 "Generated_Source\\PSoC5\\PWM.c"
   1:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM.c **** * File Name: PWM.c
   3:Generated_Source\PSoC5/PWM.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM.c **** *
   5:Generated_Source\PSoC5/PWM.c **** * Description:
   6:Generated_Source\PSoC5/PWM.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM.c **** *
  15:Generated_Source\PSoC5/PWM.c **** * Note:
  16:Generated_Source\PSoC5/PWM.c **** *
  17:Generated_Source\PSoC5/PWM.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM.c **** 
  24:Generated_Source\PSoC5/PWM.c **** #include "PWM.h"
  25:Generated_Source\PSoC5/PWM.c **** 
  26:Generated_Source\PSoC5/PWM.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM.c **** #ifdef PWM_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM.c **** #endif /* PWM_PWMUDB_genblk1_ctrlreg__REMOVED */
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 2


  31:Generated_Source\PSoC5/PWM.c **** 
  32:Generated_Source\PSoC5/PWM.c **** uint8 PWM_initVar = 0u;
  33:Generated_Source\PSoC5/PWM.c **** 
  34:Generated_Source\PSoC5/PWM.c **** 
  35:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Start
  37:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM.c **** *
  39:Generated_Source\PSoC5/PWM.c **** * Summary:
  40:Generated_Source\PSoC5/PWM.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM.c **** *
  44:Generated_Source\PSoC5/PWM.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM.c **** *  None
  46:Generated_Source\PSoC5/PWM.c **** *
  47:Generated_Source\PSoC5/PWM.c **** * Return:
  48:Generated_Source\PSoC5/PWM.c **** *  None
  49:Generated_Source\PSoC5/PWM.c **** *
  50:Generated_Source\PSoC5/PWM.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM.c **** *  PWM_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM.c **** *
  54:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM.c **** void PWM_Start(void) 
  56:Generated_Source\PSoC5/PWM.c **** {
  57:Generated_Source\PSoC5/PWM.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM.c ****     if(PWM_initVar == 0u)
  59:Generated_Source\PSoC5/PWM.c ****     {
  60:Generated_Source\PSoC5/PWM.c ****         PWM_Init();
  61:Generated_Source\PSoC5/PWM.c ****         PWM_initVar = 1u;
  62:Generated_Source\PSoC5/PWM.c ****     }
  63:Generated_Source\PSoC5/PWM.c ****     PWM_Enable();
  64:Generated_Source\PSoC5/PWM.c **** 
  65:Generated_Source\PSoC5/PWM.c **** }
  66:Generated_Source\PSoC5/PWM.c **** 
  67:Generated_Source\PSoC5/PWM.c **** 
  68:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Init
  70:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM.c **** *
  72:Generated_Source\PSoC5/PWM.c **** * Summary:
  73:Generated_Source\PSoC5/PWM.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM.c **** *  PWM_Start().
  76:Generated_Source\PSoC5/PWM.c **** *
  77:Generated_Source\PSoC5/PWM.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM.c **** *  None
  79:Generated_Source\PSoC5/PWM.c **** *
  80:Generated_Source\PSoC5/PWM.c **** * Return:
  81:Generated_Source\PSoC5/PWM.c **** *  None
  82:Generated_Source\PSoC5/PWM.c **** *
  83:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM.c **** void PWM_Init(void) 
  85:Generated_Source\PSoC5/PWM.c **** {
  86:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction || PWM_UseControl)
  87:Generated_Source\PSoC5/PWM.c ****         uint8 ctrl;
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 3


  88:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction || PWM_UseControl) */
  89:Generated_Source\PSoC5/PWM.c **** 
  90:Generated_Source\PSoC5/PWM.c ****     #if(!PWM_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UseStatus)
  92:Generated_Source\PSoC5/PWM.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM.c ****             uint8 PWM_interruptState;
  94:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
  95:Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM.c **** 
  97:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL |= PWM_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM.c ****         #if (PWM_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL |= PWM_CFG0_DB;
 102:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM.c **** 
 104:Generated_Source\PSoC5/PWM.c ****         ctrl = PWM_CONTROL3 & ((uint8 )(~PWM_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL3 = ctrl | PWM_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM.c **** 
 107:Generated_Source\PSoC5/PWM.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_RT1_MASK));
 109:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 |= PWM_SYNC;
 110:Generated_Source\PSoC5/PWM.c **** 
 111:Generated_Source\PSoC5/PWM.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 |= PWM_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM.c **** 
 115:Generated_Source\PSoC5/PWM.c ****     #elif (PWM_UseControl)
 116:Generated_Source\PSoC5/PWM.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM.c ****         ctrl = PWM_CONTROL & ((uint8)(~PWM_CTRL_CMPMODE2_MASK)) &
 118:Generated_Source\PSoC5/PWM.c ****                 ((uint8)(~PWM_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL = ctrl | PWM_DEFAULT_COMPARE2_MODE |
 120:Generated_Source\PSoC5/PWM.c ****                                    PWM_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM.c **** 
 123:Generated_Source\PSoC5/PWM.c ****     #if (!PWM_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM.c ****         #if (PWM_Resolution == 8)
 125:Generated_Source\PSoC5/PWM.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/PWM.c ****         #else /* (PWM_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP1 |= (PWM_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM.c **** 
 133:Generated_Source\PSoC5/PWM.c ****         PWM_WriteCounter(PWM_INIT_PERIOD_VALUE);
 134:Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM.c **** 
 136:Generated_Source\PSoC5/PWM.c ****     PWM_WritePeriod(PWM_INIT_PERIOD_VALUE);
 137:Generated_Source\PSoC5/PWM.c **** 
 138:Generated_Source\PSoC5/PWM.c ****         #if (PWM_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare(PWM_INIT_COMPARE_VALUE1);
 140:Generated_Source\PSoC5/PWM.c ****         #else
 141:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare1(PWM_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare2(PWM_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 4


 145:Generated_Source\PSoC5/PWM.c ****         #if (PWM_KillModeMinTime)
 146:Generated_Source\PSoC5/PWM.c ****             PWM_WriteKillTime(PWM_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM.c **** 
 149:Generated_Source\PSoC5/PWM.c ****         #if (PWM_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM.c ****             PWM_WriteDeadTime(PWM_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM.c **** 
 153:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseStatus || PWM_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM.c ****         PWM_SetInterruptMode(PWM_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM.c **** 
 157:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL2 |= PWM_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM.c ****     #else
 163:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UseStatus)
 164:Generated_Source\PSoC5/PWM.c **** 
 165:Generated_Source\PSoC5/PWM.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM.c ****             PWM_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM.c ****             PWM_STATUS_AUX_CTRL |= PWM_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/PWM.c **** 
 171:Generated_Source\PSoC5/PWM.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM.c ****             CyExitCriticalSection(PWM_interruptState);
 173:Generated_Source\PSoC5/PWM.c **** 
 174:Generated_Source\PSoC5/PWM.c ****             /* Clear the FIFO to enable the PWM_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM.c ****             PWM_ClearFIFO();
 177:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
 178:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM.c **** }
 180:Generated_Source\PSoC5/PWM.c **** 
 181:Generated_Source\PSoC5/PWM.c **** 
 182:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Enable
 184:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM.c **** *
 186:Generated_Source\PSoC5/PWM.c **** * Summary:
 187:Generated_Source\PSoC5/PWM.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM.c **** *
 189:Generated_Source\PSoC5/PWM.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM.c **** *  None
 191:Generated_Source\PSoC5/PWM.c **** *
 192:Generated_Source\PSoC5/PWM.c **** * Return:
 193:Generated_Source\PSoC5/PWM.c **** *  None
 194:Generated_Source\PSoC5/PWM.c **** *
 195:Generated_Source\PSoC5/PWM.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM.c **** *
 198:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM.c **** void PWM_Enable(void) 
 200:Generated_Source\PSoC5/PWM.c **** {
  28              		.loc 1 200 0
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 5


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE2:
  36              		.size	PWM_Enable, .-PWM_Enable
  37 0002 00BF     		.section	.text.PWM_Stop,"ax",%progbits
  38              		.align	2
  39              		.global	PWM_Stop
  40              		.thumb
  41              		.thumb_func
  42              		.type	PWM_Stop, %function
  43              	PWM_Stop:
  44              	.LFB3:
 201:Generated_Source\PSoC5/PWM.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_STBY_ENABLE |= PWM_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM.c **** 
 207:Generated_Source\PSoC5/PWM.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL |= PWM_CTRL_ENABLE;
 210:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM.c **** }
 212:Generated_Source\PSoC5/PWM.c **** 
 213:Generated_Source\PSoC5/PWM.c **** 
 214:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Stop
 216:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM.c **** *
 218:Generated_Source\PSoC5/PWM.c **** * Summary:
 219:Generated_Source\PSoC5/PWM.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM.c **** *
 222:Generated_Source\PSoC5/PWM.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM.c **** *  None
 224:Generated_Source\PSoC5/PWM.c **** *
 225:Generated_Source\PSoC5/PWM.c **** * Return:
 226:Generated_Source\PSoC5/PWM.c **** *  None
 227:Generated_Source\PSoC5/PWM.c **** *
 228:Generated_Source\PSoC5/PWM.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM.c **** *
 232:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM.c **** void PWM_Stop(void) 
 234:Generated_Source\PSoC5/PWM.c **** {
  45              		.loc 1 234 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50 0000 7047     		bx	lr
  51              		.cfi_endproc
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 6


  52              	.LFE3:
  53              		.size	PWM_Stop, .-PWM_Stop
  54 0002 00BF     		.section	.text.PWM_WriteCounter,"ax",%progbits
  55              		.align	2
  56              		.global	PWM_WriteCounter
  57              		.thumb
  58              		.thumb_func
  59              		.type	PWM_WriteCounter, %function
  60              	PWM_WriteCounter:
  61              	.LFB4:
 235:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL &= ((uint8)(~PWM_CTRL_ENABLE));
 237:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM.c **** 
 239:Generated_Source\PSoC5/PWM.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE &= ((uint8)(~PWM_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM.c **** }
 245:Generated_Source\PSoC5/PWM.c **** 
 246:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM.c ****     #if (PWM_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM.c **** 
 249:Generated_Source\PSoC5/PWM.c **** 
 250:Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_SetCompareMode
 252:Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM.c ****         *
 254:Generated_Source\PSoC5/PWM.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM.c ****         *
 258:Generated_Source\PSoC5/PWM.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM.c ****         *
 262:Generated_Source\PSoC5/PWM.c ****         * Return:
 263:Generated_Source\PSoC5/PWM.c ****         *  None
 264:Generated_Source\PSoC5/PWM.c ****         *
 265:Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM.c ****         void PWM_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM.c ****         {
 268:Generated_Source\PSoC5/PWM.c ****             #if(PWM_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM.c **** 
 270:Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIF
 272:Generated_Source\PSoC5/PWM.c ****                 #else
 273:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM.c **** 
 276:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL3 &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM.c **** 
 279:Generated_Source\PSoC5/PWM.c ****             #elif (PWM_UseControl)
 280:Generated_Source\PSoC5/PWM.c **** 
 281:Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 7


 282:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHI
 283:Generated_Source\PSoC5/PWM.c ****                                                 PWM_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM.c ****                 #else
 285:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode1masked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM.c **** 
 288:Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHI
 290:Generated_Source\PSoC5/PWM.c ****                                                PWM_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM.c ****                 #else
 292:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode2masked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM.c **** 
 295:Generated_Source\PSoC5/PWM.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL &= ((uint8)(~(PWM_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM.c ****                                             PWM_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM.c **** 
 300:Generated_Source\PSoC5/PWM.c ****             #else
 301:Generated_Source\PSoC5/PWM.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM.c ****         }
 304:Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM.c **** 
 306:Generated_Source\PSoC5/PWM.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM.c **** 
 308:Generated_Source\PSoC5/PWM.c ****     #if (PWM_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM.c **** 
 310:Generated_Source\PSoC5/PWM.c **** 
 311:Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_SetCompareMode1
 313:Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM.c ****         *
 315:Generated_Source\PSoC5/PWM.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM.c ****         *
 318:Generated_Source\PSoC5/PWM.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM.c ****         *
 322:Generated_Source\PSoC5/PWM.c ****         * Return:
 323:Generated_Source\PSoC5/PWM.c ****         *  None
 324:Generated_Source\PSoC5/PWM.c ****         *
 325:Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM.c ****         void PWM_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM.c ****         {
 328:Generated_Source\PSoC5/PWM.c ****             #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIFT)) 
 330:Generated_Source\PSoC5/PWM.c ****                                            PWM_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM.c ****             #else
 332:Generated_Source\PSoC5/PWM.c ****                 uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM.c ****             #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM.c **** 
 335:Generated_Source\PSoC5/PWM.c ****             #if (PWM_UseControl)
 336:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UseControl) */
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 8


 339:Generated_Source\PSoC5/PWM.c ****         }
 340:Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM.c **** 
 342:Generated_Source\PSoC5/PWM.c **** #if (PWM_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM.c **** 
 344:Generated_Source\PSoC5/PWM.c **** 
 345:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_SetCompareMode2
 347:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM.c ****     *
 349:Generated_Source\PSoC5/PWM.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM.c ****     *
 352:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM.c ****     *
 356:Generated_Source\PSoC5/PWM.c ****     * Return:
 357:Generated_Source\PSoC5/PWM.c ****     *  None
 358:Generated_Source\PSoC5/PWM.c ****     *
 359:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM.c ****     void PWM_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM.c ****     {
 362:Generated_Source\PSoC5/PWM.c **** 
 363:Generated_Source\PSoC5/PWM.c ****         #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/PWM.c ****                                                  PWM_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM.c ****         #else
 367:Generated_Source\PSoC5/PWM.c ****             uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM.c ****         #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM.c **** 
 370:Generated_Source\PSoC5/PWM.c ****         #if (PWM_UseControl)
 371:Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseControl) */
 374:Generated_Source\PSoC5/PWM.c ****     }
 375:Generated_Source\PSoC5/PWM.c ****     #endif /*PWM_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM.c **** 
 377:Generated_Source\PSoC5/PWM.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM.c **** 
 379:Generated_Source\PSoC5/PWM.c **** 
 380:Generated_Source\PSoC5/PWM.c **** #if (!PWM_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM.c **** 
 382:Generated_Source\PSoC5/PWM.c **** 
 383:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCounter
 385:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM.c ****     *
 387:Generated_Source\PSoC5/PWM.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM.c ****     *
 393:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM.c ****     *
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 9


 396:Generated_Source\PSoC5/PWM.c ****     * Return:
 397:Generated_Source\PSoC5/PWM.c ****     *  None
 398:Generated_Source\PSoC5/PWM.c ****     *
 399:Generated_Source\PSoC5/PWM.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM.c ****     *
 402:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCounter(uint8 counter) \
 404:Generated_Source\PSoC5/PWM.c ****                                        
 405:Generated_Source\PSoC5/PWM.c ****     {
  62              		.loc 1 405 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67              	.LVL0:
 406:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_COUNTER_LSB_PTR, counter);
  68              		.loc 1 406 0
  69 0000 014B     		ldr	r3, .L4
  70 0002 1870     		strb	r0, [r3]
  71 0004 7047     		bx	lr
  72              	.L5:
  73 0006 00BF     		.align	2
  74              	.L4:
  75 0008 08640040 		.word	1073767432
  76              		.cfi_endproc
  77              	.LFE4:
  78              		.size	PWM_WriteCounter, .-PWM_WriteCounter
  79              		.section	.text.PWM_ReadCounter,"ax",%progbits
  80              		.align	2
  81              		.global	PWM_ReadCounter
  82              		.thumb
  83              		.thumb_func
  84              		.type	PWM_ReadCounter, %function
  85              	PWM_ReadCounter:
  86              	.LFB5:
 407:Generated_Source\PSoC5/PWM.c ****     }
 408:Generated_Source\PSoC5/PWM.c **** 
 409:Generated_Source\PSoC5/PWM.c **** 
 410:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCounter
 412:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM.c ****     *
 414:Generated_Source\PSoC5/PWM.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM.c ****     *
 418:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM.c ****     *  None
 420:Generated_Source\PSoC5/PWM.c ****     *
 421:Generated_Source\PSoC5/PWM.c ****     * Return:
 422:Generated_Source\PSoC5/PWM.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM.c ****     *
 424:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM.c ****     {
  87              		.loc 1 426 0
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 10


  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
 427:Generated_Source\PSoC5/PWM.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM.c ****           (void)CY_GET_REG8(PWM_COUNTERCAP_LSB_PTR_8BIT);
  92              		.loc 1 430 0
  93 0000 024B     		ldr	r3, .L7
  94 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:Generated_Source\PSoC5/PWM.c **** 
 432:Generated_Source\PSoC5/PWM.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
  95              		.loc 1 433 0
  96 0004 024B     		ldr	r3, .L7+4
  97 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 434:Generated_Source\PSoC5/PWM.c ****     }
  98              		.loc 1 434 0
  99 0008 7047     		bx	lr
 100              	.L8:
 101 000a 00BF     		.align	2
 102              	.L7:
 103 000c 18640040 		.word	1073767448
 104 0010 58640040 		.word	1073767512
 105              		.cfi_endproc
 106              	.LFE5:
 107              		.size	PWM_ReadCounter, .-PWM_ReadCounter
 108              		.section	.text.PWM_WritePeriod,"ax",%progbits
 109              		.align	2
 110              		.global	PWM_WritePeriod
 111              		.thumb
 112              		.thumb_func
 113              		.type	PWM_WritePeriod, %function
 114              	PWM_WritePeriod:
 115              	.LFB7:
 435:Generated_Source\PSoC5/PWM.c **** 
 436:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseStatus)
 437:Generated_Source\PSoC5/PWM.c **** 
 438:Generated_Source\PSoC5/PWM.c **** 
 439:Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_ClearFIFO
 441:Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM.c ****         *
 443:Generated_Source\PSoC5/PWM.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM.c ****         *
 446:Generated_Source\PSoC5/PWM.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM.c ****         *  None
 448:Generated_Source\PSoC5/PWM.c ****         *
 449:Generated_Source\PSoC5/PWM.c ****         * Return:
 450:Generated_Source\PSoC5/PWM.c ****         *  None
 451:Generated_Source\PSoC5/PWM.c ****         *
 452:Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM.c ****         void PWM_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM.c ****         {
 455:Generated_Source\PSoC5/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 11


 456:Generated_Source\PSoC5/PWM.c ****             {
 457:Generated_Source\PSoC5/PWM.c ****                 (void)PWM_ReadCapture();
 458:Generated_Source\PSoC5/PWM.c ****             }
 459:Generated_Source\PSoC5/PWM.c ****         }
 460:Generated_Source\PSoC5/PWM.c **** 
 461:Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_UseStatus */
 462:Generated_Source\PSoC5/PWM.c **** 
 463:Generated_Source\PSoC5/PWM.c **** #endif /* !PWM_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM.c **** 
 465:Generated_Source\PSoC5/PWM.c **** 
 466:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_WritePeriod
 468:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM.c **** *
 470:Generated_Source\PSoC5/PWM.c **** * Summary:
 471:Generated_Source\PSoC5/PWM.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM.c **** *
 474:Generated_Source\PSoC5/PWM.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM.c **** *
 478:Generated_Source\PSoC5/PWM.c **** * Return:
 479:Generated_Source\PSoC5/PWM.c **** *  None
 480:Generated_Source\PSoC5/PWM.c **** *
 481:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM.c **** void PWM_WritePeriod(uint8 period) 
 483:Generated_Source\PSoC5/PWM.c **** {
 116              		.loc 1 483 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              	.LVL1:
 484:Generated_Source\PSoC5/PWM.c ****     #if(PWM_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG16(PWM_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM.c ****     #else
 487:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_PERIOD_LSB_PTR, period);
 122              		.loc 1 487 0
 123 0000 014B     		ldr	r3, .L10
 124 0002 1870     		strb	r0, [r3]
 125 0004 7047     		bx	lr
 126              	.L11:
 127 0006 00BF     		.align	2
 128              	.L10:
 129 0008 48640040 		.word	1073767496
 130              		.cfi_endproc
 131              	.LFE7:
 132              		.size	PWM_WritePeriod, .-PWM_WritePeriod
 133              		.section	.text.PWM_WriteCompare1,"ax",%progbits
 134              		.align	2
 135              		.global	PWM_WriteCompare1
 136              		.thumb
 137              		.thumb_func
 138              		.type	PWM_WriteCompare1, %function
 139              	PWM_WriteCompare1:
 140              	.LFB8:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 12


 488:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM.c **** }
 490:Generated_Source\PSoC5/PWM.c **** 
 491:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM.c **** 
 493:Generated_Source\PSoC5/PWM.c **** 
 494:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare
 496:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM.c ****     *
 498:Generated_Source\PSoC5/PWM.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM.c ****     *
 505:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM.c ****     *
 508:Generated_Source\PSoC5/PWM.c ****     * Return:
 509:Generated_Source\PSoC5/PWM.c ****     *  None
 510:Generated_Source\PSoC5/PWM.c ****     *
 511:Generated_Source\PSoC5/PWM.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM.c ****     *
 515:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare(uint8 compare) \
 517:Generated_Source\PSoC5/PWM.c ****                                        
 518:Generated_Source\PSoC5/PWM.c ****     {
 519:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/PWM.c ****         #else
 522:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 523:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM.c **** 
 525:Generated_Source\PSoC5/PWM.c ****         #if (PWM_PWMMode == PWM__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM.c ****             #if(PWM_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM.c ****                 CY_SET_REG16(PWM_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM.c ****             #else
 529:Generated_Source\PSoC5/PWM.c ****                 CY_SET_REG8(PWM_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_PWMMode == PWM__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM.c ****     }
 533:Generated_Source\PSoC5/PWM.c **** 
 534:Generated_Source\PSoC5/PWM.c **** 
 535:Generated_Source\PSoC5/PWM.c **** #else
 536:Generated_Source\PSoC5/PWM.c **** 
 537:Generated_Source\PSoC5/PWM.c **** 
 538:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare1
 540:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM.c ****     *
 542:Generated_Source\PSoC5/PWM.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 13


 545:Generated_Source\PSoC5/PWM.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM.c ****     *
 548:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM.c ****     *
 551:Generated_Source\PSoC5/PWM.c ****     * Return:
 552:Generated_Source\PSoC5/PWM.c ****     *  None
 553:Generated_Source\PSoC5/PWM.c ****     *
 554:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare1(uint8 compare) \
 556:Generated_Source\PSoC5/PWM.c ****                                         
 557:Generated_Source\PSoC5/PWM.c ****     {
 141              		.loc 1 557 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146              	.LVL2:
 558:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 559:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM.c ****         #else
 561:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 147              		.loc 1 561 0
 148 0000 014B     		ldr	r3, .L13
 149 0002 1870     		strb	r0, [r3]
 150 0004 7047     		bx	lr
 151              	.L14:
 152 0006 00BF     		.align	2
 153              	.L13:
 154 0008 28640040 		.word	1073767464
 155              		.cfi_endproc
 156              	.LFE8:
 157              		.size	PWM_WriteCompare1, .-PWM_WriteCompare1
 158              		.section	.text.PWM_WriteCompare2,"ax",%progbits
 159              		.align	2
 160              		.global	PWM_WriteCompare2
 161              		.thumb
 162              		.thumb_func
 163              		.type	PWM_WriteCompare2, %function
 164              	PWM_WriteCompare2:
 165              	.LFB9:
 562:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM.c ****     }
 564:Generated_Source\PSoC5/PWM.c **** 
 565:Generated_Source\PSoC5/PWM.c **** 
 566:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare2
 568:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM.c ****     *
 570:Generated_Source\PSoC5/PWM.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM.c ****     *
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 14


 577:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM.c ****     *
 580:Generated_Source\PSoC5/PWM.c ****     * Return:
 581:Generated_Source\PSoC5/PWM.c ****     *  None
 582:Generated_Source\PSoC5/PWM.c ****     *
 583:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare2(uint8 compare) \
 585:Generated_Source\PSoC5/PWM.c ****                                         
 586:Generated_Source\PSoC5/PWM.c ****     {
 166              		.loc 1 586 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 171              	.LVL3:
 587:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM.c ****         #else
 590:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_COMPARE2_LSB_PTR, compare);
 172              		.loc 1 590 0
 173 0000 014B     		ldr	r3, .L16
 174 0002 1870     		strb	r0, [r3]
 175 0004 7047     		bx	lr
 176              	.L17:
 177 0006 00BF     		.align	2
 178              	.L16:
 179 0008 38640040 		.word	1073767480
 180              		.cfi_endproc
 181              	.LFE9:
 182              		.size	PWM_WriteCompare2, .-PWM_WriteCompare2
 183              		.section	.text.PWM_SetInterruptMode,"ax",%progbits
 184              		.align	2
 185              		.global	PWM_SetInterruptMode
 186              		.thumb
 187              		.thumb_func
 188              		.type	PWM_SetInterruptMode, %function
 189              	PWM_SetInterruptMode:
 190              	.LFB10:
 591:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM.c ****     }
 593:Generated_Source\PSoC5/PWM.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM.c **** 
 595:Generated_Source\PSoC5/PWM.c **** #if (PWM_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM.c **** 
 597:Generated_Source\PSoC5/PWM.c **** 
 598:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteDeadTime
 600:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM.c ****     *
 602:Generated_Source\PSoC5/PWM.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM.c ****     *
 605:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM.c ****     *
 608:Generated_Source\PSoC5/PWM.c ****     * Return:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 15


 609:Generated_Source\PSoC5/PWM.c ****     *  None
 610:Generated_Source\PSoC5/PWM.c ****     *
 611:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM.c ****     {
 614:Generated_Source\PSoC5/PWM.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM.c ****         #if(!PWM_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/PWM.c ****         #else
 618:Generated_Source\PSoC5/PWM.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM.c ****             PWM_DEADBAND_COUNT &= ((uint8)(~PWM_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM.c **** 
 622:Generated_Source\PSoC5/PWM.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM.c ****                 PWM_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_DEADBAND_COUNT_SHIFT)) &
 625:Generated_Source\PSoC5/PWM.c ****                                                     PWM_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM.c ****             #else
 627:Generated_Source\PSoC5/PWM.c ****                 PWM_DEADBAND_COUNT |= deadtime & PWM_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM.c **** 
 630:Generated_Source\PSoC5/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM.c ****     }
 632:Generated_Source\PSoC5/PWM.c **** 
 633:Generated_Source\PSoC5/PWM.c **** 
 634:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadDeadTime
 636:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM.c ****     *
 638:Generated_Source\PSoC5/PWM.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM.c ****     *
 641:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM.c ****     *  None
 643:Generated_Source\PSoC5/PWM.c ****     *
 644:Generated_Source\PSoC5/PWM.c ****     * Return:
 645:Generated_Source\PSoC5/PWM.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM.c ****     *
 647:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM.c ****     {
 650:Generated_Source\PSoC5/PWM.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM.c ****         #if(!PWM_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM.c ****             return (CY_GET_REG8(PWM_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM.c ****         #else
 654:Generated_Source\PSoC5/PWM.c **** 
 655:Generated_Source\PSoC5/PWM.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM.c ****                 return ((uint8)(((uint8)(PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/PWM.c ****                                                                            PWM_DEADBAND_COUNT_SHIFT
 659:Generated_Source\PSoC5/PWM.c ****             #else
 660:Generated_Source\PSoC5/PWM.c ****                 return (PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM.c ****     }
 664:Generated_Source\PSoC5/PWM.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 16


 666:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseStatus || PWM_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM.c **** 
 668:Generated_Source\PSoC5/PWM.c **** 
 669:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_SetInterruptMode
 671:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM.c ****     *
 673:Generated_Source\PSoC5/PWM.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM.c ****     *
 677:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM.c ****     *
 680:Generated_Source\PSoC5/PWM.c ****     * Return:
 681:Generated_Source\PSoC5/PWM.c ****     *  None
 682:Generated_Source\PSoC5/PWM.c ****     *
 683:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM.c ****     void PWM_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM.c ****     {
 191              		.loc 1 685 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196              	.LVL4:
 686:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_STATUS_MASK_PTR, interruptMode);
 197              		.loc 1 686 0
 198 0000 014B     		ldr	r3, .L19
 199 0002 1870     		strb	r0, [r3]
 200 0004 7047     		bx	lr
 201              	.L20:
 202 0006 00BF     		.align	2
 203              	.L19:
 204 0008 88640040 		.word	1073767560
 205              		.cfi_endproc
 206              	.LFE10:
 207              		.size	PWM_SetInterruptMode, .-PWM_SetInterruptMode
 208              		.section	.text.PWM_ReadStatusRegister,"ax",%progbits
 209              		.align	2
 210              		.global	PWM_ReadStatusRegister
 211              		.thumb
 212              		.thumb_func
 213              		.type	PWM_ReadStatusRegister, %function
 214              	PWM_ReadStatusRegister:
 215              	.LFB11:
 687:Generated_Source\PSoC5/PWM.c ****     }
 688:Generated_Source\PSoC5/PWM.c **** 
 689:Generated_Source\PSoC5/PWM.c **** 
 690:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM.c ****     *
 694:Generated_Source\PSoC5/PWM.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM.c ****     *
 697:Generated_Source\PSoC5/PWM.c ****     * Parameters:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 17


 698:Generated_Source\PSoC5/PWM.c ****     *  None
 699:Generated_Source\PSoC5/PWM.c ****     *
 700:Generated_Source\PSoC5/PWM.c ****     * Return:
 701:Generated_Source\PSoC5/PWM.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM.c ****     *
 710:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/PWM.c ****     {
 216              		.loc 1 712 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 713:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_STATUS_PTR));
 221              		.loc 1 713 0
 222 0000 014B     		ldr	r3, .L22
 223 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:Generated_Source\PSoC5/PWM.c ****     }
 224              		.loc 1 714 0
 225 0004 7047     		bx	lr
 226              	.L23:
 227 0006 00BF     		.align	2
 228              	.L22:
 229 0008 68640040 		.word	1073767528
 230              		.cfi_endproc
 231              	.LFE11:
 232              		.size	PWM_ReadStatusRegister, .-PWM_ReadStatusRegister
 233              		.section	.text.PWM_ReadCapture,"ax",%progbits
 234              		.align	2
 235              		.global	PWM_ReadCapture
 236              		.thumb
 237              		.thumb_func
 238              		.type	PWM_ReadCapture, %function
 239              	PWM_ReadCapture:
 240              	.LFB12:
 715:Generated_Source\PSoC5/PWM.c **** 
 716:Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM.c **** 
 718:Generated_Source\PSoC5/PWM.c **** 
 719:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseControl)
 720:Generated_Source\PSoC5/PWM.c **** 
 721:Generated_Source\PSoC5/PWM.c **** 
 722:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadControlRegister
 724:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM.c ****     *
 726:Generated_Source\PSoC5/PWM.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM.c ****     *
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 18


 730:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM.c ****     *  None
 732:Generated_Source\PSoC5/PWM.c ****     *
 733:Generated_Source\PSoC5/PWM.c ****     * Return:
 734:Generated_Source\PSoC5/PWM.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM.c ****     *
 736:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM.c ****     {
 739:Generated_Source\PSoC5/PWM.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM.c **** 
 741:Generated_Source\PSoC5/PWM.c ****         result = CY_GET_REG8(PWM_CONTROL_PTR);
 742:Generated_Source\PSoC5/PWM.c ****         return (result);
 743:Generated_Source\PSoC5/PWM.c ****     }
 744:Generated_Source\PSoC5/PWM.c **** 
 745:Generated_Source\PSoC5/PWM.c **** 
 746:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteControlRegister
 748:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM.c ****     *
 750:Generated_Source\PSoC5/PWM.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM.c ****     *
 754:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 755:Generated_Source\PSoC5/PWM.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/PWM.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM.c ****     *
 761:Generated_Source\PSoC5/PWM.c ****     * Return:
 762:Generated_Source\PSoC5/PWM.c ****     *  None
 763:Generated_Source\PSoC5/PWM.c ****     *
 764:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM.c ****     {
 767:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_CONTROL_PTR, control);
 768:Generated_Source\PSoC5/PWM.c ****     }
 769:Generated_Source\PSoC5/PWM.c **** 
 770:Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseControl) */
 771:Generated_Source\PSoC5/PWM.c **** 
 772:Generated_Source\PSoC5/PWM.c **** 
 773:Generated_Source\PSoC5/PWM.c **** #if (!PWM_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM.c **** 
 775:Generated_Source\PSoC5/PWM.c **** 
 776:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCapture
 778:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM.c ****     *
 780:Generated_Source\PSoC5/PWM.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM.c ****     *
 783:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM.c ****     *  None
 785:Generated_Source\PSoC5/PWM.c ****     *
 786:Generated_Source\PSoC5/PWM.c ****     * Return:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 19


 787:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM.c ****     *
 789:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM.c ****     {
 241              		.loc 1 791 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 792:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
 246              		.loc 1 792 0
 247 0000 014B     		ldr	r3, .L25
 248 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 793:Generated_Source\PSoC5/PWM.c ****     }
 249              		.loc 1 793 0
 250 0004 7047     		bx	lr
 251              	.L26:
 252 0006 00BF     		.align	2
 253              	.L25:
 254 0008 58640040 		.word	1073767512
 255              		.cfi_endproc
 256              	.LFE12:
 257              		.size	PWM_ReadCapture, .-PWM_ReadCapture
 258              		.section	.text.PWM_ClearFIFO,"ax",%progbits
 259              		.align	2
 260              		.global	PWM_ClearFIFO
 261              		.thumb
 262              		.thumb_func
 263              		.type	PWM_ClearFIFO, %function
 264              	PWM_ClearFIFO:
 265              	.LFB6:
 454:Generated_Source\PSoC5/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
 266              		.loc 1 454 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270 0000 08B5     		push	{r3, lr}
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 3, -8
 273              		.cfi_offset 14, -4
 455:Generated_Source\PSoC5/PWM.c ****             {
 274              		.loc 1 455 0
 275 0002 01E0     		b	.L28
 276              	.L29:
 457:Generated_Source\PSoC5/PWM.c ****             }
 277              		.loc 1 457 0
 278 0004 FFF7FEFF 		bl	PWM_ReadCapture
 279              	.LVL5:
 280              	.L28:
 455:Generated_Source\PSoC5/PWM.c ****             {
 281              		.loc 1 455 0
 282 0008 FFF7FEFF 		bl	PWM_ReadStatusRegister
 283              	.LVL6:
 284 000c 10F0100F 		tst	r0, #16
 285 0010 F8D1     		bne	.L29
 459:Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 20


 286              		.loc 1 459 0
 287 0012 08BD     		pop	{r3, pc}
 288              		.cfi_endproc
 289              	.LFE6:
 290              		.size	PWM_ClearFIFO, .-PWM_ClearFIFO
 291              		.section	.text.PWM_Init,"ax",%progbits
 292              		.align	2
 293              		.global	PWM_Init
 294              		.thumb
 295              		.thumb_func
 296              		.type	PWM_Init, %function
 297              	PWM_Init:
 298              	.LFB1:
  85:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction || PWM_UseControl)
 299              		.loc 1 85 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303 0000 10B5     		push	{r4, lr}
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 4, -8
 306              		.cfi_offset 14, -4
 126:Generated_Source\PSoC5/PWM.c ****         #else /* (PWM_Resolution == 16)*/
 307              		.loc 1 126 0
 308 0002 0F4C     		ldr	r4, .L33
 309 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 310 0006 43F00103 		orr	r3, r3, #1
 311 000a 2370     		strb	r3, [r4]
 133:Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
 312              		.loc 1 133 0
 313 000c FF20     		movs	r0, #255
 314 000e FFF7FEFF 		bl	PWM_WriteCounter
 315              	.LVL7:
 136:Generated_Source\PSoC5/PWM.c **** 
 316              		.loc 1 136 0
 317 0012 FF20     		movs	r0, #255
 318 0014 FFF7FEFF 		bl	PWM_WritePeriod
 319              	.LVL8:
 141:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare2(PWM_INIT_COMPARE_VALUE2);
 320              		.loc 1 141 0
 321 0018 7F20     		movs	r0, #127
 322 001a FFF7FEFF 		bl	PWM_WriteCompare1
 323              	.LVL9:
 142:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseOneCompareMode) */
 324              		.loc 1 142 0
 325 001e 3F20     		movs	r0, #63
 326 0020 FFF7FEFF 		bl	PWM_WriteCompare2
 327              	.LVL10:
 154:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 328              		.loc 1 154 0
 329 0024 0020     		movs	r0, #0
 330 0026 FFF7FEFF 		bl	PWM_SetInterruptMode
 331              	.LVL11:
 167:Generated_Source\PSoC5/PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 332              		.loc 1 167 0
 333 002a FFF7FEFF 		bl	CyEnterCriticalSection
 334              	.LVL12:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 21


 169:Generated_Source\PSoC5/PWM.c **** 
 335              		.loc 1 169 0
 336 002e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 337 0030 43F01003 		orr	r3, r3, #16
 338 0034 2370     		strb	r3, [r4]
 172:Generated_Source\PSoC5/PWM.c **** 
 339              		.loc 1 172 0
 340 0036 FFF7FEFF 		bl	CyExitCriticalSection
 341              	.LVL13:
 176:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
 342              		.loc 1 176 0
 343 003a FFF7FEFF 		bl	PWM_ClearFIFO
 344              	.LVL14:
 345 003e 10BD     		pop	{r4, pc}
 346              	.L34:
 347              		.align	2
 348              	.L33:
 349 0040 98640040 		.word	1073767576
 350              		.cfi_endproc
 351              	.LFE1:
 352              		.size	PWM_Init, .-PWM_Init
 353              		.section	.text.PWM_Start,"ax",%progbits
 354              		.align	2
 355              		.global	PWM_Start
 356              		.thumb
 357              		.thumb_func
 358              		.type	PWM_Start, %function
 359              	PWM_Start:
 360              	.LFB0:
  56:Generated_Source\PSoC5/PWM.c ****     /* If not Initialized then initialize all required hardware and software */
 361              		.loc 1 56 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365 0000 08B5     		push	{r3, lr}
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 3, -8
 368              		.cfi_offset 14, -4
  58:Generated_Source\PSoC5/PWM.c ****     {
 369              		.loc 1 58 0
 370 0002 044B     		ldr	r3, .L38
 371 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 0006 23B9     		cbnz	r3, .L35
  60:Generated_Source\PSoC5/PWM.c ****         PWM_initVar = 1u;
 373              		.loc 1 60 0
 374 0008 FFF7FEFF 		bl	PWM_Init
 375              	.LVL15:
  61:Generated_Source\PSoC5/PWM.c ****     }
 376              		.loc 1 61 0
 377 000c 0122     		movs	r2, #1
 378 000e 014B     		ldr	r3, .L38
 379 0010 1A70     		strb	r2, [r3]
 380              	.L35:
 381 0012 08BD     		pop	{r3, pc}
 382              	.L39:
 383              		.align	2
 384              	.L38:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 22


 385 0014 00000000 		.word	.LANCHOR0
 386              		.cfi_endproc
 387              	.LFE0:
 388              		.size	PWM_Start, .-PWM_Start
 389              		.section	.text.PWM_ReadCompare1,"ax",%progbits
 390              		.align	2
 391              		.global	PWM_ReadCompare1
 392              		.thumb
 393              		.thumb_func
 394              		.type	PWM_ReadCompare1, %function
 395              	PWM_ReadCompare1:
 396              	.LFB13:
 794:Generated_Source\PSoC5/PWM.c **** 
 795:Generated_Source\PSoC5/PWM.c **** #endif /* (!PWM_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM.c **** 
 797:Generated_Source\PSoC5/PWM.c **** 
 798:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM.c **** 
 800:Generated_Source\PSoC5/PWM.c **** 
 801:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare
 803:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM.c ****     *
 805:Generated_Source\PSoC5/PWM.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM.c ****     *
 809:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM.c ****     *  None
 811:Generated_Source\PSoC5/PWM.c ****     *
 812:Generated_Source\PSoC5/PWM.c ****     * Return:
 813:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM.c ****     *
 815:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM.c ****     {
 818:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM.c ****             return ((uint8)CY_GET_REG16(PWM_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM.c ****         #else
 821:Generated_Source\PSoC5/PWM.c ****             return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 822:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM.c ****     }
 824:Generated_Source\PSoC5/PWM.c **** 
 825:Generated_Source\PSoC5/PWM.c **** #else
 826:Generated_Source\PSoC5/PWM.c **** 
 827:Generated_Source\PSoC5/PWM.c **** 
 828:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare1
 830:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM.c ****     *
 832:Generated_Source\PSoC5/PWM.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM.c ****     *
 835:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM.c ****     *  None
 837:Generated_Source\PSoC5/PWM.c ****     *
 838:Generated_Source\PSoC5/PWM.c ****     * Return:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 23


 839:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM.c ****     *
 841:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM.c ****     {
 397              		.loc 1 843 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 0, uses_anonymous_args = 0
 401              		@ link register save eliminated.
 844:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 402              		.loc 1 844 0
 403 0000 014B     		ldr	r3, .L41
 404 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 845:Generated_Source\PSoC5/PWM.c ****     }
 405              		.loc 1 845 0
 406 0004 7047     		bx	lr
 407              	.L42:
 408 0006 00BF     		.align	2
 409              	.L41:
 410 0008 28640040 		.word	1073767464
 411              		.cfi_endproc
 412              	.LFE13:
 413              		.size	PWM_ReadCompare1, .-PWM_ReadCompare1
 414              		.section	.text.PWM_ReadCompare2,"ax",%progbits
 415              		.align	2
 416              		.global	PWM_ReadCompare2
 417              		.thumb
 418              		.thumb_func
 419              		.type	PWM_ReadCompare2, %function
 420              	PWM_ReadCompare2:
 421              	.LFB14:
 846:Generated_Source\PSoC5/PWM.c **** 
 847:Generated_Source\PSoC5/PWM.c **** 
 848:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare2
 850:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM.c ****     *
 852:Generated_Source\PSoC5/PWM.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM.c ****     *
 855:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM.c ****     *  None
 857:Generated_Source\PSoC5/PWM.c ****     *
 858:Generated_Source\PSoC5/PWM.c ****     * Return:
 859:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM.c ****     *
 861:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM.c ****     {
 422              		.loc 1 863 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              		@ link register save eliminated.
 864:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE2_LSB_PTR));
 427              		.loc 1 864 0
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 24


 428 0000 014B     		ldr	r3, .L44
 429 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 865:Generated_Source\PSoC5/PWM.c ****     }
 430              		.loc 1 865 0
 431 0004 7047     		bx	lr
 432              	.L45:
 433 0006 00BF     		.align	2
 434              	.L44:
 435 0008 38640040 		.word	1073767480
 436              		.cfi_endproc
 437              	.LFE14:
 438              		.size	PWM_ReadCompare2, .-PWM_ReadCompare2
 439              		.section	.text.PWM_ReadPeriod,"ax",%progbits
 440              		.align	2
 441              		.global	PWM_ReadPeriod
 442              		.thumb
 443              		.thumb_func
 444              		.type	PWM_ReadPeriod, %function
 445              	PWM_ReadPeriod:
 446              	.LFB15:
 866:Generated_Source\PSoC5/PWM.c **** 
 867:Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM.c **** 
 869:Generated_Source\PSoC5/PWM.c **** 
 870:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_ReadPeriod
 872:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM.c **** *
 874:Generated_Source\PSoC5/PWM.c **** * Summary:
 875:Generated_Source\PSoC5/PWM.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM.c **** *
 877:Generated_Source\PSoC5/PWM.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM.c **** *  None
 879:Generated_Source\PSoC5/PWM.c **** *
 880:Generated_Source\PSoC5/PWM.c **** * Return:
 881:Generated_Source\PSoC5/PWM.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM.c **** *
 883:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM.c **** uint8 PWM_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM.c **** {
 447              		.loc 1 885 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 886:Generated_Source\PSoC5/PWM.c ****     #if(PWM_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM.c ****         return ((uint8)CY_GET_REG16(PWM_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM.c ****     #else
 889:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_PERIOD_LSB_PTR));
 452              		.loc 1 889 0
 453 0000 014B     		ldr	r3, .L47
 454 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 890:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM.c **** }
 455              		.loc 1 891 0
 456 0004 7047     		bx	lr
 457              	.L48:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 25


 458 0006 00BF     		.align	2
 459              	.L47:
 460 0008 48640040 		.word	1073767496
 461              		.cfi_endproc
 462              	.LFE15:
 463              		.size	PWM_ReadPeriod, .-PWM_ReadPeriod
 464              		.global	PWM_initVar
 465              		.bss
 466              		.set	.LANCHOR0,. + 0
 467              		.type	PWM_initVar, %object
 468              		.size	PWM_initVar, 1
 469              	PWM_initVar:
 470 0000 00       		.space	1
 471              		.text
 472              	.Letext0:
 473              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 474              		.file 3 "Generated_Source\\PSoC5\\CyLib.h"
 475              		.section	.debug_info,"",%progbits
 476              	.Ldebug_info0:
 477 0000 19030000 		.4byte	0x319
 478 0004 0400     		.2byte	0x4
 479 0006 00000000 		.4byte	.Ldebug_abbrev0
 480 000a 04       		.byte	0x4
 481 000b 01       		.uleb128 0x1
 482 000c 75000000 		.4byte	.LASF38
 483 0010 0C       		.byte	0xc
 484 0011 F7020000 		.4byte	.LASF39
 485 0015 00020000 		.4byte	.LASF40
 486 0019 00000000 		.4byte	.Ldebug_ranges0+0
 487 001d 00000000 		.4byte	0
 488 0021 00000000 		.4byte	.Ldebug_line0
 489 0025 02       		.uleb128 0x2
 490 0026 01       		.byte	0x1
 491 0027 06       		.byte	0x6
 492 0028 C1020000 		.4byte	.LASF0
 493 002c 02       		.uleb128 0x2
 494 002d 01       		.byte	0x1
 495 002e 08       		.byte	0x8
 496 002f 67000000 		.4byte	.LASF1
 497 0033 02       		.uleb128 0x2
 498 0034 02       		.byte	0x2
 499 0035 05       		.byte	0x5
 500 0036 6D020000 		.4byte	.LASF2
 501 003a 02       		.uleb128 0x2
 502 003b 02       		.byte	0x2
 503 003c 07       		.byte	0x7
 504 003d 1F000000 		.4byte	.LASF3
 505 0041 02       		.uleb128 0x2
 506 0042 04       		.byte	0x4
 507 0043 05       		.byte	0x5
 508 0044 91020000 		.4byte	.LASF4
 509 0048 02       		.uleb128 0x2
 510 0049 04       		.byte	0x4
 511 004a 07       		.byte	0x7
 512 004b 08010000 		.4byte	.LASF5
 513 004f 02       		.uleb128 0x2
 514 0050 08       		.byte	0x8
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 26


 515 0051 05       		.byte	0x5
 516 0052 E4010000 		.4byte	.LASF6
 517 0056 02       		.uleb128 0x2
 518 0057 08       		.byte	0x8
 519 0058 07       		.byte	0x7
 520 0059 50000000 		.4byte	.LASF7
 521 005d 03       		.uleb128 0x3
 522 005e 04       		.byte	0x4
 523 005f 05       		.byte	0x5
 524 0060 696E7400 		.ascii	"int\000"
 525 0064 02       		.uleb128 0x2
 526 0065 04       		.byte	0x4
 527 0066 07       		.byte	0x7
 528 0067 63010000 		.4byte	.LASF8
 529 006b 04       		.uleb128 0x4
 530 006c 2A010000 		.4byte	.LASF12
 531 0070 02       		.byte	0x2
 532 0071 E401     		.2byte	0x1e4
 533 0073 2C000000 		.4byte	0x2c
 534 0077 02       		.uleb128 0x2
 535 0078 04       		.byte	0x4
 536 0079 04       		.byte	0x4
 537 007a 42000000 		.4byte	.LASF9
 538 007e 02       		.uleb128 0x2
 539 007f 08       		.byte	0x8
 540 0080 04       		.byte	0x4
 541 0081 30010000 		.4byte	.LASF10
 542 0085 02       		.uleb128 0x2
 543 0086 01       		.byte	0x1
 544 0087 08       		.byte	0x8
 545 0088 9A020000 		.4byte	.LASF11
 546 008c 04       		.uleb128 0x4
 547 008d 03010000 		.4byte	.LASF13
 548 0091 02       		.byte	0x2
 549 0092 8E02     		.2byte	0x28e
 550 0094 98000000 		.4byte	0x98
 551 0098 05       		.uleb128 0x5
 552 0099 6B000000 		.4byte	0x6b
 553 009d 02       		.uleb128 0x2
 554 009e 08       		.byte	0x8
 555 009f 04       		.byte	0x4
 556 00a0 BA010000 		.4byte	.LASF14
 557 00a4 02       		.uleb128 0x2
 558 00a5 04       		.byte	0x4
 559 00a6 07       		.byte	0x7
 560 00a7 DB010000 		.4byte	.LASF15
 561 00ab 06       		.uleb128 0x6
 562 00ac D5020000 		.4byte	.LASF16
 563 00b0 01       		.byte	0x1
 564 00b1 C7       		.byte	0xc7
 565 00b2 00000000 		.4byte	.LFB2
 566 00b6 02000000 		.4byte	.LFE2-.LFB2
 567 00ba 01       		.uleb128 0x1
 568 00bb 9C       		.byte	0x9c
 569 00bc 06       		.uleb128 0x6
 570 00bd 88020000 		.4byte	.LASF17
 571 00c1 01       		.byte	0x1
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 27


 572 00c2 E9       		.byte	0xe9
 573 00c3 00000000 		.4byte	.LFB3
 574 00c7 02000000 		.4byte	.LFE3-.LFB3
 575 00cb 01       		.uleb128 0x1
 576 00cc 9C       		.byte	0x9c
 577 00cd 07       		.uleb128 0x7
 578 00ce 77020000 		.4byte	.LASF18
 579 00d2 01       		.byte	0x1
 580 00d3 9301     		.2byte	0x193
 581 00d5 00000000 		.4byte	.LFB4
 582 00d9 0C000000 		.4byte	.LFE4-.LFB4
 583 00dd 01       		.uleb128 0x1
 584 00de 9C       		.byte	0x9c
 585 00df F2000000 		.4byte	0xf2
 586 00e3 08       		.uleb128 0x8
 587 00e4 48000000 		.4byte	.LASF20
 588 00e8 01       		.byte	0x1
 589 00e9 9301     		.2byte	0x193
 590 00eb 6B000000 		.4byte	0x6b
 591 00ef 01       		.uleb128 0x1
 592 00f0 50       		.byte	0x50
 593 00f1 00       		.byte	0
 594 00f2 09       		.uleb128 0x9
 595 00f3 1A010000 		.4byte	.LASF27
 596 00f7 01       		.byte	0x1
 597 00f8 A901     		.2byte	0x1a9
 598 00fa 6B000000 		.4byte	0x6b
 599 00fe 00000000 		.4byte	.LFB5
 600 0102 14000000 		.4byte	.LFE5-.LFB5
 601 0106 01       		.uleb128 0x1
 602 0107 9C       		.byte	0x9c
 603 0108 07       		.uleb128 0x7
 604 0109 AA010000 		.4byte	.LASF19
 605 010d 01       		.byte	0x1
 606 010e E201     		.2byte	0x1e2
 607 0110 00000000 		.4byte	.LFB7
 608 0114 0C000000 		.4byte	.LFE7-.LFB7
 609 0118 01       		.uleb128 0x1
 610 0119 9C       		.byte	0x9c
 611 011a 2D010000 		.4byte	0x12d
 612 011e 08       		.uleb128 0x8
 613 011f 0E000000 		.4byte	.LASF21
 614 0123 01       		.byte	0x1
 615 0124 E201     		.2byte	0x1e2
 616 0126 6B000000 		.4byte	0x6b
 617 012a 01       		.uleb128 0x1
 618 012b 50       		.byte	0x50
 619 012c 00       		.byte	0
 620 012d 07       		.uleb128 0x7
 621 012e 86010000 		.4byte	.LASF22
 622 0132 01       		.byte	0x1
 623 0133 2B02     		.2byte	0x22b
 624 0135 00000000 		.4byte	.LFB8
 625 0139 0C000000 		.4byte	.LFE8-.LFB8
 626 013d 01       		.uleb128 0x1
 627 013e 9C       		.byte	0x9c
 628 013f 52010000 		.4byte	0x152
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 28


 629 0143 08       		.uleb128 0x8
 630 0144 CD020000 		.4byte	.LASF23
 631 0148 01       		.byte	0x1
 632 0149 2B02     		.2byte	0x22b
 633 014b 6B000000 		.4byte	0x6b
 634 014f 01       		.uleb128 0x1
 635 0150 50       		.byte	0x50
 636 0151 00       		.byte	0
 637 0152 07       		.uleb128 0x7
 638 0153 98010000 		.4byte	.LASF24
 639 0157 01       		.byte	0x1
 640 0158 4802     		.2byte	0x248
 641 015a 00000000 		.4byte	.LFB9
 642 015e 0C000000 		.4byte	.LFE9-.LFB9
 643 0162 01       		.uleb128 0x1
 644 0163 9C       		.byte	0x9c
 645 0164 77010000 		.4byte	0x177
 646 0168 08       		.uleb128 0x8
 647 0169 CD020000 		.4byte	.LASF23
 648 016d 01       		.byte	0x1
 649 016e 4802     		.2byte	0x248
 650 0170 6B000000 		.4byte	0x6b
 651 0174 01       		.uleb128 0x1
 652 0175 50       		.byte	0x50
 653 0176 00       		.byte	0
 654 0177 07       		.uleb128 0x7
 655 0178 C6010000 		.4byte	.LASF25
 656 017c 01       		.byte	0x1
 657 017d AC02     		.2byte	0x2ac
 658 017f 00000000 		.4byte	.LFB10
 659 0183 0C000000 		.4byte	.LFE10-.LFB10
 660 0187 01       		.uleb128 0x1
 661 0188 9C       		.byte	0x9c
 662 0189 9C010000 		.4byte	0x19c
 663 018d 08       		.uleb128 0x8
 664 018e F2010000 		.4byte	.LASF26
 665 0192 01       		.byte	0x1
 666 0193 AC02     		.2byte	0x2ac
 667 0195 6B000000 		.4byte	0x6b
 668 0199 01       		.uleb128 0x1
 669 019a 50       		.byte	0x50
 670 019b 00       		.byte	0
 671 019c 09       		.uleb128 0x9
 672 019d E0020000 		.4byte	.LASF28
 673 01a1 01       		.byte	0x1
 674 01a2 C702     		.2byte	0x2c7
 675 01a4 6B000000 		.4byte	0x6b
 676 01a8 00000000 		.4byte	.LFB11
 677 01ac 0C000000 		.4byte	.LFE11-.LFB11
 678 01b0 01       		.uleb128 0x1
 679 01b1 9C       		.byte	0x9c
 680 01b2 09       		.uleb128 0x9
 681 01b3 32000000 		.4byte	.LASF29
 682 01b7 01       		.byte	0x1
 683 01b8 1603     		.2byte	0x316
 684 01ba 6B000000 		.4byte	0x6b
 685 01be 00000000 		.4byte	.LFB12
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 29


 686 01c2 0C000000 		.4byte	.LFE12-.LFB12
 687 01c6 01       		.uleb128 0x1
 688 01c7 9C       		.byte	0x9c
 689 01c8 07       		.uleb128 0x7
 690 01c9 00000000 		.4byte	.LASF30
 691 01cd 01       		.byte	0x1
 692 01ce C501     		.2byte	0x1c5
 693 01d0 00000000 		.4byte	.LFB6
 694 01d4 14000000 		.4byte	.LFE6-.LFB6
 695 01d8 01       		.uleb128 0x1
 696 01d9 9C       		.byte	0x9c
 697 01da F1010000 		.4byte	0x1f1
 698 01de 0A       		.uleb128 0xa
 699 01df 08000000 		.4byte	.LVL5
 700 01e3 B2010000 		.4byte	0x1b2
 701 01e7 0A       		.uleb128 0xa
 702 01e8 0C000000 		.4byte	.LVL6
 703 01ec 9C010000 		.4byte	0x19c
 704 01f0 00       		.byte	0
 705 01f1 0B       		.uleb128 0xb
 706 01f2 37010000 		.4byte	.LASF31
 707 01f6 01       		.byte	0x1
 708 01f7 54       		.byte	0x54
 709 01f8 00000000 		.4byte	.LFB1
 710 01fc 44000000 		.4byte	.LFE1-.LFB1
 711 0200 01       		.uleb128 0x1
 712 0201 9C       		.byte	0x9c
 713 0202 94020000 		.4byte	0x294
 714 0206 0C       		.uleb128 0xc
 715 0207 4B020000 		.4byte	.LASF41
 716 020b 01       		.byte	0x1
 717 020c 5D       		.byte	0x5d
 718 020d 6B000000 		.4byte	0x6b
 719 0211 00000000 		.4byte	.LLST0
 720 0215 0D       		.uleb128 0xd
 721 0216 12000000 		.4byte	.LVL7
 722 021a CD000000 		.4byte	0xcd
 723 021e 29020000 		.4byte	0x229
 724 0222 0E       		.uleb128 0xe
 725 0223 01       		.uleb128 0x1
 726 0224 50       		.byte	0x50
 727 0225 02       		.uleb128 0x2
 728 0226 09       		.byte	0x9
 729 0227 FF       		.byte	0xff
 730 0228 00       		.byte	0
 731 0229 0D       		.uleb128 0xd
 732 022a 18000000 		.4byte	.LVL8
 733 022e 08010000 		.4byte	0x108
 734 0232 3D020000 		.4byte	0x23d
 735 0236 0E       		.uleb128 0xe
 736 0237 01       		.uleb128 0x1
 737 0238 50       		.byte	0x50
 738 0239 02       		.uleb128 0x2
 739 023a 09       		.byte	0x9
 740 023b FF       		.byte	0xff
 741 023c 00       		.byte	0
 742 023d 0D       		.uleb128 0xd
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 30


 743 023e 1E000000 		.4byte	.LVL9
 744 0242 2D010000 		.4byte	0x12d
 745 0246 51020000 		.4byte	0x251
 746 024a 0E       		.uleb128 0xe
 747 024b 01       		.uleb128 0x1
 748 024c 50       		.byte	0x50
 749 024d 02       		.uleb128 0x2
 750 024e 08       		.byte	0x8
 751 024f 7F       		.byte	0x7f
 752 0250 00       		.byte	0
 753 0251 0D       		.uleb128 0xd
 754 0252 24000000 		.4byte	.LVL10
 755 0256 52010000 		.4byte	0x152
 756 025a 65020000 		.4byte	0x265
 757 025e 0E       		.uleb128 0xe
 758 025f 01       		.uleb128 0x1
 759 0260 50       		.byte	0x50
 760 0261 02       		.uleb128 0x2
 761 0262 08       		.byte	0x8
 762 0263 3F       		.byte	0x3f
 763 0264 00       		.byte	0
 764 0265 0D       		.uleb128 0xd
 765 0266 2A000000 		.4byte	.LVL11
 766 026a 77010000 		.4byte	0x177
 767 026e 78020000 		.4byte	0x278
 768 0272 0E       		.uleb128 0xe
 769 0273 01       		.uleb128 0x1
 770 0274 50       		.byte	0x50
 771 0275 01       		.uleb128 0x1
 772 0276 30       		.byte	0x30
 773 0277 00       		.byte	0
 774 0278 0A       		.uleb128 0xa
 775 0279 2E000000 		.4byte	.LVL12
 776 027d 06030000 		.4byte	0x306
 777 0281 0A       		.uleb128 0xa
 778 0282 3A000000 		.4byte	.LVL13
 779 0286 11030000 		.4byte	0x311
 780 028a 0A       		.uleb128 0xa
 781 028b 3E000000 		.4byte	.LVL14
 782 028f C8010000 		.4byte	0x1c8
 783 0293 00       		.byte	0
 784 0294 0B       		.uleb128 0xb
 785 0295 15000000 		.4byte	.LASF32
 786 0299 01       		.byte	0x1
 787 029a 37       		.byte	0x37
 788 029b 00000000 		.4byte	.LFB0
 789 029f 18000000 		.4byte	.LFE0-.LFB0
 790 02a3 01       		.uleb128 0x1
 791 02a4 9C       		.byte	0x9c
 792 02a5 B3020000 		.4byte	0x2b3
 793 02a9 0A       		.uleb128 0xa
 794 02aa 0C000000 		.4byte	.LVL15
 795 02ae F1010000 		.4byte	0x1f1
 796 02b2 00       		.byte	0
 797 02b3 09       		.uleb128 0x9
 798 02b4 9F020000 		.4byte	.LASF33
 799 02b8 01       		.byte	0x1
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 31


 800 02b9 4A03     		.2byte	0x34a
 801 02bb 6B000000 		.4byte	0x6b
 802 02bf 00000000 		.4byte	.LFB13
 803 02c3 0C000000 		.4byte	.LFE13-.LFB13
 804 02c7 01       		.uleb128 0x1
 805 02c8 9C       		.byte	0x9c
 806 02c9 09       		.uleb128 0x9
 807 02ca B0020000 		.4byte	.LASF34
 808 02ce 01       		.byte	0x1
 809 02cf 5E03     		.2byte	0x35e
 810 02d1 6B000000 		.4byte	0x6b
 811 02d5 00000000 		.4byte	.LFB14
 812 02d9 0C000000 		.4byte	.LFE14-.LFB14
 813 02dd 01       		.uleb128 0x1
 814 02de 9C       		.byte	0x9c
 815 02df 09       		.uleb128 0x9
 816 02e0 5E020000 		.4byte	.LASF35
 817 02e4 01       		.byte	0x1
 818 02e5 7403     		.2byte	0x374
 819 02e7 6B000000 		.4byte	0x6b
 820 02eb 00000000 		.4byte	.LFB15
 821 02ef 0C000000 		.4byte	.LFE15-.LFB15
 822 02f3 01       		.uleb128 0x1
 823 02f4 9C       		.byte	0x9c
 824 02f5 0F       		.uleb128 0xf
 825 02f6 40010000 		.4byte	.LASF42
 826 02fa 01       		.byte	0x1
 827 02fb 20       		.byte	0x20
 828 02fc 6B000000 		.4byte	0x6b
 829 0300 05       		.uleb128 0x5
 830 0301 03       		.byte	0x3
 831 0302 00000000 		.4byte	PWM_initVar
 832 0306 10       		.uleb128 0x10
 833 0307 4C010000 		.4byte	.LASF36
 834 030b 4C010000 		.4byte	.LASF36
 835 030f 03       		.byte	0x3
 836 0310 7D       		.byte	0x7d
 837 0311 10       		.uleb128 0x10
 838 0312 70010000 		.4byte	.LASF37
 839 0316 70010000 		.4byte	.LASF37
 840 031a 03       		.byte	0x3
 841 031b 7E       		.byte	0x7e
 842 031c 00       		.byte	0
 843              		.section	.debug_abbrev,"",%progbits
 844              	.Ldebug_abbrev0:
 845 0000 01       		.uleb128 0x1
 846 0001 11       		.uleb128 0x11
 847 0002 01       		.byte	0x1
 848 0003 25       		.uleb128 0x25
 849 0004 0E       		.uleb128 0xe
 850 0005 13       		.uleb128 0x13
 851 0006 0B       		.uleb128 0xb
 852 0007 03       		.uleb128 0x3
 853 0008 0E       		.uleb128 0xe
 854 0009 1B       		.uleb128 0x1b
 855 000a 0E       		.uleb128 0xe
 856 000b 55       		.uleb128 0x55
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 32


 857 000c 17       		.uleb128 0x17
 858 000d 11       		.uleb128 0x11
 859 000e 01       		.uleb128 0x1
 860 000f 10       		.uleb128 0x10
 861 0010 17       		.uleb128 0x17
 862 0011 00       		.byte	0
 863 0012 00       		.byte	0
 864 0013 02       		.uleb128 0x2
 865 0014 24       		.uleb128 0x24
 866 0015 00       		.byte	0
 867 0016 0B       		.uleb128 0xb
 868 0017 0B       		.uleb128 0xb
 869 0018 3E       		.uleb128 0x3e
 870 0019 0B       		.uleb128 0xb
 871 001a 03       		.uleb128 0x3
 872 001b 0E       		.uleb128 0xe
 873 001c 00       		.byte	0
 874 001d 00       		.byte	0
 875 001e 03       		.uleb128 0x3
 876 001f 24       		.uleb128 0x24
 877 0020 00       		.byte	0
 878 0021 0B       		.uleb128 0xb
 879 0022 0B       		.uleb128 0xb
 880 0023 3E       		.uleb128 0x3e
 881 0024 0B       		.uleb128 0xb
 882 0025 03       		.uleb128 0x3
 883 0026 08       		.uleb128 0x8
 884 0027 00       		.byte	0
 885 0028 00       		.byte	0
 886 0029 04       		.uleb128 0x4
 887 002a 16       		.uleb128 0x16
 888 002b 00       		.byte	0
 889 002c 03       		.uleb128 0x3
 890 002d 0E       		.uleb128 0xe
 891 002e 3A       		.uleb128 0x3a
 892 002f 0B       		.uleb128 0xb
 893 0030 3B       		.uleb128 0x3b
 894 0031 05       		.uleb128 0x5
 895 0032 49       		.uleb128 0x49
 896 0033 13       		.uleb128 0x13
 897 0034 00       		.byte	0
 898 0035 00       		.byte	0
 899 0036 05       		.uleb128 0x5
 900 0037 35       		.uleb128 0x35
 901 0038 00       		.byte	0
 902 0039 49       		.uleb128 0x49
 903 003a 13       		.uleb128 0x13
 904 003b 00       		.byte	0
 905 003c 00       		.byte	0
 906 003d 06       		.uleb128 0x6
 907 003e 2E       		.uleb128 0x2e
 908 003f 00       		.byte	0
 909 0040 3F       		.uleb128 0x3f
 910 0041 19       		.uleb128 0x19
 911 0042 03       		.uleb128 0x3
 912 0043 0E       		.uleb128 0xe
 913 0044 3A       		.uleb128 0x3a
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 33


 914 0045 0B       		.uleb128 0xb
 915 0046 3B       		.uleb128 0x3b
 916 0047 0B       		.uleb128 0xb
 917 0048 27       		.uleb128 0x27
 918 0049 19       		.uleb128 0x19
 919 004a 11       		.uleb128 0x11
 920 004b 01       		.uleb128 0x1
 921 004c 12       		.uleb128 0x12
 922 004d 06       		.uleb128 0x6
 923 004e 40       		.uleb128 0x40
 924 004f 18       		.uleb128 0x18
 925 0050 9742     		.uleb128 0x2117
 926 0052 19       		.uleb128 0x19
 927 0053 00       		.byte	0
 928 0054 00       		.byte	0
 929 0055 07       		.uleb128 0x7
 930 0056 2E       		.uleb128 0x2e
 931 0057 01       		.byte	0x1
 932 0058 3F       		.uleb128 0x3f
 933 0059 19       		.uleb128 0x19
 934 005a 03       		.uleb128 0x3
 935 005b 0E       		.uleb128 0xe
 936 005c 3A       		.uleb128 0x3a
 937 005d 0B       		.uleb128 0xb
 938 005e 3B       		.uleb128 0x3b
 939 005f 05       		.uleb128 0x5
 940 0060 27       		.uleb128 0x27
 941 0061 19       		.uleb128 0x19
 942 0062 11       		.uleb128 0x11
 943 0063 01       		.uleb128 0x1
 944 0064 12       		.uleb128 0x12
 945 0065 06       		.uleb128 0x6
 946 0066 40       		.uleb128 0x40
 947 0067 18       		.uleb128 0x18
 948 0068 9742     		.uleb128 0x2117
 949 006a 19       		.uleb128 0x19
 950 006b 01       		.uleb128 0x1
 951 006c 13       		.uleb128 0x13
 952 006d 00       		.byte	0
 953 006e 00       		.byte	0
 954 006f 08       		.uleb128 0x8
 955 0070 05       		.uleb128 0x5
 956 0071 00       		.byte	0
 957 0072 03       		.uleb128 0x3
 958 0073 0E       		.uleb128 0xe
 959 0074 3A       		.uleb128 0x3a
 960 0075 0B       		.uleb128 0xb
 961 0076 3B       		.uleb128 0x3b
 962 0077 05       		.uleb128 0x5
 963 0078 49       		.uleb128 0x49
 964 0079 13       		.uleb128 0x13
 965 007a 02       		.uleb128 0x2
 966 007b 18       		.uleb128 0x18
 967 007c 00       		.byte	0
 968 007d 00       		.byte	0
 969 007e 09       		.uleb128 0x9
 970 007f 2E       		.uleb128 0x2e
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 34


 971 0080 00       		.byte	0
 972 0081 3F       		.uleb128 0x3f
 973 0082 19       		.uleb128 0x19
 974 0083 03       		.uleb128 0x3
 975 0084 0E       		.uleb128 0xe
 976 0085 3A       		.uleb128 0x3a
 977 0086 0B       		.uleb128 0xb
 978 0087 3B       		.uleb128 0x3b
 979 0088 05       		.uleb128 0x5
 980 0089 27       		.uleb128 0x27
 981 008a 19       		.uleb128 0x19
 982 008b 49       		.uleb128 0x49
 983 008c 13       		.uleb128 0x13
 984 008d 11       		.uleb128 0x11
 985 008e 01       		.uleb128 0x1
 986 008f 12       		.uleb128 0x12
 987 0090 06       		.uleb128 0x6
 988 0091 40       		.uleb128 0x40
 989 0092 18       		.uleb128 0x18
 990 0093 9742     		.uleb128 0x2117
 991 0095 19       		.uleb128 0x19
 992 0096 00       		.byte	0
 993 0097 00       		.byte	0
 994 0098 0A       		.uleb128 0xa
 995 0099 898201   		.uleb128 0x4109
 996 009c 00       		.byte	0
 997 009d 11       		.uleb128 0x11
 998 009e 01       		.uleb128 0x1
 999 009f 31       		.uleb128 0x31
 1000 00a0 13       		.uleb128 0x13
 1001 00a1 00       		.byte	0
 1002 00a2 00       		.byte	0
 1003 00a3 0B       		.uleb128 0xb
 1004 00a4 2E       		.uleb128 0x2e
 1005 00a5 01       		.byte	0x1
 1006 00a6 3F       		.uleb128 0x3f
 1007 00a7 19       		.uleb128 0x19
 1008 00a8 03       		.uleb128 0x3
 1009 00a9 0E       		.uleb128 0xe
 1010 00aa 3A       		.uleb128 0x3a
 1011 00ab 0B       		.uleb128 0xb
 1012 00ac 3B       		.uleb128 0x3b
 1013 00ad 0B       		.uleb128 0xb
 1014 00ae 27       		.uleb128 0x27
 1015 00af 19       		.uleb128 0x19
 1016 00b0 11       		.uleb128 0x11
 1017 00b1 01       		.uleb128 0x1
 1018 00b2 12       		.uleb128 0x12
 1019 00b3 06       		.uleb128 0x6
 1020 00b4 40       		.uleb128 0x40
 1021 00b5 18       		.uleb128 0x18
 1022 00b6 9742     		.uleb128 0x2117
 1023 00b8 19       		.uleb128 0x19
 1024 00b9 01       		.uleb128 0x1
 1025 00ba 13       		.uleb128 0x13
 1026 00bb 00       		.byte	0
 1027 00bc 00       		.byte	0
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 35


 1028 00bd 0C       		.uleb128 0xc
 1029 00be 34       		.uleb128 0x34
 1030 00bf 00       		.byte	0
 1031 00c0 03       		.uleb128 0x3
 1032 00c1 0E       		.uleb128 0xe
 1033 00c2 3A       		.uleb128 0x3a
 1034 00c3 0B       		.uleb128 0xb
 1035 00c4 3B       		.uleb128 0x3b
 1036 00c5 0B       		.uleb128 0xb
 1037 00c6 49       		.uleb128 0x49
 1038 00c7 13       		.uleb128 0x13
 1039 00c8 02       		.uleb128 0x2
 1040 00c9 17       		.uleb128 0x17
 1041 00ca 00       		.byte	0
 1042 00cb 00       		.byte	0
 1043 00cc 0D       		.uleb128 0xd
 1044 00cd 898201   		.uleb128 0x4109
 1045 00d0 01       		.byte	0x1
 1046 00d1 11       		.uleb128 0x11
 1047 00d2 01       		.uleb128 0x1
 1048 00d3 31       		.uleb128 0x31
 1049 00d4 13       		.uleb128 0x13
 1050 00d5 01       		.uleb128 0x1
 1051 00d6 13       		.uleb128 0x13
 1052 00d7 00       		.byte	0
 1053 00d8 00       		.byte	0
 1054 00d9 0E       		.uleb128 0xe
 1055 00da 8A8201   		.uleb128 0x410a
 1056 00dd 00       		.byte	0
 1057 00de 02       		.uleb128 0x2
 1058 00df 18       		.uleb128 0x18
 1059 00e0 9142     		.uleb128 0x2111
 1060 00e2 18       		.uleb128 0x18
 1061 00e3 00       		.byte	0
 1062 00e4 00       		.byte	0
 1063 00e5 0F       		.uleb128 0xf
 1064 00e6 34       		.uleb128 0x34
 1065 00e7 00       		.byte	0
 1066 00e8 03       		.uleb128 0x3
 1067 00e9 0E       		.uleb128 0xe
 1068 00ea 3A       		.uleb128 0x3a
 1069 00eb 0B       		.uleb128 0xb
 1070 00ec 3B       		.uleb128 0x3b
 1071 00ed 0B       		.uleb128 0xb
 1072 00ee 49       		.uleb128 0x49
 1073 00ef 13       		.uleb128 0x13
 1074 00f0 3F       		.uleb128 0x3f
 1075 00f1 19       		.uleb128 0x19
 1076 00f2 02       		.uleb128 0x2
 1077 00f3 18       		.uleb128 0x18
 1078 00f4 00       		.byte	0
 1079 00f5 00       		.byte	0
 1080 00f6 10       		.uleb128 0x10
 1081 00f7 2E       		.uleb128 0x2e
 1082 00f8 00       		.byte	0
 1083 00f9 3F       		.uleb128 0x3f
 1084 00fa 19       		.uleb128 0x19
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 36


 1085 00fb 3C       		.uleb128 0x3c
 1086 00fc 19       		.uleb128 0x19
 1087 00fd 6E       		.uleb128 0x6e
 1088 00fe 0E       		.uleb128 0xe
 1089 00ff 03       		.uleb128 0x3
 1090 0100 0E       		.uleb128 0xe
 1091 0101 3A       		.uleb128 0x3a
 1092 0102 0B       		.uleb128 0xb
 1093 0103 3B       		.uleb128 0x3b
 1094 0104 0B       		.uleb128 0xb
 1095 0105 00       		.byte	0
 1096 0106 00       		.byte	0
 1097 0107 00       		.byte	0
 1098              		.section	.debug_loc,"",%progbits
 1099              	.Ldebug_loc0:
 1100              	.LLST0:
 1101 0000 2E000000 		.4byte	.LVL12
 1102 0004 39000000 		.4byte	.LVL13-1
 1103 0008 0100     		.2byte	0x1
 1104 000a 50       		.byte	0x50
 1105 000b 00000000 		.4byte	0
 1106 000f 00000000 		.4byte	0
 1107              		.section	.debug_aranges,"",%progbits
 1108 0000 94000000 		.4byte	0x94
 1109 0004 0200     		.2byte	0x2
 1110 0006 00000000 		.4byte	.Ldebug_info0
 1111 000a 04       		.byte	0x4
 1112 000b 00       		.byte	0
 1113 000c 0000     		.2byte	0
 1114 000e 0000     		.2byte	0
 1115 0010 00000000 		.4byte	.LFB2
 1116 0014 02000000 		.4byte	.LFE2-.LFB2
 1117 0018 00000000 		.4byte	.LFB3
 1118 001c 02000000 		.4byte	.LFE3-.LFB3
 1119 0020 00000000 		.4byte	.LFB4
 1120 0024 0C000000 		.4byte	.LFE4-.LFB4
 1121 0028 00000000 		.4byte	.LFB5
 1122 002c 14000000 		.4byte	.LFE5-.LFB5
 1123 0030 00000000 		.4byte	.LFB7
 1124 0034 0C000000 		.4byte	.LFE7-.LFB7
 1125 0038 00000000 		.4byte	.LFB8
 1126 003c 0C000000 		.4byte	.LFE8-.LFB8
 1127 0040 00000000 		.4byte	.LFB9
 1128 0044 0C000000 		.4byte	.LFE9-.LFB9
 1129 0048 00000000 		.4byte	.LFB10
 1130 004c 0C000000 		.4byte	.LFE10-.LFB10
 1131 0050 00000000 		.4byte	.LFB11
 1132 0054 0C000000 		.4byte	.LFE11-.LFB11
 1133 0058 00000000 		.4byte	.LFB12
 1134 005c 0C000000 		.4byte	.LFE12-.LFB12
 1135 0060 00000000 		.4byte	.LFB6
 1136 0064 14000000 		.4byte	.LFE6-.LFB6
 1137 0068 00000000 		.4byte	.LFB1
 1138 006c 44000000 		.4byte	.LFE1-.LFB1
 1139 0070 00000000 		.4byte	.LFB0
 1140 0074 18000000 		.4byte	.LFE0-.LFB0
 1141 0078 00000000 		.4byte	.LFB13
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 37


 1142 007c 0C000000 		.4byte	.LFE13-.LFB13
 1143 0080 00000000 		.4byte	.LFB14
 1144 0084 0C000000 		.4byte	.LFE14-.LFB14
 1145 0088 00000000 		.4byte	.LFB15
 1146 008c 0C000000 		.4byte	.LFE15-.LFB15
 1147 0090 00000000 		.4byte	0
 1148 0094 00000000 		.4byte	0
 1149              		.section	.debug_ranges,"",%progbits
 1150              	.Ldebug_ranges0:
 1151 0000 00000000 		.4byte	.LFB2
 1152 0004 02000000 		.4byte	.LFE2
 1153 0008 00000000 		.4byte	.LFB3
 1154 000c 02000000 		.4byte	.LFE3
 1155 0010 00000000 		.4byte	.LFB4
 1156 0014 0C000000 		.4byte	.LFE4
 1157 0018 00000000 		.4byte	.LFB5
 1158 001c 14000000 		.4byte	.LFE5
 1159 0020 00000000 		.4byte	.LFB7
 1160 0024 0C000000 		.4byte	.LFE7
 1161 0028 00000000 		.4byte	.LFB8
 1162 002c 0C000000 		.4byte	.LFE8
 1163 0030 00000000 		.4byte	.LFB9
 1164 0034 0C000000 		.4byte	.LFE9
 1165 0038 00000000 		.4byte	.LFB10
 1166 003c 0C000000 		.4byte	.LFE10
 1167 0040 00000000 		.4byte	.LFB11
 1168 0044 0C000000 		.4byte	.LFE11
 1169 0048 00000000 		.4byte	.LFB12
 1170 004c 0C000000 		.4byte	.LFE12
 1171 0050 00000000 		.4byte	.LFB6
 1172 0054 14000000 		.4byte	.LFE6
 1173 0058 00000000 		.4byte	.LFB1
 1174 005c 44000000 		.4byte	.LFE1
 1175 0060 00000000 		.4byte	.LFB0
 1176 0064 18000000 		.4byte	.LFE0
 1177 0068 00000000 		.4byte	.LFB13
 1178 006c 0C000000 		.4byte	.LFE13
 1179 0070 00000000 		.4byte	.LFB14
 1180 0074 0C000000 		.4byte	.LFE14
 1181 0078 00000000 		.4byte	.LFB15
 1182 007c 0C000000 		.4byte	.LFE15
 1183 0080 00000000 		.4byte	0
 1184 0084 00000000 		.4byte	0
 1185              		.section	.debug_line,"",%progbits
 1186              	.Ldebug_line0:
 1187 0000 79010000 		.section	.debug_str,"MS",%progbits,1
 1187      02004B00 
 1187      00000201 
 1187      FB0E0D00 
 1187      01010101 
 1188              	.LASF30:
 1189 0000 50574D5F 		.ascii	"PWM_ClearFIFO\000"
 1189      436C6561 
 1189      72464946 
 1189      4F00
 1190              	.LASF21:
 1191 000e 70657269 		.ascii	"period\000"
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 38


 1191      6F6400
 1192              	.LASF32:
 1193 0015 50574D5F 		.ascii	"PWM_Start\000"
 1193      53746172 
 1193      7400
 1194              	.LASF3:
 1195 001f 73686F72 		.ascii	"short unsigned int\000"
 1195      7420756E 
 1195      7369676E 
 1195      65642069 
 1195      6E7400
 1196              	.LASF29:
 1197 0032 50574D5F 		.ascii	"PWM_ReadCapture\000"
 1197      52656164 
 1197      43617074 
 1197      75726500 
 1198              	.LASF9:
 1199 0042 666C6F61 		.ascii	"float\000"
 1199      7400
 1200              	.LASF20:
 1201 0048 636F756E 		.ascii	"counter\000"
 1201      74657200 
 1202              	.LASF7:
 1203 0050 6C6F6E67 		.ascii	"long long unsigned int\000"
 1203      206C6F6E 
 1203      6720756E 
 1203      7369676E 
 1203      65642069 
 1204              	.LASF1:
 1205 0067 756E7369 		.ascii	"unsigned char\000"
 1205      676E6564 
 1205      20636861 
 1205      7200
 1206              	.LASF38:
 1207 0075 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1207      43313120 
 1207      352E342E 
 1207      31203230 
 1207      31363036 
 1208 00a8 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1208      20726576 
 1208      6973696F 
 1208      6E203233 
 1208      37373135 
 1209 00db 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1209      66756E63 
 1209      74696F6E 
 1209      2D736563 
 1209      74696F6E 
 1210              	.LASF13:
 1211 0103 72656738 		.ascii	"reg8\000"
 1211      00
 1212              	.LASF5:
 1213 0108 6C6F6E67 		.ascii	"long unsigned int\000"
 1213      20756E73 
 1213      69676E65 
 1213      6420696E 
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 39


 1213      7400
 1214              	.LASF27:
 1215 011a 50574D5F 		.ascii	"PWM_ReadCounter\000"
 1215      52656164 
 1215      436F756E 
 1215      74657200 
 1216              	.LASF12:
 1217 012a 75696E74 		.ascii	"uint8\000"
 1217      3800
 1218              	.LASF10:
 1219 0130 646F7562 		.ascii	"double\000"
 1219      6C6500
 1220              	.LASF31:
 1221 0137 50574D5F 		.ascii	"PWM_Init\000"
 1221      496E6974 
 1221      00
 1222              	.LASF42:
 1223 0140 50574D5F 		.ascii	"PWM_initVar\000"
 1223      696E6974 
 1223      56617200 
 1224              	.LASF36:
 1225 014c 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1225      74657243 
 1225      72697469 
 1225      63616C53 
 1225      65637469 
 1226              	.LASF8:
 1227 0163 756E7369 		.ascii	"unsigned int\000"
 1227      676E6564 
 1227      20696E74 
 1227      00
 1228              	.LASF37:
 1229 0170 43794578 		.ascii	"CyExitCriticalSection\000"
 1229      69744372 
 1229      69746963 
 1229      616C5365 
 1229      6374696F 
 1230              	.LASF22:
 1231 0186 50574D5F 		.ascii	"PWM_WriteCompare1\000"
 1231      57726974 
 1231      65436F6D 
 1231      70617265 
 1231      3100
 1232              	.LASF24:
 1233 0198 50574D5F 		.ascii	"PWM_WriteCompare2\000"
 1233      57726974 
 1233      65436F6D 
 1233      70617265 
 1233      3200
 1234              	.LASF19:
 1235 01aa 50574D5F 		.ascii	"PWM_WritePeriod\000"
 1235      57726974 
 1235      65506572 
 1235      696F6400 
 1236              	.LASF14:
 1237 01ba 6C6F6E67 		.ascii	"long double\000"
 1237      20646F75 
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 40


 1237      626C6500 
 1238              	.LASF25:
 1239 01c6 50574D5F 		.ascii	"PWM_SetInterruptMode\000"
 1239      53657449 
 1239      6E746572 
 1239      72757074 
 1239      4D6F6465 
 1240              	.LASF15:
 1241 01db 73697A65 		.ascii	"sizetype\000"
 1241      74797065 
 1241      00
 1242              	.LASF6:
 1243 01e4 6C6F6E67 		.ascii	"long long int\000"
 1243      206C6F6E 
 1243      6720696E 
 1243      7400
 1244              	.LASF26:
 1245 01f2 696E7465 		.ascii	"interruptMode\000"
 1245      72727570 
 1245      744D6F64 
 1245      6500
 1246              	.LASF40:
 1247 0200 443A5C55 		.ascii	"D:\\Users\\ESTEBAN\\Desktop\\Materias\\Codigos\\Psc"
 1247      73657273 
 1247      5C455354 
 1247      4542414E 
 1247      5C446573 
 1248 022d 6F635C63 		.ascii	"oc\\carro\\carro\\Design01.cydsn\000"
 1248      6172726F 
 1248      5C636172 
 1248      726F5C44 
 1248      65736967 
 1249              	.LASF41:
 1250 024b 50574D5F 		.ascii	"PWM_interruptState\000"
 1250      696E7465 
 1250      72727570 
 1250      74537461 
 1250      746500
 1251              	.LASF35:
 1252 025e 50574D5F 		.ascii	"PWM_ReadPeriod\000"
 1252      52656164 
 1252      50657269 
 1252      6F6400
 1253              	.LASF2:
 1254 026d 73686F72 		.ascii	"short int\000"
 1254      7420696E 
 1254      7400
 1255              	.LASF18:
 1256 0277 50574D5F 		.ascii	"PWM_WriteCounter\000"
 1256      57726974 
 1256      65436F75 
 1256      6E746572 
 1256      00
 1257              	.LASF17:
 1258 0288 50574D5F 		.ascii	"PWM_Stop\000"
 1258      53746F70 
 1258      00
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccIPyqce.s 			page 41


 1259              	.LASF4:
 1260 0291 6C6F6E67 		.ascii	"long int\000"
 1260      20696E74 
 1260      00
 1261              	.LASF11:
 1262 029a 63686172 		.ascii	"char\000"
 1262      00
 1263              	.LASF33:
 1264 029f 50574D5F 		.ascii	"PWM_ReadCompare1\000"
 1264      52656164 
 1264      436F6D70 
 1264      61726531 
 1264      00
 1265              	.LASF34:
 1266 02b0 50574D5F 		.ascii	"PWM_ReadCompare2\000"
 1266      52656164 
 1266      436F6D70 
 1266      61726532 
 1266      00
 1267              	.LASF0:
 1268 02c1 7369676E 		.ascii	"signed char\000"
 1268      65642063 
 1268      68617200 
 1269              	.LASF23:
 1270 02cd 636F6D70 		.ascii	"compare\000"
 1270      61726500 
 1271              	.LASF16:
 1272 02d5 50574D5F 		.ascii	"PWM_Enable\000"
 1272      456E6162 
 1272      6C6500
 1273              	.LASF28:
 1274 02e0 50574D5F 		.ascii	"PWM_ReadStatusRegister\000"
 1274      52656164 
 1274      53746174 
 1274      75735265 
 1274      67697374 
 1275              	.LASF39:
 1276 02f7 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM.c\000"
 1276      72617465 
 1276      645F536F 
 1276      75726365 
 1276      5C50536F 
 1277              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
