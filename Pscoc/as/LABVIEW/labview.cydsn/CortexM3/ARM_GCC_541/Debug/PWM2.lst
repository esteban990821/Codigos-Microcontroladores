ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PWM2.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWM2_Enable,"ax",%progbits
  20              		.align	2
  21              		.global	PWM2_Enable
  22              		.thumb
  23              		.thumb_func
  24              		.type	PWM2_Enable, %function
  25              	PWM2_Enable:
  26              	.LFB2:
  27              		.file 1 "Generated_Source\\PSoC5\\PWM2.c"
   1:Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM2.c **** * File Name: PWM2.c
   3:Generated_Source\PSoC5/PWM2.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM2.c **** *
   5:Generated_Source\PSoC5/PWM2.c **** * Description:
   6:Generated_Source\PSoC5/PWM2.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM2.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM2.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM2.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM2.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM2.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM2.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM2.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM2.c **** *
  15:Generated_Source\PSoC5/PWM2.c **** * Note:
  16:Generated_Source\PSoC5/PWM2.c **** *
  17:Generated_Source\PSoC5/PWM2.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM2.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM2.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM2.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM2.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM2.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM2.c **** 
  24:Generated_Source\PSoC5/PWM2.c **** #include "PWM2.h"
  25:Generated_Source\PSoC5/PWM2.c **** 
  26:Generated_Source\PSoC5/PWM2.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM2.c **** #ifdef PWM2_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM2.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM2.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM2.c **** #endif /* PWM2_PWMUDB_genblk1_ctrlreg__REMOVED */
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 2


  31:Generated_Source\PSoC5/PWM2.c **** 
  32:Generated_Source\PSoC5/PWM2.c **** uint8 PWM2_initVar = 0u;
  33:Generated_Source\PSoC5/PWM2.c **** 
  34:Generated_Source\PSoC5/PWM2.c **** 
  35:Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_Start
  37:Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM2.c **** *
  39:Generated_Source\PSoC5/PWM2.c **** * Summary:
  40:Generated_Source\PSoC5/PWM2.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM2.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM2.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM2.c **** *
  44:Generated_Source\PSoC5/PWM2.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM2.c **** *  None
  46:Generated_Source\PSoC5/PWM2.c **** *
  47:Generated_Source\PSoC5/PWM2.c **** * Return:
  48:Generated_Source\PSoC5/PWM2.c **** *  None
  49:Generated_Source\PSoC5/PWM2.c **** *
  50:Generated_Source\PSoC5/PWM2.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM2.c **** *  PWM2_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM2.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM2.c **** *
  54:Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM2.c **** void PWM2_Start(void) 
  56:Generated_Source\PSoC5/PWM2.c **** {
  57:Generated_Source\PSoC5/PWM2.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM2.c ****     if(PWM2_initVar == 0u)
  59:Generated_Source\PSoC5/PWM2.c ****     {
  60:Generated_Source\PSoC5/PWM2.c ****         PWM2_Init();
  61:Generated_Source\PSoC5/PWM2.c ****         PWM2_initVar = 1u;
  62:Generated_Source\PSoC5/PWM2.c ****     }
  63:Generated_Source\PSoC5/PWM2.c ****     PWM2_Enable();
  64:Generated_Source\PSoC5/PWM2.c **** 
  65:Generated_Source\PSoC5/PWM2.c **** }
  66:Generated_Source\PSoC5/PWM2.c **** 
  67:Generated_Source\PSoC5/PWM2.c **** 
  68:Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_Init
  70:Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM2.c **** *
  72:Generated_Source\PSoC5/PWM2.c **** * Summary:
  73:Generated_Source\PSoC5/PWM2.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM2.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM2.c **** *  PWM2_Start().
  76:Generated_Source\PSoC5/PWM2.c **** *
  77:Generated_Source\PSoC5/PWM2.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM2.c **** *  None
  79:Generated_Source\PSoC5/PWM2.c **** *
  80:Generated_Source\PSoC5/PWM2.c **** * Return:
  81:Generated_Source\PSoC5/PWM2.c **** *  None
  82:Generated_Source\PSoC5/PWM2.c **** *
  83:Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM2.c **** void PWM2_Init(void) 
  85:Generated_Source\PSoC5/PWM2.c **** {
  86:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction || PWM2_UseControl)
  87:Generated_Source\PSoC5/PWM2.c ****         uint8 ctrl;
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 3


  88:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction || PWM2_UseControl) */
  89:Generated_Source\PSoC5/PWM2.c **** 
  90:Generated_Source\PSoC5/PWM2.c ****     #if(!PWM2_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UseStatus)
  92:Generated_Source\PSoC5/PWM2.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM2.c ****             uint8 PWM2_interruptState;
  94:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UseStatus) */
  95:Generated_Source\PSoC5/PWM2.c ****     #endif /* (!PWM2_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM2.c **** 
  97:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM2.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL |= PWM2_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM2.c ****             PWM2_CONTROL |= PWM2_CFG0_DB;
 102:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM2.c **** 
 104:Generated_Source\PSoC5/PWM2.c ****         ctrl = PWM2_CONTROL3 & ((uint8 )(~PWM2_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL3 = ctrl | PWM2_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM2.c **** 
 107:Generated_Source\PSoC5/PWM2.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 &= ((uint8)(~PWM2_RT1_MASK));
 109:Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 |= PWM2_SYNC;
 110:Generated_Source\PSoC5/PWM2.c **** 
 111:Generated_Source\PSoC5/PWM2.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 &= ((uint8)(~PWM2_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM2.c ****         PWM2_RT1 |= PWM2_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM2.c **** 
 115:Generated_Source\PSoC5/PWM2.c ****     #elif (PWM2_UseControl)
 116:Generated_Source\PSoC5/PWM2.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM2.c ****         ctrl = PWM2_CONTROL & ((uint8)(~PWM2_CTRL_CMPMODE2_MASK)) &
 118:Generated_Source\PSoC5/PWM2.c ****                 ((uint8)(~PWM2_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL = ctrl | PWM2_DEFAULT_COMPARE2_MODE |
 120:Generated_Source\PSoC5/PWM2.c ****                                    PWM2_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM2.c **** 
 123:Generated_Source\PSoC5/PWM2.c ****     #if (!PWM2_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_Resolution == 8)
 125:Generated_Source\PSoC5/PWM2.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM2.c ****             PWM2_AUX_CONTROLDP0 |= (PWM2_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/PWM2.c ****         #else /* (PWM2_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM2.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM2.c ****             PWM2_AUX_CONTROLDP0 |= (PWM2_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM2.c ****             PWM2_AUX_CONTROLDP1 |= (PWM2_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM2.c **** 
 133:Generated_Source\PSoC5/PWM2.c ****         PWM2_WriteCounter(PWM2_INIT_PERIOD_VALUE);
 134:Generated_Source\PSoC5/PWM2.c ****     #endif /* (!PWM2_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM2.c **** 
 136:Generated_Source\PSoC5/PWM2.c ****     PWM2_WritePeriod(PWM2_INIT_PERIOD_VALUE);
 137:Generated_Source\PSoC5/PWM2.c **** 
 138:Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteCompare(PWM2_INIT_COMPARE_VALUE1);
 140:Generated_Source\PSoC5/PWM2.c ****         #else
 141:Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteCompare1(PWM2_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteCompare2(PWM2_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM2.c **** 
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 4


 145:Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_KillModeMinTime)
 146:Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteKillTime(PWM2_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM2.c **** 
 149:Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM2.c ****             PWM2_WriteDeadTime(PWM2_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM2.c **** 
 153:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UseStatus || PWM2_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM2.c ****         PWM2_SetInterruptMode(PWM2_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UseStatus || PWM2_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM2.c **** 
 157:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM2.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_ENABLE |= PWM2_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM2.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL2 |= PWM2_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM2.c ****     #else
 163:Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UseStatus)
 164:Generated_Source\PSoC5/PWM2.c **** 
 165:Generated_Source\PSoC5/PWM2.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM2.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM2.c ****             PWM2_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM2.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM2.c ****             PWM2_STATUS_AUX_CTRL |= PWM2_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/PWM2.c **** 
 171:Generated_Source\PSoC5/PWM2.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM2.c ****             CyExitCriticalSection(PWM2_interruptState);
 173:Generated_Source\PSoC5/PWM2.c **** 
 174:Generated_Source\PSoC5/PWM2.c ****             /* Clear the FIFO to enable the PWM2_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM2.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM2.c ****             PWM2_ClearFIFO();
 177:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UseStatus) */
 178:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM2.c **** }
 180:Generated_Source\PSoC5/PWM2.c **** 
 181:Generated_Source\PSoC5/PWM2.c **** 
 182:Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_Enable
 184:Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM2.c **** *
 186:Generated_Source\PSoC5/PWM2.c **** * Summary:
 187:Generated_Source\PSoC5/PWM2.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM2.c **** *
 189:Generated_Source\PSoC5/PWM2.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM2.c **** *  None
 191:Generated_Source\PSoC5/PWM2.c **** *
 192:Generated_Source\PSoC5/PWM2.c **** * Return:
 193:Generated_Source\PSoC5/PWM2.c **** *  None
 194:Generated_Source\PSoC5/PWM2.c **** *
 195:Generated_Source\PSoC5/PWM2.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM2.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM2.c **** *
 198:Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM2.c **** void PWM2_Enable(void) 
 200:Generated_Source\PSoC5/PWM2.c **** {
  28              		.loc 1 200 0
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 5


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE2:
  36              		.size	PWM2_Enable, .-PWM2_Enable
  37 0002 00BF     		.section	.text.PWM2_Stop,"ax",%progbits
  38              		.align	2
  39              		.global	PWM2_Stop
  40              		.thumb
  41              		.thumb_func
  42              		.type	PWM2_Stop, %function
  43              	PWM2_Stop:
  44              	.LFB3:
 201:Generated_Source\PSoC5/PWM2.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_ENABLE |= PWM2_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_STBY_ENABLE |= PWM2_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM2.c **** 
 207:Generated_Source\PSoC5/PWM2.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UseControl || PWM2_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL |= PWM2_CTRL_ENABLE;
 210:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UseControl || PWM2_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM2.c **** }
 212:Generated_Source\PSoC5/PWM2.c **** 
 213:Generated_Source\PSoC5/PWM2.c **** 
 214:Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_Stop
 216:Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM2.c **** *
 218:Generated_Source\PSoC5/PWM2.c **** * Summary:
 219:Generated_Source\PSoC5/PWM2.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM2.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM2.c **** *
 222:Generated_Source\PSoC5/PWM2.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM2.c **** *  None
 224:Generated_Source\PSoC5/PWM2.c **** *
 225:Generated_Source\PSoC5/PWM2.c **** * Return:
 226:Generated_Source\PSoC5/PWM2.c **** *  None
 227:Generated_Source\PSoC5/PWM2.c **** *
 228:Generated_Source\PSoC5/PWM2.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM2.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM2.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM2.c **** *
 232:Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM2.c **** void PWM2_Stop(void) 
 234:Generated_Source\PSoC5/PWM2.c **** {
  45              		.loc 1 234 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50 0000 7047     		bx	lr
  51              		.cfi_endproc
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 6


  52              	.LFE3:
  53              		.size	PWM2_Stop, .-PWM2_Stop
  54 0002 00BF     		.section	.text.PWM2_WriteCounter,"ax",%progbits
  55              		.align	2
  56              		.global	PWM2_WriteCounter
  57              		.thumb
  58              		.thumb_func
  59              		.type	PWM2_WriteCounter, %function
  60              	PWM2_WriteCounter:
  61              	.LFB4:
 235:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UseControl || PWM2_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM2.c ****         PWM2_CONTROL &= ((uint8)(~PWM2_CTRL_ENABLE));
 237:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UseControl || PWM2_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM2.c **** 
 239:Generated_Source\PSoC5/PWM2.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_ENABLE &= ((uint8)(~PWM2_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM2.c ****         PWM2_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM2_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM2.c **** }
 245:Generated_Source\PSoC5/PWM2.c **** 
 246:Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM2.c **** 
 249:Generated_Source\PSoC5/PWM2.c **** 
 250:Generated_Source\PSoC5/PWM2.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM2.c ****         * Function Name: PWM2_SetCompareMode
 252:Generated_Source\PSoC5/PWM2.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM2.c ****         *
 254:Generated_Source\PSoC5/PWM2.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM2.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM2.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM2.c ****         *
 258:Generated_Source\PSoC5/PWM2.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM2.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM2.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM2.c ****         *
 262:Generated_Source\PSoC5/PWM2.c ****         * Return:
 263:Generated_Source\PSoC5/PWM2.c ****         *  None
 264:Generated_Source\PSoC5/PWM2.c ****         *
 265:Generated_Source\PSoC5/PWM2.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM2.c ****         void PWM2_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM2.c ****         {
 268:Generated_Source\PSoC5/PWM2.c ****             #if(PWM2_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM2.c **** 
 270:Generated_Source\PSoC5/PWM2.c ****                 #if(0 != PWM2_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE1_SHI
 272:Generated_Source\PSoC5/PWM2.c ****                 #else
 273:Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM2.c ****                 #endif /* (0 != PWM2_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM2.c **** 
 276:Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL3 &= ((uint8)(~PWM2_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM2.c **** 
 279:Generated_Source\PSoC5/PWM2.c ****             #elif (PWM2_UseControl)
 280:Generated_Source\PSoC5/PWM2.c **** 
 281:Generated_Source\PSoC5/PWM2.c ****                 #if(0 != PWM2_CTRL_CMPMODE1_SHIFT)
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 7


 282:Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE1_SH
 283:Generated_Source\PSoC5/PWM2.c ****                                                 PWM2_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM2.c ****                 #else
 285:Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemode1masked = comparemode & PWM2_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/PWM2.c ****                 #endif /* (0 != PWM2_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM2.c **** 
 288:Generated_Source\PSoC5/PWM2.c ****                 #if(0 != PWM2_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE2_SH
 290:Generated_Source\PSoC5/PWM2.c ****                                                PWM2_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM2.c ****                 #else
 292:Generated_Source\PSoC5/PWM2.c ****                     uint8 comparemode2masked = comparemode & PWM2_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM2.c ****                 #endif /* (0 != PWM2_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM2.c **** 
 295:Generated_Source\PSoC5/PWM2.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL &= ((uint8)(~(PWM2_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM2.c ****                                             PWM2_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM2.c **** 
 300:Generated_Source\PSoC5/PWM2.c ****             #else
 301:Generated_Source\PSoC5/PWM2.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM2.c ****         }
 304:Generated_Source\PSoC5/PWM2.c ****     #endif /* PWM2_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM2.c **** 
 306:Generated_Source\PSoC5/PWM2.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM2.c **** 
 308:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM2.c **** 
 310:Generated_Source\PSoC5/PWM2.c **** 
 311:Generated_Source\PSoC5/PWM2.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM2.c ****         * Function Name: PWM2_SetCompareMode1
 313:Generated_Source\PSoC5/PWM2.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM2.c ****         *
 315:Generated_Source\PSoC5/PWM2.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM2.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM2.c ****         *
 318:Generated_Source\PSoC5/PWM2.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM2.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM2.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM2.c ****         *
 322:Generated_Source\PSoC5/PWM2.c ****         * Return:
 323:Generated_Source\PSoC5/PWM2.c ****         *  None
 324:Generated_Source\PSoC5/PWM2.c ****         *
 325:Generated_Source\PSoC5/PWM2.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM2.c ****         void PWM2_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM2.c ****         {
 328:Generated_Source\PSoC5/PWM2.c ****             #if(0 != PWM2_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM2.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE1_SHIFT))
 330:Generated_Source\PSoC5/PWM2.c ****                                            PWM2_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM2.c ****             #else
 332:Generated_Source\PSoC5/PWM2.c ****                 uint8 comparemodemasked = comparemode & PWM2_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM2.c ****             #endif /* (0 != PWM2_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM2.c **** 
 335:Generated_Source\PSoC5/PWM2.c ****             #if (PWM2_UseControl)
 336:Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL &= ((uint8)(~PWM2_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/PWM2.c ****                 PWM2_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_UseControl) */
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 8


 339:Generated_Source\PSoC5/PWM2.c ****         }
 340:Generated_Source\PSoC5/PWM2.c ****     #endif /* PWM2_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM2.c **** 
 342:Generated_Source\PSoC5/PWM2.c **** #if (PWM2_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM2.c **** 
 344:Generated_Source\PSoC5/PWM2.c **** 
 345:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_SetCompareMode2
 347:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM2.c ****     *
 349:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM2.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM2.c ****     *
 352:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM2.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM2.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM2.c ****     *
 356:Generated_Source\PSoC5/PWM2.c ****     * Return:
 357:Generated_Source\PSoC5/PWM2.c ****     *  None
 358:Generated_Source\PSoC5/PWM2.c ****     *
 359:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM2.c ****     void PWM2_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM2.c ****     {
 362:Generated_Source\PSoC5/PWM2.c **** 
 363:Generated_Source\PSoC5/PWM2.c ****         #if(0 != PWM2_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM2.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM2_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/PWM2.c ****                                                  PWM2_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM2.c ****         #else
 367:Generated_Source\PSoC5/PWM2.c ****             uint8 comparemodemasked = comparemode & PWM2_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM2.c ****         #endif /* (0 != PWM2_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM2.c **** 
 370:Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_UseControl)
 371:Generated_Source\PSoC5/PWM2.c ****             PWM2_CONTROL &= ((uint8)(~PWM2_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM2.c ****             PWM2_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UseControl) */
 374:Generated_Source\PSoC5/PWM2.c ****     }
 375:Generated_Source\PSoC5/PWM2.c ****     #endif /*PWM2_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM2.c **** 
 377:Generated_Source\PSoC5/PWM2.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM2.c **** 
 379:Generated_Source\PSoC5/PWM2.c **** 
 380:Generated_Source\PSoC5/PWM2.c **** #if (!PWM2_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM2.c **** 
 382:Generated_Source\PSoC5/PWM2.c **** 
 383:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteCounter
 385:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM2.c ****     *
 387:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM2.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM2.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM2.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM2.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM2.c ****     *
 393:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM2.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM2.c ****     *
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 9


 396:Generated_Source\PSoC5/PWM2.c ****     * Return:
 397:Generated_Source\PSoC5/PWM2.c ****     *  None
 398:Generated_Source\PSoC5/PWM2.c ****     *
 399:Generated_Source\PSoC5/PWM2.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM2.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM2.c ****     *
 402:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteCounter(uint16 counter) \
 404:Generated_Source\PSoC5/PWM2.c ****                                        
 405:Generated_Source\PSoC5/PWM2.c ****     {
  62              		.loc 1 405 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67              	.LVL0:
 406:Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG16(PWM2_COUNTER_LSB_PTR, counter);
  68              		.loc 1 406 0
  69 0000 014B     		ldr	r3, .L4
  70 0002 1880     		strh	r0, [r3]	@ movhi
  71 0004 7047     		bx	lr
  72              	.L5:
  73 0006 00BF     		.align	2
  74              	.L4:
  75 0008 1C680040 		.word	1073768476
  76              		.cfi_endproc
  77              	.LFE4:
  78              		.size	PWM2_WriteCounter, .-PWM2_WriteCounter
  79              		.section	.text.PWM2_ReadCounter,"ax",%progbits
  80              		.align	2
  81              		.global	PWM2_ReadCounter
  82              		.thumb
  83              		.thumb_func
  84              		.type	PWM2_ReadCounter, %function
  85              	PWM2_ReadCounter:
  86              	.LFB5:
 407:Generated_Source\PSoC5/PWM2.c ****     }
 408:Generated_Source\PSoC5/PWM2.c **** 
 409:Generated_Source\PSoC5/PWM2.c **** 
 410:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCounter
 412:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM2.c ****     *
 414:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM2.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM2.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM2.c ****     *
 418:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM2.c ****     *  None
 420:Generated_Source\PSoC5/PWM2.c ****     *
 421:Generated_Source\PSoC5/PWM2.c ****     * Return:
 422:Generated_Source\PSoC5/PWM2.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM2.c ****     *
 424:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM2.c ****     {
  87              		.loc 1 426 0
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 10


  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
 427:Generated_Source\PSoC5/PWM2.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM2.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM2.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM2.c ****           (void)CY_GET_REG8(PWM2_COUNTERCAP_LSB_PTR_8BIT);
  92              		.loc 1 430 0
  93 0000 024B     		ldr	r3, .L7
  94 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:Generated_Source\PSoC5/PWM2.c **** 
 432:Generated_Source\PSoC5/PWM2.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_CAPTURE_LSB_PTR));
  95              		.loc 1 433 0
  96 0004 024B     		ldr	r3, .L7+4
  97 0006 1888     		ldrh	r0, [r3]
 434:Generated_Source\PSoC5/PWM2.c ****     }
  98              		.loc 1 434 0
  99 0008 80B2     		uxth	r0, r0
 100 000a 7047     		bx	lr
 101              	.L8:
 102              		.align	2
 103              	.L7:
 104 000c 1E640040 		.word	1073767454
 105 0010 BC680040 		.word	1073768636
 106              		.cfi_endproc
 107              	.LFE5:
 108              		.size	PWM2_ReadCounter, .-PWM2_ReadCounter
 109              		.section	.text.PWM2_WritePeriod,"ax",%progbits
 110              		.align	2
 111              		.global	PWM2_WritePeriod
 112              		.thumb
 113              		.thumb_func
 114              		.type	PWM2_WritePeriod, %function
 115              	PWM2_WritePeriod:
 116              	.LFB7:
 435:Generated_Source\PSoC5/PWM2.c **** 
 436:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UseStatus)
 437:Generated_Source\PSoC5/PWM2.c **** 
 438:Generated_Source\PSoC5/PWM2.c **** 
 439:Generated_Source\PSoC5/PWM2.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM2.c ****         * Function Name: PWM2_ClearFIFO
 441:Generated_Source\PSoC5/PWM2.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM2.c ****         *
 443:Generated_Source\PSoC5/PWM2.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM2.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM2.c ****         *
 446:Generated_Source\PSoC5/PWM2.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM2.c ****         *  None
 448:Generated_Source\PSoC5/PWM2.c ****         *
 449:Generated_Source\PSoC5/PWM2.c ****         * Return:
 450:Generated_Source\PSoC5/PWM2.c ****         *  None
 451:Generated_Source\PSoC5/PWM2.c ****         *
 452:Generated_Source\PSoC5/PWM2.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM2.c ****         void PWM2_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM2.c ****         {
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 11


 455:Generated_Source\PSoC5/PWM2.c ****             while(0u != (PWM2_ReadStatusRegister() & PWM2_STATUS_FIFONEMPTY))
 456:Generated_Source\PSoC5/PWM2.c ****             {
 457:Generated_Source\PSoC5/PWM2.c ****                 (void)PWM2_ReadCapture();
 458:Generated_Source\PSoC5/PWM2.c ****             }
 459:Generated_Source\PSoC5/PWM2.c ****         }
 460:Generated_Source\PSoC5/PWM2.c **** 
 461:Generated_Source\PSoC5/PWM2.c ****     #endif /* PWM2_UseStatus */
 462:Generated_Source\PSoC5/PWM2.c **** 
 463:Generated_Source\PSoC5/PWM2.c **** #endif /* !PWM2_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM2.c **** 
 465:Generated_Source\PSoC5/PWM2.c **** 
 466:Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_WritePeriod
 468:Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM2.c **** *
 470:Generated_Source\PSoC5/PWM2.c **** * Summary:
 471:Generated_Source\PSoC5/PWM2.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM2.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM2.c **** *
 474:Generated_Source\PSoC5/PWM2.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM2.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM2.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM2.c **** *
 478:Generated_Source\PSoC5/PWM2.c **** * Return:
 479:Generated_Source\PSoC5/PWM2.c **** *  None
 480:Generated_Source\PSoC5/PWM2.c **** *
 481:Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM2.c **** void PWM2_WritePeriod(uint16 period) 
 483:Generated_Source\PSoC5/PWM2.c **** {
 117              		.loc 1 483 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122              	.LVL1:
 484:Generated_Source\PSoC5/PWM2.c ****     #if(PWM2_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG16(PWM2_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM2.c ****     #else
 487:Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG16(PWM2_PERIOD_LSB_PTR, period);
 123              		.loc 1 487 0
 124 0000 014B     		ldr	r3, .L10
 125 0002 1880     		strh	r0, [r3]	@ movhi
 126 0004 7047     		bx	lr
 127              	.L11:
 128 0006 00BF     		.align	2
 129              	.L10:
 130 0008 9C680040 		.word	1073768604
 131              		.cfi_endproc
 132              	.LFE7:
 133              		.size	PWM2_WritePeriod, .-PWM2_WritePeriod
 134              		.section	.text.PWM2_WriteCompare,"ax",%progbits
 135              		.align	2
 136              		.global	PWM2_WriteCompare
 137              		.thumb
 138              		.thumb_func
 139              		.type	PWM2_WriteCompare, %function
 140              	PWM2_WriteCompare:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 12


 141              	.LFB8:
 488:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM2.c **** }
 490:Generated_Source\PSoC5/PWM2.c **** 
 491:Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM2.c **** 
 493:Generated_Source\PSoC5/PWM2.c **** 
 494:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteCompare
 496:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM2.c ****     *
 498:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM2.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM2.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM2.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM2.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM2.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM2.c ****     *
 505:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM2.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM2.c ****     *
 508:Generated_Source\PSoC5/PWM2.c ****     * Return:
 509:Generated_Source\PSoC5/PWM2.c ****     *  None
 510:Generated_Source\PSoC5/PWM2.c ****     *
 511:Generated_Source\PSoC5/PWM2.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM2.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM2.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM2.c ****     *
 515:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteCompare(uint16 compare) \
 517:Generated_Source\PSoC5/PWM2.c ****                                        
 518:Generated_Source\PSoC5/PWM2.c ****     {
 142              		.loc 1 518 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147              	.LVL2:
 519:Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/PWM2.c ****         #else
 522:Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE1_LSB_PTR, compare);
 148              		.loc 1 522 0
 149 0000 014B     		ldr	r3, .L13
 150 0002 1880     		strh	r0, [r3]	@ movhi
 151 0004 7047     		bx	lr
 152              	.L14:
 153 0006 00BF     		.align	2
 154              	.L13:
 155 0008 5C680040 		.word	1073768540
 156              		.cfi_endproc
 157              	.LFE8:
 158              		.size	PWM2_WriteCompare, .-PWM2_WriteCompare
 159              		.section	.text.PWM2_SetInterruptMode,"ax",%progbits
 160              		.align	2
 161              		.global	PWM2_SetInterruptMode
 162              		.thumb
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 13


 163              		.thumb_func
 164              		.type	PWM2_SetInterruptMode, %function
 165              	PWM2_SetInterruptMode:
 166              	.LFB9:
 523:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM2.c **** 
 525:Generated_Source\PSoC5/PWM2.c ****         #if (PWM2_PWMMode == PWM2__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM2.c ****             #if(PWM2_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM2.c ****                 CY_SET_REG16(PWM2_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM2.c ****             #else
 529:Generated_Source\PSoC5/PWM2.c ****                 CY_SET_REG16(PWM2_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_PWMMode == PWM2__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM2.c ****     }
 533:Generated_Source\PSoC5/PWM2.c **** 
 534:Generated_Source\PSoC5/PWM2.c **** 
 535:Generated_Source\PSoC5/PWM2.c **** #else
 536:Generated_Source\PSoC5/PWM2.c **** 
 537:Generated_Source\PSoC5/PWM2.c **** 
 538:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteCompare1
 540:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM2.c ****     *
 542:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM2.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM2.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM2.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM2.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM2.c ****     *
 548:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM2.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM2.c ****     *
 551:Generated_Source\PSoC5/PWM2.c ****     * Return:
 552:Generated_Source\PSoC5/PWM2.c ****     *  None
 553:Generated_Source\PSoC5/PWM2.c ****     *
 554:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteCompare1(uint16 compare) \
 556:Generated_Source\PSoC5/PWM2.c ****                                         
 557:Generated_Source\PSoC5/PWM2.c ****     {
 558:Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UsingFixedFunction)
 559:Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM2.c ****         #else
 561:Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM2.c ****     }
 564:Generated_Source\PSoC5/PWM2.c **** 
 565:Generated_Source\PSoC5/PWM2.c **** 
 566:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteCompare2
 568:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM2.c ****     *
 570:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM2.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM2.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM2.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM2.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM2.c ****     *  mode.
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 14


 576:Generated_Source\PSoC5/PWM2.c ****     *
 577:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM2.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM2.c ****     *
 580:Generated_Source\PSoC5/PWM2.c ****     * Return:
 581:Generated_Source\PSoC5/PWM2.c ****     *  None
 582:Generated_Source\PSoC5/PWM2.c ****     *
 583:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteCompare2(uint16 compare) \
 585:Generated_Source\PSoC5/PWM2.c ****                                         
 586:Generated_Source\PSoC5/PWM2.c ****     {
 587:Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM2.c ****         #else
 590:Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG16(PWM2_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM2.c ****     }
 593:Generated_Source\PSoC5/PWM2.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM2.c **** 
 595:Generated_Source\PSoC5/PWM2.c **** #if (PWM2_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM2.c **** 
 597:Generated_Source\PSoC5/PWM2.c **** 
 598:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteDeadTime
 600:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM2.c ****     *
 602:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM2.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM2.c ****     *
 605:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM2.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM2.c ****     *
 608:Generated_Source\PSoC5/PWM2.c ****     * Return:
 609:Generated_Source\PSoC5/PWM2.c ****     *  None
 610:Generated_Source\PSoC5/PWM2.c ****     *
 611:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM2.c ****     {
 614:Generated_Source\PSoC5/PWM2.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM2.c ****         #if(!PWM2_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM2.c ****             CY_SET_REG8(PWM2_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/PWM2.c ****         #else
 618:Generated_Source\PSoC5/PWM2.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM2.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM2.c ****             PWM2_DEADBAND_COUNT &= ((uint8)(~PWM2_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM2.c **** 
 622:Generated_Source\PSoC5/PWM2.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM2.c ****             #if(PWM2_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM2.c ****                 PWM2_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM2_DEADBAND_COUNT_SHIFT)) &
 625:Generated_Source\PSoC5/PWM2.c ****                                                     PWM2_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM2.c ****             #else
 627:Generated_Source\PSoC5/PWM2.c ****                 PWM2_DEADBAND_COUNT |= deadtime & PWM2_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM2.c **** 
 630:Generated_Source\PSoC5/PWM2.c ****         #endif /* (!PWM2_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM2.c ****     }
 632:Generated_Source\PSoC5/PWM2.c **** 
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 15


 633:Generated_Source\PSoC5/PWM2.c **** 
 634:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadDeadTime
 636:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM2.c ****     *
 638:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM2.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM2.c ****     *
 641:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM2.c ****     *  None
 643:Generated_Source\PSoC5/PWM2.c ****     *
 644:Generated_Source\PSoC5/PWM2.c ****     * Return:
 645:Generated_Source\PSoC5/PWM2.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM2.c ****     *
 647:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM2.c ****     uint8 PWM2_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM2.c ****     {
 650:Generated_Source\PSoC5/PWM2.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM2.c ****         #if(!PWM2_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM2.c ****             return (CY_GET_REG8(PWM2_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM2.c ****         #else
 654:Generated_Source\PSoC5/PWM2.c **** 
 655:Generated_Source\PSoC5/PWM2.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM2.c ****             #if(PWM2_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM2.c ****                 return ((uint8)(((uint8)(PWM2_DEADBAND_COUNT & PWM2_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/PWM2.c ****                                                                            PWM2_DEADBAND_COUNT_SHIF
 659:Generated_Source\PSoC5/PWM2.c ****             #else
 660:Generated_Source\PSoC5/PWM2.c ****                 return (PWM2_DEADBAND_COUNT & PWM2_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM2.c ****             #endif /* (PWM2_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM2.c ****         #endif /* (!PWM2_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM2.c ****     }
 664:Generated_Source\PSoC5/PWM2.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM2.c **** 
 666:Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseStatus || PWM2_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM2.c **** 
 668:Generated_Source\PSoC5/PWM2.c **** 
 669:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_SetInterruptMode
 671:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM2.c ****     *
 673:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM2.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM2.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM2.c ****     *
 677:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM2.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM2.c ****     *
 680:Generated_Source\PSoC5/PWM2.c ****     * Return:
 681:Generated_Source\PSoC5/PWM2.c ****     *  None
 682:Generated_Source\PSoC5/PWM2.c ****     *
 683:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM2.c ****     void PWM2_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM2.c ****     {
 167              		.loc 1 685 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 16


 171              		@ link register save eliminated.
 172              	.LVL3:
 686:Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG8(PWM2_STATUS_MASK_PTR, interruptMode);
 173              		.loc 1 686 0
 174 0000 014B     		ldr	r3, .L16
 175 0002 1870     		strb	r0, [r3]
 176 0004 7047     		bx	lr
 177              	.L17:
 178 0006 00BF     		.align	2
 179              	.L16:
 180 0008 8F640040 		.word	1073767567
 181              		.cfi_endproc
 182              	.LFE9:
 183              		.size	PWM2_SetInterruptMode, .-PWM2_SetInterruptMode
 184              		.section	.text.PWM2_ReadStatusRegister,"ax",%progbits
 185              		.align	2
 186              		.global	PWM2_ReadStatusRegister
 187              		.thumb
 188              		.thumb_func
 189              		.type	PWM2_ReadStatusRegister, %function
 190              	PWM2_ReadStatusRegister:
 191              	.LFB10:
 687:Generated_Source\PSoC5/PWM2.c ****     }
 688:Generated_Source\PSoC5/PWM2.c **** 
 689:Generated_Source\PSoC5/PWM2.c **** 
 690:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM2.c ****     *
 694:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM2.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM2.c ****     *
 697:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM2.c ****     *  None
 699:Generated_Source\PSoC5/PWM2.c ****     *
 700:Generated_Source\PSoC5/PWM2.c ****     * Return:
 701:Generated_Source\PSoC5/PWM2.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM2.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM2.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM2.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM2.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM2.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM2.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM2.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM2.c ****     *
 710:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM2.c ****     uint8 PWM2_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/PWM2.c ****     {
 192              		.loc 1 712 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 713:Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG8(PWM2_STATUS_PTR));
 197              		.loc 1 713 0
 198 0000 014B     		ldr	r3, .L19
 199 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 17


 714:Generated_Source\PSoC5/PWM2.c ****     }
 200              		.loc 1 714 0
 201 0004 7047     		bx	lr
 202              	.L20:
 203 0006 00BF     		.align	2
 204              	.L19:
 205 0008 6F640040 		.word	1073767535
 206              		.cfi_endproc
 207              	.LFE10:
 208              		.size	PWM2_ReadStatusRegister, .-PWM2_ReadStatusRegister
 209              		.section	.text.PWM2_ReadCapture,"ax",%progbits
 210              		.align	2
 211              		.global	PWM2_ReadCapture
 212              		.thumb
 213              		.thumb_func
 214              		.type	PWM2_ReadCapture, %function
 215              	PWM2_ReadCapture:
 216              	.LFB11:
 715:Generated_Source\PSoC5/PWM2.c **** 
 716:Generated_Source\PSoC5/PWM2.c **** #endif /* (PWM2_UseStatus || PWM2_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM2.c **** 
 718:Generated_Source\PSoC5/PWM2.c **** 
 719:Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseControl)
 720:Generated_Source\PSoC5/PWM2.c **** 
 721:Generated_Source\PSoC5/PWM2.c **** 
 722:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadControlRegister
 724:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM2.c ****     *
 726:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM2.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM2.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM2.c ****     *
 730:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM2.c ****     *  None
 732:Generated_Source\PSoC5/PWM2.c ****     *
 733:Generated_Source\PSoC5/PWM2.c ****     * Return:
 734:Generated_Source\PSoC5/PWM2.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM2.c ****     *
 736:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM2.c ****     uint8 PWM2_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM2.c ****     {
 739:Generated_Source\PSoC5/PWM2.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM2.c **** 
 741:Generated_Source\PSoC5/PWM2.c ****         result = CY_GET_REG8(PWM2_CONTROL_PTR);
 742:Generated_Source\PSoC5/PWM2.c ****         return (result);
 743:Generated_Source\PSoC5/PWM2.c ****     }
 744:Generated_Source\PSoC5/PWM2.c **** 
 745:Generated_Source\PSoC5/PWM2.c **** 
 746:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_WriteControlRegister
 748:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM2.c ****     *
 750:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM2.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM2.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM2.c ****     *
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 18


 754:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 755:Generated_Source\PSoC5/PWM2.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/PWM2.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM2.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM2.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM2.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM2.c ****     *
 761:Generated_Source\PSoC5/PWM2.c ****     * Return:
 762:Generated_Source\PSoC5/PWM2.c ****     *  None
 763:Generated_Source\PSoC5/PWM2.c ****     *
 764:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM2.c ****     void PWM2_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM2.c ****     {
 767:Generated_Source\PSoC5/PWM2.c ****         CY_SET_REG8(PWM2_CONTROL_PTR, control);
 768:Generated_Source\PSoC5/PWM2.c ****     }
 769:Generated_Source\PSoC5/PWM2.c **** 
 770:Generated_Source\PSoC5/PWM2.c **** #endif /* (PWM2_UseControl) */
 771:Generated_Source\PSoC5/PWM2.c **** 
 772:Generated_Source\PSoC5/PWM2.c **** 
 773:Generated_Source\PSoC5/PWM2.c **** #if (!PWM2_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM2.c **** 
 775:Generated_Source\PSoC5/PWM2.c **** 
 776:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCapture
 778:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM2.c ****     *
 780:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM2.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM2.c ****     *
 783:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM2.c ****     *  None
 785:Generated_Source\PSoC5/PWM2.c ****     *
 786:Generated_Source\PSoC5/PWM2.c ****     * Return:
 787:Generated_Source\PSoC5/PWM2.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM2.c ****     *
 789:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM2.c ****     {
 217              		.loc 1 791 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 792:Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_CAPTURE_LSB_PTR));
 222              		.loc 1 792 0
 223 0000 014B     		ldr	r3, .L22
 224 0002 1888     		ldrh	r0, [r3]
 793:Generated_Source\PSoC5/PWM2.c ****     }
 225              		.loc 1 793 0
 226 0004 80B2     		uxth	r0, r0
 227 0006 7047     		bx	lr
 228              	.L23:
 229              		.align	2
 230              	.L22:
 231 0008 BC680040 		.word	1073768636
 232              		.cfi_endproc
 233              	.LFE11:
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 19


 234              		.size	PWM2_ReadCapture, .-PWM2_ReadCapture
 235              		.section	.text.PWM2_ClearFIFO,"ax",%progbits
 236              		.align	2
 237              		.global	PWM2_ClearFIFO
 238              		.thumb
 239              		.thumb_func
 240              		.type	PWM2_ClearFIFO, %function
 241              	PWM2_ClearFIFO:
 242              	.LFB6:
 454:Generated_Source\PSoC5/PWM2.c ****             while(0u != (PWM2_ReadStatusRegister() & PWM2_STATUS_FIFONEMPTY))
 243              		.loc 1 454 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247 0000 08B5     		push	{r3, lr}
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 3, -8
 250              		.cfi_offset 14, -4
 455:Generated_Source\PSoC5/PWM2.c ****             {
 251              		.loc 1 455 0
 252 0002 01E0     		b	.L25
 253              	.L26:
 457:Generated_Source\PSoC5/PWM2.c ****             }
 254              		.loc 1 457 0
 255 0004 FFF7FEFF 		bl	PWM2_ReadCapture
 256              	.LVL4:
 257              	.L25:
 455:Generated_Source\PSoC5/PWM2.c ****             {
 258              		.loc 1 455 0
 259 0008 FFF7FEFF 		bl	PWM2_ReadStatusRegister
 260              	.LVL5:
 261 000c 10F0100F 		tst	r0, #16
 262 0010 F8D1     		bne	.L26
 459:Generated_Source\PSoC5/PWM2.c **** 
 263              		.loc 1 459 0
 264 0012 08BD     		pop	{r3, pc}
 265              		.cfi_endproc
 266              	.LFE6:
 267              		.size	PWM2_ClearFIFO, .-PWM2_ClearFIFO
 268              		.section	.text.PWM2_Init,"ax",%progbits
 269              		.align	2
 270              		.global	PWM2_Init
 271              		.thumb
 272              		.thumb_func
 273              		.type	PWM2_Init, %function
 274              	PWM2_Init:
 275              	.LFB1:
  85:Generated_Source\PSoC5/PWM2.c ****     #if (PWM2_UsingFixedFunction || PWM2_UseControl)
 276              		.loc 1 85 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280 0000 10B5     		push	{r4, lr}
 281              		.cfi_def_cfa_offset 8
 282              		.cfi_offset 4, -8
 283              		.cfi_offset 14, -4
 129:Generated_Source\PSoC5/PWM2.c ****             PWM2_AUX_CONTROLDP1 |= (PWM2_AUX_CTRL_FIFO0_CLR);
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 20


 284              		.loc 1 129 0
 285 0002 114A     		ldr	r2, .L30
 286 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 287 0006 43F00103 		orr	r3, r3, #1
 288 000a 1370     		strb	r3, [r2]
 130:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_Resolution == 8) */
 289              		.loc 1 130 0
 290 000c 0F4C     		ldr	r4, .L30+4
 291 000e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 292 0010 43F00103 		orr	r3, r3, #1
 293 0014 2370     		strb	r3, [r4]
 133:Generated_Source\PSoC5/PWM2.c ****     #endif /* (!PWM2_UsingFixedFunction) */
 294              		.loc 1 133 0
 295 0016 4FF48060 		mov	r0, #1024
 296 001a FFF7FEFF 		bl	PWM2_WriteCounter
 297              	.LVL6:
 136:Generated_Source\PSoC5/PWM2.c **** 
 298              		.loc 1 136 0
 299 001e 4FF48060 		mov	r0, #1024
 300 0022 FFF7FEFF 		bl	PWM2_WritePeriod
 301              	.LVL7:
 139:Generated_Source\PSoC5/PWM2.c ****         #else
 302              		.loc 1 139 0
 303 0026 7D20     		movs	r0, #125
 304 0028 FFF7FEFF 		bl	PWM2_WriteCompare
 305              	.LVL8:
 154:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UseStatus || PWM2_UsingFixedFunction) */
 306              		.loc 1 154 0
 307 002c 0020     		movs	r0, #0
 308 002e FFF7FEFF 		bl	PWM2_SetInterruptMode
 309              	.LVL9:
 167:Generated_Source\PSoC5/PWM2.c ****             /* Use the interrupt output of the status register for IRQ output */
 310              		.loc 1 167 0
 311 0032 FFF7FEFF 		bl	CyEnterCriticalSection
 312              	.LVL10:
 169:Generated_Source\PSoC5/PWM2.c **** 
 313              		.loc 1 169 0
 314 0036 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 315 0038 43F01003 		orr	r3, r3, #16
 316 003c 2370     		strb	r3, [r4]
 172:Generated_Source\PSoC5/PWM2.c **** 
 317              		.loc 1 172 0
 318 003e FFF7FEFF 		bl	CyExitCriticalSection
 319              	.LVL11:
 176:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UseStatus) */
 320              		.loc 1 176 0
 321 0042 FFF7FEFF 		bl	PWM2_ClearFIFO
 322              	.LVL12:
 323 0046 10BD     		pop	{r4, pc}
 324              	.L31:
 325              		.align	2
 326              	.L30:
 327 0048 9E640040 		.word	1073767582
 328 004c 9F640040 		.word	1073767583
 329              		.cfi_endproc
 330              	.LFE1:
 331              		.size	PWM2_Init, .-PWM2_Init
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 21


 332              		.section	.text.PWM2_Start,"ax",%progbits
 333              		.align	2
 334              		.global	PWM2_Start
 335              		.thumb
 336              		.thumb_func
 337              		.type	PWM2_Start, %function
 338              	PWM2_Start:
 339              	.LFB0:
  56:Generated_Source\PSoC5/PWM2.c ****     /* If not Initialized then initialize all required hardware and software */
 340              		.loc 1 56 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344 0000 08B5     		push	{r3, lr}
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 3, -8
 347              		.cfi_offset 14, -4
  58:Generated_Source\PSoC5/PWM2.c ****     {
 348              		.loc 1 58 0
 349 0002 044B     		ldr	r3, .L35
 350 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 351 0006 23B9     		cbnz	r3, .L32
  60:Generated_Source\PSoC5/PWM2.c ****         PWM2_initVar = 1u;
 352              		.loc 1 60 0
 353 0008 FFF7FEFF 		bl	PWM2_Init
 354              	.LVL13:
  61:Generated_Source\PSoC5/PWM2.c ****     }
 355              		.loc 1 61 0
 356 000c 0122     		movs	r2, #1
 357 000e 014B     		ldr	r3, .L35
 358 0010 1A70     		strb	r2, [r3]
 359              	.L32:
 360 0012 08BD     		pop	{r3, pc}
 361              	.L36:
 362              		.align	2
 363              	.L35:
 364 0014 00000000 		.word	.LANCHOR0
 365              		.cfi_endproc
 366              	.LFE0:
 367              		.size	PWM2_Start, .-PWM2_Start
 368              		.section	.text.PWM2_ReadCompare,"ax",%progbits
 369              		.align	2
 370              		.global	PWM2_ReadCompare
 371              		.thumb
 372              		.thumb_func
 373              		.type	PWM2_ReadCompare, %function
 374              	PWM2_ReadCompare:
 375              	.LFB12:
 794:Generated_Source\PSoC5/PWM2.c **** 
 795:Generated_Source\PSoC5/PWM2.c **** #endif /* (!PWM2_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM2.c **** 
 797:Generated_Source\PSoC5/PWM2.c **** 
 798:Generated_Source\PSoC5/PWM2.c **** #if (PWM2_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM2.c **** 
 800:Generated_Source\PSoC5/PWM2.c **** 
 801:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCompare
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 22


 803:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM2.c ****     *
 805:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM2.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM2.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM2.c ****     *
 809:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM2.c ****     *  None
 811:Generated_Source\PSoC5/PWM2.c ****     *
 812:Generated_Source\PSoC5/PWM2.c ****     * Return:
 813:Generated_Source\PSoC5/PWM2.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM2.c ****     *
 815:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM2.c ****     {
 376              		.loc 1 817 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 818:Generated_Source\PSoC5/PWM2.c ****         #if(PWM2_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM2.c ****             return ((uint16)CY_GET_REG16(PWM2_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM2.c ****         #else
 821:Generated_Source\PSoC5/PWM2.c ****             return (CY_GET_REG16(PWM2_COMPARE1_LSB_PTR));
 381              		.loc 1 821 0
 382 0000 014B     		ldr	r3, .L38
 383 0002 1888     		ldrh	r0, [r3]
 822:Generated_Source\PSoC5/PWM2.c ****         #endif /* (PWM2_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM2.c ****     }
 384              		.loc 1 823 0
 385 0004 80B2     		uxth	r0, r0
 386 0006 7047     		bx	lr
 387              	.L39:
 388              		.align	2
 389              	.L38:
 390 0008 5C680040 		.word	1073768540
 391              		.cfi_endproc
 392              	.LFE12:
 393              		.size	PWM2_ReadCompare, .-PWM2_ReadCompare
 394              		.section	.text.PWM2_ReadPeriod,"ax",%progbits
 395              		.align	2
 396              		.global	PWM2_ReadPeriod
 397              		.thumb
 398              		.thumb_func
 399              		.type	PWM2_ReadPeriod, %function
 400              	PWM2_ReadPeriod:
 401              	.LFB13:
 824:Generated_Source\PSoC5/PWM2.c **** 
 825:Generated_Source\PSoC5/PWM2.c **** #else
 826:Generated_Source\PSoC5/PWM2.c **** 
 827:Generated_Source\PSoC5/PWM2.c **** 
 828:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCompare1
 830:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM2.c ****     *
 832:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM2.c ****     *  Reads the compare value for the compare1 output.
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 23


 834:Generated_Source\PSoC5/PWM2.c ****     *
 835:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM2.c ****     *  None
 837:Generated_Source\PSoC5/PWM2.c ****     *
 838:Generated_Source\PSoC5/PWM2.c ****     * Return:
 839:Generated_Source\PSoC5/PWM2.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM2.c ****     *
 841:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM2.c ****     {
 844:Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/PWM2.c ****     }
 846:Generated_Source\PSoC5/PWM2.c **** 
 847:Generated_Source\PSoC5/PWM2.c **** 
 848:Generated_Source\PSoC5/PWM2.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM2.c ****     * Function Name: PWM2_ReadCompare2
 850:Generated_Source\PSoC5/PWM2.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM2.c ****     *
 852:Generated_Source\PSoC5/PWM2.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM2.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM2.c ****     *
 855:Generated_Source\PSoC5/PWM2.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM2.c ****     *  None
 857:Generated_Source\PSoC5/PWM2.c ****     *
 858:Generated_Source\PSoC5/PWM2.c ****     * Return:
 859:Generated_Source\PSoC5/PWM2.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM2.c ****     *
 861:Generated_Source\PSoC5/PWM2.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM2.c ****     uint16 PWM2_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM2.c ****     {
 864:Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM2.c ****     }
 866:Generated_Source\PSoC5/PWM2.c **** 
 867:Generated_Source\PSoC5/PWM2.c **** #endif /* (PWM2_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM2.c **** 
 869:Generated_Source\PSoC5/PWM2.c **** 
 870:Generated_Source\PSoC5/PWM2.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM2.c **** * Function Name: PWM2_ReadPeriod
 872:Generated_Source\PSoC5/PWM2.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM2.c **** *
 874:Generated_Source\PSoC5/PWM2.c **** * Summary:
 875:Generated_Source\PSoC5/PWM2.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM2.c **** *
 877:Generated_Source\PSoC5/PWM2.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM2.c **** *  None
 879:Generated_Source\PSoC5/PWM2.c **** *
 880:Generated_Source\PSoC5/PWM2.c **** * Return:
 881:Generated_Source\PSoC5/PWM2.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM2.c **** *
 883:Generated_Source\PSoC5/PWM2.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM2.c **** uint16 PWM2_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM2.c **** {
 402              		.loc 1 885 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              		@ link register save eliminated.
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 24


 886:Generated_Source\PSoC5/PWM2.c ****     #if(PWM2_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM2.c ****         return ((uint16)CY_GET_REG16(PWM2_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM2.c ****     #else
 889:Generated_Source\PSoC5/PWM2.c ****         return (CY_GET_REG16(PWM2_PERIOD_LSB_PTR));
 407              		.loc 1 889 0
 408 0000 014B     		ldr	r3, .L41
 409 0002 1888     		ldrh	r0, [r3]
 890:Generated_Source\PSoC5/PWM2.c ****     #endif /* (PWM2_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM2.c **** }
 410              		.loc 1 891 0
 411 0004 80B2     		uxth	r0, r0
 412 0006 7047     		bx	lr
 413              	.L42:
 414              		.align	2
 415              	.L41:
 416 0008 9C680040 		.word	1073768604
 417              		.cfi_endproc
 418              	.LFE13:
 419              		.size	PWM2_ReadPeriod, .-PWM2_ReadPeriod
 420              		.global	PWM2_initVar
 421              		.bss
 422              		.set	.LANCHOR0,. + 0
 423              		.type	PWM2_initVar, %object
 424              		.size	PWM2_initVar, 1
 425              	PWM2_initVar:
 426 0000 00       		.space	1
 427              		.text
 428              	.Letext0:
 429              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 430              		.file 3 "Generated_Source\\PSoC5\\CyLib.h"
 431              		.section	.debug_info,"",%progbits
 432              	.Ldebug_info0:
 433 0000 E9020000 		.4byte	0x2e9
 434 0004 0400     		.2byte	0x4
 435 0006 00000000 		.4byte	.Ldebug_abbrev0
 436 000a 04       		.byte	0x4
 437 000b 01       		.uleb128 0x1
 438 000c E8000000 		.4byte	.LASF38
 439 0010 0C       		.byte	0xc
 440 0011 03020000 		.4byte	.LASF39
 441 0015 52000000 		.4byte	.LASF40
 442 0019 00000000 		.4byte	.Ldebug_ranges0+0
 443 001d 00000000 		.4byte	0
 444 0021 00000000 		.4byte	.Ldebug_line0
 445 0025 02       		.uleb128 0x2
 446 0026 01       		.byte	0x1
 447 0027 06       		.byte	0x6
 448 0028 AF020000 		.4byte	.LASF0
 449 002c 02       		.uleb128 0x2
 450 002d 01       		.byte	0x1
 451 002e 08       		.byte	0x8
 452 002f DA000000 		.4byte	.LASF1
 453 0033 02       		.uleb128 0x2
 454 0034 02       		.byte	0x2
 455 0035 05       		.byte	0x5
 456 0036 9A010000 		.4byte	.LASF2
 457 003a 02       		.uleb128 0x2
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 25


 458 003b 02       		.byte	0x2
 459 003c 07       		.byte	0x7
 460 003d 1F000000 		.4byte	.LASF3
 461 0041 02       		.uleb128 0x2
 462 0042 04       		.byte	0x4
 463 0043 05       		.byte	0x5
 464 0044 95020000 		.4byte	.LASF4
 465 0048 02       		.uleb128 0x2
 466 0049 04       		.byte	0x4
 467 004a 07       		.byte	0x7
 468 004b 7B010000 		.4byte	.LASF5
 469 004f 02       		.uleb128 0x2
 470 0050 08       		.byte	0x8
 471 0051 05       		.byte	0x5
 472 0052 56020000 		.4byte	.LASF6
 473 0056 02       		.uleb128 0x2
 474 0057 08       		.byte	0x8
 475 0058 07       		.byte	0x7
 476 0059 A6000000 		.4byte	.LASF7
 477 005d 03       		.uleb128 0x3
 478 005e 04       		.byte	0x4
 479 005f 05       		.byte	0x5
 480 0060 696E7400 		.ascii	"int\000"
 481 0064 02       		.uleb128 0x2
 482 0065 04       		.byte	0x4
 483 0066 07       		.byte	0x7
 484 0067 E0010000 		.4byte	.LASF8
 485 006b 04       		.uleb128 0x4
 486 006c 8D010000 		.4byte	.LASF9
 487 0070 02       		.byte	0x2
 488 0071 E401     		.2byte	0x1e4
 489 0073 2C000000 		.4byte	0x2c
 490 0077 04       		.uleb128 0x4
 491 0078 A4010000 		.4byte	.LASF10
 492 007c 02       		.byte	0x2
 493 007d E501     		.2byte	0x1e5
 494 007f 3A000000 		.4byte	0x3a
 495 0083 02       		.uleb128 0x2
 496 0084 04       		.byte	0x4
 497 0085 04       		.byte	0x4
 498 0086 98000000 		.4byte	.LASF11
 499 008a 02       		.uleb128 0x2
 500 008b 08       		.byte	0x8
 501 008c 04       		.byte	0x4
 502 008d 93010000 		.4byte	.LASF12
 503 0091 02       		.uleb128 0x2
 504 0092 01       		.byte	0x1
 505 0093 08       		.byte	0x8
 506 0094 9E020000 		.4byte	.LASF13
 507 0098 04       		.uleb128 0x4
 508 0099 76010000 		.4byte	.LASF14
 509 009d 02       		.byte	0x2
 510 009e 8E02     		.2byte	0x28e
 511 00a0 A4000000 		.4byte	0xa4
 512 00a4 05       		.uleb128 0x5
 513 00a5 6B000000 		.4byte	0x6b
 514 00a9 04       		.uleb128 0x4
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 26


 515 00aa 00000000 		.4byte	.LASF15
 516 00ae 02       		.byte	0x2
 517 00af 8F02     		.2byte	0x28f
 518 00b1 B5000000 		.4byte	0xb5
 519 00b5 05       		.uleb128 0x5
 520 00b6 77000000 		.4byte	0x77
 521 00ba 02       		.uleb128 0x2
 522 00bb 08       		.byte	0x8
 523 00bc 04       		.byte	0x4
 524 00bd A3020000 		.4byte	.LASF16
 525 00c1 02       		.uleb128 0x2
 526 00c2 04       		.byte	0x4
 527 00c3 07       		.byte	0x7
 528 00c4 4D020000 		.4byte	.LASF17
 529 00c8 06       		.uleb128 0x6
 530 00c9 CE000000 		.4byte	.LASF18
 531 00cd 01       		.byte	0x1
 532 00ce C7       		.byte	0xc7
 533 00cf 00000000 		.4byte	.LFB2
 534 00d3 02000000 		.4byte	.LFE2-.LFB2
 535 00d7 01       		.uleb128 0x1
 536 00d8 9C       		.byte	0x9c
 537 00d9 06       		.uleb128 0x6
 538 00da BF010000 		.4byte	.LASF19
 539 00de 01       		.byte	0x1
 540 00df E9       		.byte	0xe9
 541 00e0 00000000 		.4byte	.LFB3
 542 00e4 02000000 		.4byte	.LFE3-.LFB3
 543 00e8 01       		.uleb128 0x1
 544 00e9 9C       		.byte	0x9c
 545 00ea 07       		.uleb128 0x7
 546 00eb 06000000 		.4byte	.LASF20
 547 00ef 01       		.byte	0x1
 548 00f0 9301     		.2byte	0x193
 549 00f2 00000000 		.4byte	.LFB4
 550 00f6 0C000000 		.4byte	.LFE4-.LFB4
 551 00fa 01       		.uleb128 0x1
 552 00fb 9C       		.byte	0x9c
 553 00fc 0F010000 		.4byte	0x10f
 554 0100 08       		.uleb128 0x8
 555 0101 9E000000 		.4byte	.LASF22
 556 0105 01       		.byte	0x1
 557 0106 9301     		.2byte	0x193
 558 0108 77000000 		.4byte	0x77
 559 010c 01       		.uleb128 0x1
 560 010d 50       		.byte	0x50
 561 010e 00       		.byte	0
 562 010f 09       		.uleb128 0x9
 563 0110 DF020000 		.4byte	.LASF28
 564 0114 01       		.byte	0x1
 565 0115 A901     		.2byte	0x1a9
 566 0117 77000000 		.4byte	0x77
 567 011b 00000000 		.4byte	.LFB5
 568 011f 14000000 		.4byte	.LFE5-.LFB5
 569 0123 01       		.uleb128 0x1
 570 0124 9C       		.byte	0x9c
 571 0125 07       		.uleb128 0x7
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 27


 572 0126 BD000000 		.4byte	.LASF21
 573 012a 01       		.byte	0x1
 574 012b E201     		.2byte	0x1e2
 575 012d 00000000 		.4byte	.LFB7
 576 0131 0C000000 		.4byte	.LFE7-.LFB7
 577 0135 01       		.uleb128 0x1
 578 0136 9C       		.byte	0x9c
 579 0137 4A010000 		.4byte	0x14a
 580 013b 08       		.uleb128 0x8
 581 013c 18000000 		.4byte	.LASF23
 582 0140 01       		.byte	0x1
 583 0141 E201     		.2byte	0x1e2
 584 0143 77000000 		.4byte	0x77
 585 0147 01       		.uleb128 0x1
 586 0148 50       		.byte	0x50
 587 0149 00       		.byte	0
 588 014a 07       		.uleb128 0x7
 589 014b 64020000 		.4byte	.LASF24
 590 014f 01       		.byte	0x1
 591 0150 0402     		.2byte	0x204
 592 0152 00000000 		.4byte	.LFB8
 593 0156 0C000000 		.4byte	.LFE8-.LFB8
 594 015a 01       		.uleb128 0x1
 595 015b 9C       		.byte	0x9c
 596 015c 6F010000 		.4byte	0x16f
 597 0160 08       		.uleb128 0x8
 598 0161 BB020000 		.4byte	.LASF25
 599 0165 01       		.byte	0x1
 600 0166 0402     		.2byte	0x204
 601 0168 77000000 		.4byte	0x77
 602 016c 01       		.uleb128 0x1
 603 016d 50       		.byte	0x50
 604 016e 00       		.byte	0
 605 016f 07       		.uleb128 0x7
 606 0170 32000000 		.4byte	.LASF26
 607 0174 01       		.byte	0x1
 608 0175 AC02     		.2byte	0x2ac
 609 0177 00000000 		.4byte	.LFB9
 610 017b 0C000000 		.4byte	.LFE9-.LFB9
 611 017f 01       		.uleb128 0x1
 612 0180 9C       		.byte	0x9c
 613 0181 94010000 		.4byte	0x194
 614 0185 08       		.uleb128 0x8
 615 0186 76020000 		.4byte	.LASF27
 616 018a 01       		.byte	0x1
 617 018b AC02     		.2byte	0x2ac
 618 018d 6B000000 		.4byte	0x6b
 619 0191 01       		.uleb128 0x1
 620 0192 50       		.byte	0x50
 621 0193 00       		.byte	0
 622 0194 09       		.uleb128 0x9
 623 0195 F0020000 		.4byte	.LASF29
 624 0199 01       		.byte	0x1
 625 019a C702     		.2byte	0x2c7
 626 019c 6B000000 		.4byte	0x6b
 627 01a0 00000000 		.4byte	.LFB10
 628 01a4 0C000000 		.4byte	.LFE10-.LFB10
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 28


 629 01a8 01       		.uleb128 0x1
 630 01a9 9C       		.byte	0x9c
 631 01aa 09       		.uleb128 0x9
 632 01ab 84020000 		.4byte	.LASF30
 633 01af 01       		.byte	0x1
 634 01b0 1603     		.2byte	0x316
 635 01b2 77000000 		.4byte	0x77
 636 01b6 00000000 		.4byte	.LFB11
 637 01ba 0C000000 		.4byte	.LFE11-.LFB11
 638 01be 01       		.uleb128 0x1
 639 01bf 9C       		.byte	0x9c
 640 01c0 07       		.uleb128 0x7
 641 01c1 D0020000 		.4byte	.LASF31
 642 01c5 01       		.byte	0x1
 643 01c6 C501     		.2byte	0x1c5
 644 01c8 00000000 		.4byte	.LFB6
 645 01cc 14000000 		.4byte	.LFE6-.LFB6
 646 01d0 01       		.uleb128 0x1
 647 01d1 9C       		.byte	0x9c
 648 01d2 E9010000 		.4byte	0x1e9
 649 01d6 0A       		.uleb128 0xa
 650 01d7 08000000 		.4byte	.LVL4
 651 01db AA010000 		.4byte	0x1aa
 652 01df 0A       		.uleb128 0xa
 653 01e0 0C000000 		.4byte	.LVL5
 654 01e4 94010000 		.4byte	0x194
 655 01e8 00       		.byte	0
 656 01e9 0B       		.uleb128 0xb
 657 01ea 48000000 		.4byte	.LASF32
 658 01ee 01       		.byte	0x1
 659 01ef 54       		.byte	0x54
 660 01f0 00000000 		.4byte	.LFB1
 661 01f4 50000000 		.4byte	.LFE1-.LFB1
 662 01f8 01       		.uleb128 0x1
 663 01f9 9C       		.byte	0x9c
 664 01fa 7A020000 		.4byte	0x27a
 665 01fe 0C       		.uleb128 0xc
 666 01ff AB010000 		.4byte	.LASF41
 667 0203 01       		.byte	0x1
 668 0204 5D       		.byte	0x5d
 669 0205 6B000000 		.4byte	0x6b
 670 0209 00000000 		.4byte	.LLST0
 671 020d 0D       		.uleb128 0xd
 672 020e 1E000000 		.4byte	.LVL6
 673 0212 EA000000 		.4byte	0xea
 674 0216 22020000 		.4byte	0x222
 675 021a 0E       		.uleb128 0xe
 676 021b 01       		.uleb128 0x1
 677 021c 50       		.byte	0x50
 678 021d 03       		.uleb128 0x3
 679 021e 0A       		.byte	0xa
 680 021f 0004     		.2byte	0x400
 681 0221 00       		.byte	0
 682 0222 0D       		.uleb128 0xd
 683 0223 26000000 		.4byte	.LVL7
 684 0227 25010000 		.4byte	0x125
 685 022b 37020000 		.4byte	0x237
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 29


 686 022f 0E       		.uleb128 0xe
 687 0230 01       		.uleb128 0x1
 688 0231 50       		.byte	0x50
 689 0232 03       		.uleb128 0x3
 690 0233 0A       		.byte	0xa
 691 0234 0004     		.2byte	0x400
 692 0236 00       		.byte	0
 693 0237 0D       		.uleb128 0xd
 694 0238 2C000000 		.4byte	.LVL8
 695 023c 4A010000 		.4byte	0x14a
 696 0240 4B020000 		.4byte	0x24b
 697 0244 0E       		.uleb128 0xe
 698 0245 01       		.uleb128 0x1
 699 0246 50       		.byte	0x50
 700 0247 02       		.uleb128 0x2
 701 0248 08       		.byte	0x8
 702 0249 7D       		.byte	0x7d
 703 024a 00       		.byte	0
 704 024b 0D       		.uleb128 0xd
 705 024c 32000000 		.4byte	.LVL9
 706 0250 6F010000 		.4byte	0x16f
 707 0254 5E020000 		.4byte	0x25e
 708 0258 0E       		.uleb128 0xe
 709 0259 01       		.uleb128 0x1
 710 025a 50       		.byte	0x50
 711 025b 01       		.uleb128 0x1
 712 025c 30       		.byte	0x30
 713 025d 00       		.byte	0
 714 025e 0A       		.uleb128 0xa
 715 025f 36000000 		.4byte	.LVL10
 716 0263 D6020000 		.4byte	0x2d6
 717 0267 0A       		.uleb128 0xa
 718 0268 42000000 		.4byte	.LVL11
 719 026c E1020000 		.4byte	0x2e1
 720 0270 0A       		.uleb128 0xa
 721 0271 46000000 		.4byte	.LVL12
 722 0275 C0010000 		.4byte	0x1c0
 723 0279 00       		.byte	0
 724 027a 0B       		.uleb128 0xb
 725 027b 32020000 		.4byte	.LASF33
 726 027f 01       		.byte	0x1
 727 0280 37       		.byte	0x37
 728 0281 00000000 		.4byte	.LFB0
 729 0285 18000000 		.4byte	.LFE0-.LFB0
 730 0289 01       		.uleb128 0x1
 731 028a 9C       		.byte	0x9c
 732 028b 99020000 		.4byte	0x299
 733 028f 0A       		.uleb128 0xa
 734 0290 0C000000 		.4byte	.LVL13
 735 0294 E9010000 		.4byte	0x1e9
 736 0298 00       		.byte	0
 737 0299 09       		.uleb128 0x9
 738 029a 21020000 		.4byte	.LASF34
 739 029e 01       		.byte	0x1
 740 029f 3003     		.2byte	0x330
 741 02a1 77000000 		.4byte	0x77
 742 02a5 00000000 		.4byte	.LFB12
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 30


 743 02a9 0C000000 		.4byte	.LFE12-.LFB12
 744 02ad 01       		.uleb128 0x1
 745 02ae 9C       		.byte	0x9c
 746 02af 09       		.uleb128 0x9
 747 02b0 3D020000 		.4byte	.LASF35
 748 02b4 01       		.byte	0x1
 749 02b5 7403     		.2byte	0x374
 750 02b7 77000000 		.4byte	0x77
 751 02bb 00000000 		.4byte	.LFB13
 752 02bf 0C000000 		.4byte	.LFE13-.LFB13
 753 02c3 01       		.uleb128 0x1
 754 02c4 9C       		.byte	0x9c
 755 02c5 0F       		.uleb128 0xf
 756 02c6 C3020000 		.4byte	.LASF42
 757 02ca 01       		.byte	0x1
 758 02cb 20       		.byte	0x20
 759 02cc 6B000000 		.4byte	0x6b
 760 02d0 05       		.uleb128 0x5
 761 02d1 03       		.byte	0x3
 762 02d2 00000000 		.4byte	PWM2_initVar
 763 02d6 10       		.uleb128 0x10
 764 02d7 C9010000 		.4byte	.LASF36
 765 02db C9010000 		.4byte	.LASF36
 766 02df 03       		.byte	0x3
 767 02e0 7D       		.byte	0x7d
 768 02e1 10       		.uleb128 0x10
 769 02e2 ED010000 		.4byte	.LASF37
 770 02e6 ED010000 		.4byte	.LASF37
 771 02ea 03       		.byte	0x3
 772 02eb 7E       		.byte	0x7e
 773 02ec 00       		.byte	0
 774              		.section	.debug_abbrev,"",%progbits
 775              	.Ldebug_abbrev0:
 776 0000 01       		.uleb128 0x1
 777 0001 11       		.uleb128 0x11
 778 0002 01       		.byte	0x1
 779 0003 25       		.uleb128 0x25
 780 0004 0E       		.uleb128 0xe
 781 0005 13       		.uleb128 0x13
 782 0006 0B       		.uleb128 0xb
 783 0007 03       		.uleb128 0x3
 784 0008 0E       		.uleb128 0xe
 785 0009 1B       		.uleb128 0x1b
 786 000a 0E       		.uleb128 0xe
 787 000b 55       		.uleb128 0x55
 788 000c 17       		.uleb128 0x17
 789 000d 11       		.uleb128 0x11
 790 000e 01       		.uleb128 0x1
 791 000f 10       		.uleb128 0x10
 792 0010 17       		.uleb128 0x17
 793 0011 00       		.byte	0
 794 0012 00       		.byte	0
 795 0013 02       		.uleb128 0x2
 796 0014 24       		.uleb128 0x24
 797 0015 00       		.byte	0
 798 0016 0B       		.uleb128 0xb
 799 0017 0B       		.uleb128 0xb
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 31


 800 0018 3E       		.uleb128 0x3e
 801 0019 0B       		.uleb128 0xb
 802 001a 03       		.uleb128 0x3
 803 001b 0E       		.uleb128 0xe
 804 001c 00       		.byte	0
 805 001d 00       		.byte	0
 806 001e 03       		.uleb128 0x3
 807 001f 24       		.uleb128 0x24
 808 0020 00       		.byte	0
 809 0021 0B       		.uleb128 0xb
 810 0022 0B       		.uleb128 0xb
 811 0023 3E       		.uleb128 0x3e
 812 0024 0B       		.uleb128 0xb
 813 0025 03       		.uleb128 0x3
 814 0026 08       		.uleb128 0x8
 815 0027 00       		.byte	0
 816 0028 00       		.byte	0
 817 0029 04       		.uleb128 0x4
 818 002a 16       		.uleb128 0x16
 819 002b 00       		.byte	0
 820 002c 03       		.uleb128 0x3
 821 002d 0E       		.uleb128 0xe
 822 002e 3A       		.uleb128 0x3a
 823 002f 0B       		.uleb128 0xb
 824 0030 3B       		.uleb128 0x3b
 825 0031 05       		.uleb128 0x5
 826 0032 49       		.uleb128 0x49
 827 0033 13       		.uleb128 0x13
 828 0034 00       		.byte	0
 829 0035 00       		.byte	0
 830 0036 05       		.uleb128 0x5
 831 0037 35       		.uleb128 0x35
 832 0038 00       		.byte	0
 833 0039 49       		.uleb128 0x49
 834 003a 13       		.uleb128 0x13
 835 003b 00       		.byte	0
 836 003c 00       		.byte	0
 837 003d 06       		.uleb128 0x6
 838 003e 2E       		.uleb128 0x2e
 839 003f 00       		.byte	0
 840 0040 3F       		.uleb128 0x3f
 841 0041 19       		.uleb128 0x19
 842 0042 03       		.uleb128 0x3
 843 0043 0E       		.uleb128 0xe
 844 0044 3A       		.uleb128 0x3a
 845 0045 0B       		.uleb128 0xb
 846 0046 3B       		.uleb128 0x3b
 847 0047 0B       		.uleb128 0xb
 848 0048 27       		.uleb128 0x27
 849 0049 19       		.uleb128 0x19
 850 004a 11       		.uleb128 0x11
 851 004b 01       		.uleb128 0x1
 852 004c 12       		.uleb128 0x12
 853 004d 06       		.uleb128 0x6
 854 004e 40       		.uleb128 0x40
 855 004f 18       		.uleb128 0x18
 856 0050 9742     		.uleb128 0x2117
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 32


 857 0052 19       		.uleb128 0x19
 858 0053 00       		.byte	0
 859 0054 00       		.byte	0
 860 0055 07       		.uleb128 0x7
 861 0056 2E       		.uleb128 0x2e
 862 0057 01       		.byte	0x1
 863 0058 3F       		.uleb128 0x3f
 864 0059 19       		.uleb128 0x19
 865 005a 03       		.uleb128 0x3
 866 005b 0E       		.uleb128 0xe
 867 005c 3A       		.uleb128 0x3a
 868 005d 0B       		.uleb128 0xb
 869 005e 3B       		.uleb128 0x3b
 870 005f 05       		.uleb128 0x5
 871 0060 27       		.uleb128 0x27
 872 0061 19       		.uleb128 0x19
 873 0062 11       		.uleb128 0x11
 874 0063 01       		.uleb128 0x1
 875 0064 12       		.uleb128 0x12
 876 0065 06       		.uleb128 0x6
 877 0066 40       		.uleb128 0x40
 878 0067 18       		.uleb128 0x18
 879 0068 9742     		.uleb128 0x2117
 880 006a 19       		.uleb128 0x19
 881 006b 01       		.uleb128 0x1
 882 006c 13       		.uleb128 0x13
 883 006d 00       		.byte	0
 884 006e 00       		.byte	0
 885 006f 08       		.uleb128 0x8
 886 0070 05       		.uleb128 0x5
 887 0071 00       		.byte	0
 888 0072 03       		.uleb128 0x3
 889 0073 0E       		.uleb128 0xe
 890 0074 3A       		.uleb128 0x3a
 891 0075 0B       		.uleb128 0xb
 892 0076 3B       		.uleb128 0x3b
 893 0077 05       		.uleb128 0x5
 894 0078 49       		.uleb128 0x49
 895 0079 13       		.uleb128 0x13
 896 007a 02       		.uleb128 0x2
 897 007b 18       		.uleb128 0x18
 898 007c 00       		.byte	0
 899 007d 00       		.byte	0
 900 007e 09       		.uleb128 0x9
 901 007f 2E       		.uleb128 0x2e
 902 0080 00       		.byte	0
 903 0081 3F       		.uleb128 0x3f
 904 0082 19       		.uleb128 0x19
 905 0083 03       		.uleb128 0x3
 906 0084 0E       		.uleb128 0xe
 907 0085 3A       		.uleb128 0x3a
 908 0086 0B       		.uleb128 0xb
 909 0087 3B       		.uleb128 0x3b
 910 0088 05       		.uleb128 0x5
 911 0089 27       		.uleb128 0x27
 912 008a 19       		.uleb128 0x19
 913 008b 49       		.uleb128 0x49
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 33


 914 008c 13       		.uleb128 0x13
 915 008d 11       		.uleb128 0x11
 916 008e 01       		.uleb128 0x1
 917 008f 12       		.uleb128 0x12
 918 0090 06       		.uleb128 0x6
 919 0091 40       		.uleb128 0x40
 920 0092 18       		.uleb128 0x18
 921 0093 9742     		.uleb128 0x2117
 922 0095 19       		.uleb128 0x19
 923 0096 00       		.byte	0
 924 0097 00       		.byte	0
 925 0098 0A       		.uleb128 0xa
 926 0099 898201   		.uleb128 0x4109
 927 009c 00       		.byte	0
 928 009d 11       		.uleb128 0x11
 929 009e 01       		.uleb128 0x1
 930 009f 31       		.uleb128 0x31
 931 00a0 13       		.uleb128 0x13
 932 00a1 00       		.byte	0
 933 00a2 00       		.byte	0
 934 00a3 0B       		.uleb128 0xb
 935 00a4 2E       		.uleb128 0x2e
 936 00a5 01       		.byte	0x1
 937 00a6 3F       		.uleb128 0x3f
 938 00a7 19       		.uleb128 0x19
 939 00a8 03       		.uleb128 0x3
 940 00a9 0E       		.uleb128 0xe
 941 00aa 3A       		.uleb128 0x3a
 942 00ab 0B       		.uleb128 0xb
 943 00ac 3B       		.uleb128 0x3b
 944 00ad 0B       		.uleb128 0xb
 945 00ae 27       		.uleb128 0x27
 946 00af 19       		.uleb128 0x19
 947 00b0 11       		.uleb128 0x11
 948 00b1 01       		.uleb128 0x1
 949 00b2 12       		.uleb128 0x12
 950 00b3 06       		.uleb128 0x6
 951 00b4 40       		.uleb128 0x40
 952 00b5 18       		.uleb128 0x18
 953 00b6 9742     		.uleb128 0x2117
 954 00b8 19       		.uleb128 0x19
 955 00b9 01       		.uleb128 0x1
 956 00ba 13       		.uleb128 0x13
 957 00bb 00       		.byte	0
 958 00bc 00       		.byte	0
 959 00bd 0C       		.uleb128 0xc
 960 00be 34       		.uleb128 0x34
 961 00bf 00       		.byte	0
 962 00c0 03       		.uleb128 0x3
 963 00c1 0E       		.uleb128 0xe
 964 00c2 3A       		.uleb128 0x3a
 965 00c3 0B       		.uleb128 0xb
 966 00c4 3B       		.uleb128 0x3b
 967 00c5 0B       		.uleb128 0xb
 968 00c6 49       		.uleb128 0x49
 969 00c7 13       		.uleb128 0x13
 970 00c8 02       		.uleb128 0x2
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 34


 971 00c9 17       		.uleb128 0x17
 972 00ca 00       		.byte	0
 973 00cb 00       		.byte	0
 974 00cc 0D       		.uleb128 0xd
 975 00cd 898201   		.uleb128 0x4109
 976 00d0 01       		.byte	0x1
 977 00d1 11       		.uleb128 0x11
 978 00d2 01       		.uleb128 0x1
 979 00d3 31       		.uleb128 0x31
 980 00d4 13       		.uleb128 0x13
 981 00d5 01       		.uleb128 0x1
 982 00d6 13       		.uleb128 0x13
 983 00d7 00       		.byte	0
 984 00d8 00       		.byte	0
 985 00d9 0E       		.uleb128 0xe
 986 00da 8A8201   		.uleb128 0x410a
 987 00dd 00       		.byte	0
 988 00de 02       		.uleb128 0x2
 989 00df 18       		.uleb128 0x18
 990 00e0 9142     		.uleb128 0x2111
 991 00e2 18       		.uleb128 0x18
 992 00e3 00       		.byte	0
 993 00e4 00       		.byte	0
 994 00e5 0F       		.uleb128 0xf
 995 00e6 34       		.uleb128 0x34
 996 00e7 00       		.byte	0
 997 00e8 03       		.uleb128 0x3
 998 00e9 0E       		.uleb128 0xe
 999 00ea 3A       		.uleb128 0x3a
 1000 00eb 0B       		.uleb128 0xb
 1001 00ec 3B       		.uleb128 0x3b
 1002 00ed 0B       		.uleb128 0xb
 1003 00ee 49       		.uleb128 0x49
 1004 00ef 13       		.uleb128 0x13
 1005 00f0 3F       		.uleb128 0x3f
 1006 00f1 19       		.uleb128 0x19
 1007 00f2 02       		.uleb128 0x2
 1008 00f3 18       		.uleb128 0x18
 1009 00f4 00       		.byte	0
 1010 00f5 00       		.byte	0
 1011 00f6 10       		.uleb128 0x10
 1012 00f7 2E       		.uleb128 0x2e
 1013 00f8 00       		.byte	0
 1014 00f9 3F       		.uleb128 0x3f
 1015 00fa 19       		.uleb128 0x19
 1016 00fb 3C       		.uleb128 0x3c
 1017 00fc 19       		.uleb128 0x19
 1018 00fd 6E       		.uleb128 0x6e
 1019 00fe 0E       		.uleb128 0xe
 1020 00ff 03       		.uleb128 0x3
 1021 0100 0E       		.uleb128 0xe
 1022 0101 3A       		.uleb128 0x3a
 1023 0102 0B       		.uleb128 0xb
 1024 0103 3B       		.uleb128 0x3b
 1025 0104 0B       		.uleb128 0xb
 1026 0105 00       		.byte	0
 1027 0106 00       		.byte	0
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 35


 1028 0107 00       		.byte	0
 1029              		.section	.debug_loc,"",%progbits
 1030              	.Ldebug_loc0:
 1031              	.LLST0:
 1032 0000 36000000 		.4byte	.LVL10
 1033 0004 41000000 		.4byte	.LVL11-1
 1034 0008 0100     		.2byte	0x1
 1035 000a 50       		.byte	0x50
 1036 000b 00000000 		.4byte	0
 1037 000f 00000000 		.4byte	0
 1038              		.section	.debug_aranges,"",%progbits
 1039 0000 84000000 		.4byte	0x84
 1040 0004 0200     		.2byte	0x2
 1041 0006 00000000 		.4byte	.Ldebug_info0
 1042 000a 04       		.byte	0x4
 1043 000b 00       		.byte	0
 1044 000c 0000     		.2byte	0
 1045 000e 0000     		.2byte	0
 1046 0010 00000000 		.4byte	.LFB2
 1047 0014 02000000 		.4byte	.LFE2-.LFB2
 1048 0018 00000000 		.4byte	.LFB3
 1049 001c 02000000 		.4byte	.LFE3-.LFB3
 1050 0020 00000000 		.4byte	.LFB4
 1051 0024 0C000000 		.4byte	.LFE4-.LFB4
 1052 0028 00000000 		.4byte	.LFB5
 1053 002c 14000000 		.4byte	.LFE5-.LFB5
 1054 0030 00000000 		.4byte	.LFB7
 1055 0034 0C000000 		.4byte	.LFE7-.LFB7
 1056 0038 00000000 		.4byte	.LFB8
 1057 003c 0C000000 		.4byte	.LFE8-.LFB8
 1058 0040 00000000 		.4byte	.LFB9
 1059 0044 0C000000 		.4byte	.LFE9-.LFB9
 1060 0048 00000000 		.4byte	.LFB10
 1061 004c 0C000000 		.4byte	.LFE10-.LFB10
 1062 0050 00000000 		.4byte	.LFB11
 1063 0054 0C000000 		.4byte	.LFE11-.LFB11
 1064 0058 00000000 		.4byte	.LFB6
 1065 005c 14000000 		.4byte	.LFE6-.LFB6
 1066 0060 00000000 		.4byte	.LFB1
 1067 0064 50000000 		.4byte	.LFE1-.LFB1
 1068 0068 00000000 		.4byte	.LFB0
 1069 006c 18000000 		.4byte	.LFE0-.LFB0
 1070 0070 00000000 		.4byte	.LFB12
 1071 0074 0C000000 		.4byte	.LFE12-.LFB12
 1072 0078 00000000 		.4byte	.LFB13
 1073 007c 0C000000 		.4byte	.LFE13-.LFB13
 1074 0080 00000000 		.4byte	0
 1075 0084 00000000 		.4byte	0
 1076              		.section	.debug_ranges,"",%progbits
 1077              	.Ldebug_ranges0:
 1078 0000 00000000 		.4byte	.LFB2
 1079 0004 02000000 		.4byte	.LFE2
 1080 0008 00000000 		.4byte	.LFB3
 1081 000c 02000000 		.4byte	.LFE3
 1082 0010 00000000 		.4byte	.LFB4
 1083 0014 0C000000 		.4byte	.LFE4
 1084 0018 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 36


 1085 001c 14000000 		.4byte	.LFE5
 1086 0020 00000000 		.4byte	.LFB7
 1087 0024 0C000000 		.4byte	.LFE7
 1088 0028 00000000 		.4byte	.LFB8
 1089 002c 0C000000 		.4byte	.LFE8
 1090 0030 00000000 		.4byte	.LFB9
 1091 0034 0C000000 		.4byte	.LFE9
 1092 0038 00000000 		.4byte	.LFB10
 1093 003c 0C000000 		.4byte	.LFE10
 1094 0040 00000000 		.4byte	.LFB11
 1095 0044 0C000000 		.4byte	.LFE11
 1096 0048 00000000 		.4byte	.LFB6
 1097 004c 14000000 		.4byte	.LFE6
 1098 0050 00000000 		.4byte	.LFB1
 1099 0054 50000000 		.4byte	.LFE1
 1100 0058 00000000 		.4byte	.LFB0
 1101 005c 18000000 		.4byte	.LFE0
 1102 0060 00000000 		.4byte	.LFB12
 1103 0064 0C000000 		.4byte	.LFE12
 1104 0068 00000000 		.4byte	.LFB13
 1105 006c 0C000000 		.4byte	.LFE13
 1106 0070 00000000 		.4byte	0
 1107 0074 00000000 		.4byte	0
 1108              		.section	.debug_line,"",%progbits
 1109              	.Ldebug_line0:
 1110 0000 57010000 		.section	.debug_str,"MS",%progbits,1
 1110      02004C00 
 1110      00000201 
 1110      FB0E0D00 
 1110      01010101 
 1111              	.LASF15:
 1112 0000 72656731 		.ascii	"reg16\000"
 1112      3600
 1113              	.LASF20:
 1114 0006 50574D32 		.ascii	"PWM2_WriteCounter\000"
 1114      5F577269 
 1114      7465436F 
 1114      756E7465 
 1114      7200
 1115              	.LASF23:
 1116 0018 70657269 		.ascii	"period\000"
 1116      6F6400
 1117              	.LASF3:
 1118 001f 73686F72 		.ascii	"short unsigned int\000"
 1118      7420756E 
 1118      7369676E 
 1118      65642069 
 1118      6E7400
 1119              	.LASF26:
 1120 0032 50574D32 		.ascii	"PWM2_SetInterruptMode\000"
 1120      5F536574 
 1120      496E7465 
 1120      72727570 
 1120      744D6F64 
 1121              	.LASF32:
 1122 0048 50574D32 		.ascii	"PWM2_Init\000"
 1122      5F496E69 
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 37


 1122      7400
 1123              	.LASF40:
 1124 0052 443A5C55 		.ascii	"D:\\Users\\ESTEBAN\\Desktop\\Materias\\Codigos\\Psc"
 1124      73657273 
 1124      5C455354 
 1124      4542414E 
 1124      5C446573 
 1125 007f 6F635C4C 		.ascii	"oc\\LABVIEW\\labview.cydsn\000"
 1125      41425649 
 1125      45575C6C 
 1125      61627669 
 1125      65772E63 
 1126              	.LASF11:
 1127 0098 666C6F61 		.ascii	"float\000"
 1127      7400
 1128              	.LASF22:
 1129 009e 636F756E 		.ascii	"counter\000"
 1129      74657200 
 1130              	.LASF7:
 1131 00a6 6C6F6E67 		.ascii	"long long unsigned int\000"
 1131      206C6F6E 
 1131      6720756E 
 1131      7369676E 
 1131      65642069 
 1132              	.LASF21:
 1133 00bd 50574D32 		.ascii	"PWM2_WritePeriod\000"
 1133      5F577269 
 1133      74655065 
 1133      72696F64 
 1133      00
 1134              	.LASF18:
 1135 00ce 50574D32 		.ascii	"PWM2_Enable\000"
 1135      5F456E61 
 1135      626C6500 
 1136              	.LASF1:
 1137 00da 756E7369 		.ascii	"unsigned char\000"
 1137      676E6564 
 1137      20636861 
 1137      7200
 1138              	.LASF38:
 1139 00e8 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1139      43313120 
 1139      352E342E 
 1139      31203230 
 1139      31363036 
 1140 011b 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1140      20726576 
 1140      6973696F 
 1140      6E203233 
 1140      37373135 
 1141 014e 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1141      66756E63 
 1141      74696F6E 
 1141      2D736563 
 1141      74696F6E 
 1142              	.LASF14:
 1143 0176 72656738 		.ascii	"reg8\000"
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 38


 1143      00
 1144              	.LASF5:
 1145 017b 6C6F6E67 		.ascii	"long unsigned int\000"
 1145      20756E73 
 1145      69676E65 
 1145      6420696E 
 1145      7400
 1146              	.LASF9:
 1147 018d 75696E74 		.ascii	"uint8\000"
 1147      3800
 1148              	.LASF12:
 1149 0193 646F7562 		.ascii	"double\000"
 1149      6C6500
 1150              	.LASF2:
 1151 019a 73686F72 		.ascii	"short int\000"
 1151      7420696E 
 1151      7400
 1152              	.LASF10:
 1153 01a4 75696E74 		.ascii	"uint16\000"
 1153      313600
 1154              	.LASF41:
 1155 01ab 50574D32 		.ascii	"PWM2_interruptState\000"
 1155      5F696E74 
 1155      65727275 
 1155      70745374 
 1155      61746500 
 1156              	.LASF19:
 1157 01bf 50574D32 		.ascii	"PWM2_Stop\000"
 1157      5F53746F 
 1157      7000
 1158              	.LASF36:
 1159 01c9 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1159      74657243 
 1159      72697469 
 1159      63616C53 
 1159      65637469 
 1160              	.LASF8:
 1161 01e0 756E7369 		.ascii	"unsigned int\000"
 1161      676E6564 
 1161      20696E74 
 1161      00
 1162              	.LASF37:
 1163 01ed 43794578 		.ascii	"CyExitCriticalSection\000"
 1163      69744372 
 1163      69746963 
 1163      616C5365 
 1163      6374696F 
 1164              	.LASF39:
 1165 0203 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM2.c\000"
 1165      72617465 
 1165      645F536F 
 1165      75726365 
 1165      5C50536F 
 1166              	.LASF34:
 1167 0221 50574D32 		.ascii	"PWM2_ReadCompare\000"
 1167      5F526561 
 1167      64436F6D 
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 39


 1167      70617265 
 1167      00
 1168              	.LASF33:
 1169 0232 50574D32 		.ascii	"PWM2_Start\000"
 1169      5F537461 
 1169      727400
 1170              	.LASF35:
 1171 023d 50574D32 		.ascii	"PWM2_ReadPeriod\000"
 1171      5F526561 
 1171      64506572 
 1171      696F6400 
 1172              	.LASF17:
 1173 024d 73697A65 		.ascii	"sizetype\000"
 1173      74797065 
 1173      00
 1174              	.LASF6:
 1175 0256 6C6F6E67 		.ascii	"long long int\000"
 1175      206C6F6E 
 1175      6720696E 
 1175      7400
 1176              	.LASF24:
 1177 0264 50574D32 		.ascii	"PWM2_WriteCompare\000"
 1177      5F577269 
 1177      7465436F 
 1177      6D706172 
 1177      6500
 1178              	.LASF27:
 1179 0276 696E7465 		.ascii	"interruptMode\000"
 1179      72727570 
 1179      744D6F64 
 1179      6500
 1180              	.LASF30:
 1181 0284 50574D32 		.ascii	"PWM2_ReadCapture\000"
 1181      5F526561 
 1181      64436170 
 1181      74757265 
 1181      00
 1182              	.LASF4:
 1183 0295 6C6F6E67 		.ascii	"long int\000"
 1183      20696E74 
 1183      00
 1184              	.LASF13:
 1185 029e 63686172 		.ascii	"char\000"
 1185      00
 1186              	.LASF16:
 1187 02a3 6C6F6E67 		.ascii	"long double\000"
 1187      20646F75 
 1187      626C6500 
 1188              	.LASF0:
 1189 02af 7369676E 		.ascii	"signed char\000"
 1189      65642063 
 1189      68617200 
 1190              	.LASF25:
 1191 02bb 636F6D70 		.ascii	"compare\000"
 1191      61726500 
 1192              	.LASF42:
 1193 02c3 50574D32 		.ascii	"PWM2_initVar\000"
ARM GAS  C:\Users\ESTEBAN\AppData\Local\Temp\ccfS7kHF.s 			page 40


 1193      5F696E69 
 1193      74566172 
 1193      00
 1194              	.LASF31:
 1195 02d0 50574D32 		.ascii	"PWM2_ClearFIFO\000"
 1195      5F436C65 
 1195      61724649 
 1195      464F00
 1196              	.LASF28:
 1197 02df 50574D32 		.ascii	"PWM2_ReadCounter\000"
 1197      5F526561 
 1197      64436F75 
 1197      6E746572 
 1197      00
 1198              	.LASF29:
 1199 02f0 50574D32 		.ascii	"PWM2_ReadStatusRegister\000"
 1199      5F526561 
 1199      64537461 
 1199      74757352 
 1199      65676973 
 1200              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
